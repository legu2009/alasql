//! AlaSQL v0.5.1-develop-950dad38undefined | © 2014-2018 Andrey Gershun & Mathias Rangel Wulff | License: MIT
/*
@module alasql
@version 0.5.1-develop-950dad38undefined

AlaSQL - JavaScript SQL database
© 2014-2016	Andrey Gershun & Mathias Rangel Wulff

@license
The MIT License (MIT)

Copyright 2014-2016 Andrey Gershun (agershun@gmail.com) & Mathias Rangel Wulff (m@rawu.dk)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* eslint-disable */

"use strict";

/**
	@fileoverview AlaSQL JavaScript SQL library
	@see http://github.com/agershun/alasql
*/

/**
	Callback from statement
	@callback statement-callback
	@param {object} data Result data
*/

/**
	UMD envelope for AlaSQL
*/

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
    	/** alasql main function */
        module.exports = factory();
    } else {
        root.alasql = factory();
    }
}(this, function () {

/**
	AlaSQL - Main Alasql class
 	@function
 	@param {string|function|object} sql - SQL-statement or data object for fuent interface
 	@param {object} params - SQL parameters
 	@param {function} cb - callback function
 	@param {object} scope - Scope for nested queries
 	@return {any} - Result data object

	@example
 Standard sync call:
    alasql('CREATE TABLE one');
 Query:
 	var res = alasql('SELECT * FROM one');
 Call with parameters:
 	var res = alasql('SELECT * FROM ?',[data]);
 Standard async call with callback function:
 	alasql('SELECT * FROM ?',[data],function(res){
		console.log(data);
 	});
 Call with scope for subquery (to pass common values):
    var scope = {one:{a:2,b;20}}
    alasql('SELECT * FROM ? two WHERE two.a = one.a',[data],null,scope);
 Call for fluent interface with data object:
    alasql(data).Where(function(x){return x.a == 10}).exec();
 Call for fluent interface without data object:
    alasql().From(data).Where(function(x){return x.a == 10}).exec();
 */

var alasql = function(sql, params, cb, scope) {

	params = params||[];

	if(typeof importScripts !== 'function' && alasql.webworker) {
		var id = alasql.lastid++;
		alasql.buffer[id] = cb;
		alasql.webworker.postMessage({id:id,sql:sql,params:params});
		return;
	} 

	if(arguments.length === 0) {
		// Without arguments - Fluent interface
		return new yy.Select({
			columns:[new yy.Column({columnid:'*'})],
			from: [new yy.ParamValue({param:0})]
		});
	} else if(arguments.length === 1){ 
		// Access promise notation without using `.promise(...)`
		if(sql.constructor === Array){
			return alasql.promise(sql);
		}
	} 
	// Avoid setting params if not needed even with callback
	if(typeof params === 'function'){
		scope = cb;
		cb = params;
		params = [];
	}

	if(typeof params !== 'object'){
			params = [params];
	}

	// Standard interface
	// alasql('#sql');
	if(typeof sql === 'string' && sql[0]==='#' && typeof document === "object") {
		sql = document.querySelector(sql).textContent;
	} else if(typeof sql === 'object' && sql instanceof HTMLElement) {
		sql = sql.textContent;
	} else if(typeof sql === 'function') {
		// to run multiline functions
		sql = sql.toString();
		sql = (/\/\*([\S\s]+)\*\//m.exec(sql) || ['','Function given as SQL. Plese Provide SQL string or have a /* ... */ syle comment with SQL in the function.'])[1];	
	}
	// Run SQL			
	return alasql.exec(sql, params, cb, scope);
};

/** 
	Current version of alasql 
 	@constant {string} 
*/
alasql.version = '0.5.1-develop-950dad38undefined';

/**
	Debug flag
	@type {boolean}
*/
alasql.debug = undefined; // Initial debug variable

/*only-for-browser/*
var require = function(){return null}; // as alasqlparser.js is generated, we can not "remove" referenses to 
var __dirname = '';
//*/

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }

  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }

  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var alasqlparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,13],$V1=[1,104],$V2=[1,102],$V3=[1,103],$V4=[1,6],$V5=[1,42],$V6=[1,79],$V7=[1,76],$V8=[1,94],$V9=[1,93],$Va=[1,69],$Vb=[1,101],$Vc=[1,85],$Vd=[1,64],$Ve=[1,78],$Vf=[1,71],$Vg=[1,84],$Vh=[1,66],$Vi=[1,70],$Vj=[1,68],$Vk=[1,61],$Vl=[1,74],$Vm=[1,62],$Vn=[1,67],$Vo=[1,83],$Vp=[1,77],$Vq=[1,86],$Vr=[1,87],$Vs=[1,81],$Vt=[1,82],$Vu=[1,80],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[1,98],$VB=[1,65],$VC=[1,72],$VD=[1,96],$VE=[1,97],$VF=[1,63],$VG=[1,73],$VH=[1,108],$VI=[1,107],$VJ=[10,310,605,767],$VK=[10,310,314,605,767],$VL=[1,118],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[133,357,414],$VU=[1,130],$VV=[1,129],$VW=[1,137],$VX=[1,167],$VY=[1,206],$VZ=[1,207],$V_=[1,178],$V$=[1,176],$V01=[1,184],$V11=[1,188],$V21=[1,163],$V31=[1,185],$V41=[1,172],$V51=[1,174],$V61=[1,177],$V71=[1,186],$V81=[1,169],$V91=[1,196],$Va1=[1,191],$Vb1=[1,192],$Vc1=[1,197],$Vd1=[1,198],$Ve1=[1,199],$Vf1=[1,200],$Vg1=[1,201],$Vh1=[1,202],$Vi1=[1,203],$Vj1=[1,204],$Vk1=[1,205],$Vl1=[1,179],$Vm1=[1,180],$Vn1=[1,182],$Vo1=[1,183],$Vp1=[1,189],$Vq1=[1,195],$Vr1=[1,187],$Vs1=[1,190],$Vt1=[1,175],$Vu1=[1,173],$Vv1=[1,194],$Vw1=[1,208],$Vx1=[2,4,5],$Vy1=[2,478],$Vz1=[1,211],$VA1=[1,216],$VB1=[1,221],$VC1=[10,72,78,93,98,121,131,164,170,171,185,199,233,246,248,310,314,605,767],$VD1=[2,4,5,10,72,76,77,78,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,185,187,189,199,281,282,283,284,285,286,287,288,289,310,314,424,428,605,767],$VE1=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VF1=[1,254],$VG1=[1,261],$VH1=[1,270],$VI1=[1,275],$VJ1=[1,274],$VK1=[2,4,5,77,115,116,134,139,145,147,151,154,156,158,181,182,183,266,267,271,272,274,281,282,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,306,307,316,321,424,428],$VL1=[2,164],$VM1=[1,286],$VN1=[10,74,78,310,314,508,605,767],$VO1=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,194,199,207,209,223,224,225,226,227,228,229,230,231,232,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,306,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,348,360,372,373,374,377,378,390,393,400,404,405,406,407,408,409,410,412,413,421,422,424,428,430,437,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,517,518,519,520,605,767],$VP1=[2,4,5,10,53,72,89,127,148,158,190,267,268,291,294,310,339,342,343,400,404,405,408,410,412,413,421,422,438,440,441,443,444,445,446,447,451,452,455,508,510,511,520,605,767],$VQ1=[1,567],$VR1=[1,572],$VS1=[2,510],$VT1=[1,577],$VU1=[1,591],$VV1=[1,592],$VW1=[10,78,89,115,116,139,148,190,300,310,314,473,605,767],$VX1=[10,74,310,314,605,767],$VY1=[2,574],$VZ1=[1,610],$V_1=[2,4,5,158],$V$1=[1,648],$V02=[1,620],$V12=[1,654],$V22=[1,655],$V32=[1,628],$V42=[1,639],$V52=[1,626],$V62=[1,634],$V72=[1,627],$V82=[1,635],$V92=[1,637],$Va2=[1,629],$Vb2=[1,630],$Vc2=[1,649],$Vd2=[1,646],$Ve2=[1,647],$Vf2=[1,623],$Vg2=[1,625],$Vh2=[1,617],$Vi2=[1,618],$Vj2=[1,619],$Vk2=[1,621],$Vl2=[1,622],$Vm2=[1,624],$Vn2=[1,631],$Vo2=[1,632],$Vp2=[1,636],$Vq2=[1,638],$Vr2=[1,640],$Vs2=[1,641],$Vt2=[1,642],$Vu2=[1,643],$Vv2=[1,644],$Vw2=[1,650],$Vx2=[1,651],$Vy2=[1,652],$Vz2=[1,653],$VA2=[2,289],$VB2=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,232,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VC2=[2,366],$VD2=[1,676],$VE2=[1,686],$VF2=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,232,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VG2=[1,702],$VH2=[1,711],$VI2=[2,4,5,10,72,74,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],$VJ2=[10,72,74,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],$VK2=[2,204],$VL2=[1,733],$VM2=[10,72,78,93,98,121,131,164,170,171,185,233,246,248,310,314,605,767],$VN2=[2,165],$VO2=[1,736],$VP2=[2,4,5,112],$VQ2=[1,749],$VR2=[1,768],$VS2=[1,748],$VT2=[1,747],$VU2=[1,742],$VV2=[1,743],$VW2=[1,745],$VX2=[1,746],$VY2=[1,750],$VZ2=[1,751],$V_2=[1,752],$V$2=[1,753],$V03=[1,755],$V13=[1,756],$V23=[1,757],$V33=[1,758],$V43=[1,759],$V53=[1,760],$V63=[1,761],$V73=[1,762],$V83=[1,763],$V93=[1,764],$Va3=[1,765],$Vb3=[1,767],$Vc3=[1,769],$Vd3=[1,770],$Ve3=[1,771],$Vf3=[1,772],$Vg3=[1,773],$Vh3=[1,774],$Vi3=[1,775],$Vj3=[1,778],$Vk3=[1,779],$Vl3=[1,780],$Vm3=[1,781],$Vn3=[1,782],$Vo3=[1,783],$Vp3=[1,784],$Vq3=[1,785],$Vr3=[1,786],$Vs3=[1,787],$Vt3=[1,788],$Vu3=[1,789],$Vv3=[74,89,190],$Vw3=[10,74,78,156,189,231,301,310,314,347,360,372,373,377,378,605,767],$Vx3=[1,806],$Vy3=[10,74,78,304,310,314,605,767],$Vz3=[1,807],$VA3=[1,813],$VB3=[1,814],$VC3=[1,818],$VD3=[10,74,78,310,314,605,767],$VE3=[2,4,5,77,115,116,134,139,145,147,151,154,156,158,166,181,182,183,187,189,196,266,267,271,272,274,281,282,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,306,307,316,321,424,428],$VF3=[2,4,5,115,116,300],$VG3=[1,854],$VH3=[10,74,76,78,310,314,605,767],$VI3=[2,745],$VJ3=[10,74,76,78,115,116,141,143,147,154,310,314,424,428,605,767],$VK3=[2,1166],$VL3=[10,74,76,78,141,143,147,154,310,314,424,428,605,767],$VM3=[10,74,76,78,141,143,147,310,314,424,428,605,767],$VN3=[10,74,78,141,143,310,314,605,767],$VO3=[10,78,89,115,116,148,190,300,310,314,473,605,767],$VP3=[339,342,343],$VQ3=[2,771],$VR3=[1,879],$VS3=[1,880],$VT3=[1,881],$VU3=[1,882],$VV3=[1,891],$VW3=[1,890],$VX3=[166,168,338],$VY3=[2,451],$VZ3=[1,946],$V_3=[2,4,5,77,134,158,291,292,293,294,295,296,297],$V$3=[1,961],$V04=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,127,131,132,133,134,136,137,139,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,318,319,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$V14=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$V24=[2,382],$V34=[1,968],$V44=[310,312,314],$V54=[74,304],$V64=[74,304,430],$V74=[1,977],$V84=[2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$V94=[74,430],$Va4=[1,990],$Vb4=[1,989],$Vc4=[1,996],$Vd4=[10,72,78,93,98,121,131,164,170,171,233,246,248,310,314,605,767],$Ve4=[1,1022],$Vf4=[10,72,78,310,314,605,767],$Vg4=[1,1028],$Vh4=[1,1029],$Vi4=[1,1030],$Vj4=[2,4,5,10,72,74,76,77,78,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,199,281,282,283,284,285,286,287,288,289,310,314,424,428,605,767],$Vk4=[1,1080],$Vl4=[1,1079],$Vm4=[1,1093],$Vn4=[1,1092],$Vo4=[10,72,78,93,98,107,121,131,164,170,171,185,199,233,246,248,310,314,605,767],$Vp4=[1,1100],$Vq4=[10,72,74,78,93,98,107,121,131,164,170,171,185,199,233,246,248,310,314,605,767],$Vr4=[1,1132],$Vs4=[10,78,89,148,190,310,314,473,605,767],$Vt4=[1,1152],$Vu4=[1,1151],$Vv4=[1,1150],$Vw4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$Vx4=[2,4],$Vy4=[1,1166],$Vz4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,318,319,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VA4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,319,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VB4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,127,131,132,133,134,135,136,137,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,318,319,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VC4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,127,131,132,133,134,136,137,139,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,318,319,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VD4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,318,324,325,326,327,328,329,330,334,335,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VE4=[2,413],$VF4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,107,115,116,121,125,131,132,133,134,136,137,139,145,147,148,150,151,152,154,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,318,334,335,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VG4=[2,287],$VH4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VI4=[10,78,310,314,605,767],$VJ4=[1,1203],$VK4=[10,77,78,145,147,154,183,306,310,314,424,428,605,767],$VL4=[10,74,78,310,312,314,467,605,767],$VM4=[1,1214],$VN4=[10,72,78,121,131,164,170,171,233,246,248,310,314,605,767],$VO4=[10,72,74,78,93,98,121,131,164,170,171,185,199,233,246,248,310,314,605,767],$VP4=[2,4,5,72,76,77,78,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,187,189,281,282,283,284,285,286,287,288,289,424,428],$VQ4=[2,4,5,72,74,76,77,78,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,187,189,281,282,283,284,285,286,287,288,289,424,428],$VR4=[2,1092],$VS4=[2,4,5,72,74,76,77,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,187,189,281,282,283,284,285,286,287,288,289,424,428],$VT4=[1,1266],$VU4=[10,74,78,131,310,312,314,467,605,767],$VV4=[118,119,127],$VW4=[2,591],$VX4=[1,1294],$VY4=[76,141],$VZ4=[2,731],$V_4=[1,1311],$V$4=[1,1312],$V05=[2,4,5,10,53,72,76,89,127,148,158,190,231,267,268,291,294,310,314,339,342,343,400,404,405,408,410,412,413,421,422,438,440,441,443,444,445,446,447,451,452,455,508,510,511,520,605,767],$V15=[2,334],$V25=[1,1336],$V35=[1,1351],$V45=[1,1353],$V55=[2,494],$V65=[74,78],$V75=[10,310,312,314,467,605,767],$V85=[10,72,78,121,164,170,171,233,246,248,310,314,605,767],$V95=[1,1369],$Va5=[1,1373],$Vb5=[1,1374],$Vc5=[1,1376],$Vd5=[1,1377],$Ve5=[1,1378],$Vf5=[1,1379],$Vg5=[1,1380],$Vh5=[1,1381],$Vi5=[1,1382],$Vj5=[1,1383],$Vk5=[10,72,74,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,233,246,248,310,314,605,767],$Vl5=[1,1408],$Vm5=[10,72,78,121,164,170,171,246,248,310,314,605,767],$Vn5=[10,72,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,233,246,248,310,314,605,767],$Vo5=[1,1507],$Vp5=[1,1509],$Vq5=[2,4,5,77,145,147,154,158,183,291,292,293,294,295,296,297,306,424,428],$Vr5=[1,1523],$Vs5=[10,72,74,78,164,170,171,246,248,310,314,605,767],$Vt5=[1,1541],$Vu5=[1,1543],$Vv5=[1,1544],$Vw5=[1,1540],$Vx5=[1,1539],$Vy5=[1,1538],$Vz5=[1,1545],$VA5=[1,1535],$VB5=[1,1536],$VC5=[1,1537],$VD5=[1,1562],$VE5=[2,4,5,10,53,72,89,127,148,158,190,267,268,291,294,310,314,339,342,343,400,404,405,408,410,412,413,421,422,438,440,441,443,444,445,446,447,451,452,455,508,510,511,520,605,767],$VF5=[1,1573],$VG5=[1,1582],$VH5=[1,1581],$VI5=[10,72,78,164,170,171,246,248,310,314,605,767],$VJ5=[10,72,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],$VK5=[2,4,5,10,72,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],$VL5=[1,1639],$VM5=[1,1641],$VN5=[1,1638],$VO5=[1,1640],$VP5=[189,194,372,373,374,377],$VQ5=[2,522],$VR5=[1,1646],$VS5=[1,1666],$VT5=[10,72,78,164,170,171,310,314,605,767],$VU5=[1,1676],$VV5=[1,1677],$VW5=[1,1678],$VX5=[1,1697],$VY5=[4,10,244,310,314,347,360,605,767],$VZ5=[1,1745],$V_5=[10,72,74,78,121,164,170,171,240,246,248,310,314,605,767],$V$5=[2,4,5,77],$V06=[1,1841],$V16=[1,1872],$V26=[10,72,78,164,170,171,310,314,419,605,767],$V36=[10,74,78,231,310,314,605,767];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"NonReserved":6,"LiteralWithSpaces":7,"main":8,"Statements":9,"EOF":10,"Statements_group0":11,"AStatement":12,"ExplainStatement":13,"EXPLAIN":14,"QUERY":15,"PLAN":16,"Statement":17,"AlterTable":18,"AttachDatabase":19,"Call":20,"CreateDatabase":21,"CreateIndex":22,"CreateGraph":23,"CreateTable":24,"CreateView":25,"CreateEdge":26,"CreateVertex":27,"Declare":28,"Delete":29,"DetachDatabase":30,"DropDatabase":31,"DropIndex":32,"DropTable":33,"DropView":34,"If":35,"Insert":36,"Merge":37,"Reindex":38,"RenameTable":39,"Select":40,"ShowCreateTable":41,"ShowColumns":42,"ShowDatabases":43,"ShowIndex":44,"ShowTables":45,"TruncateTable":46,"WithSelect":47,"CreateTrigger":48,"DropTrigger":49,"BeginTransaction":50,"CommitTransaction":51,"RollbackTransaction":52,"EndTransaction":53,"UseDatabase":54,"Update":55,"JavaScript":56,"Source":57,"Assert":58,"While":59,"Continue":60,"Break":61,"BeginEnd":62,"Print":63,"Require":64,"SetVariable":65,"ExpressionStatement":66,"AddRule":67,"Query":68,"Echo":69,"CreateFunction":70,"CreateAggregate":71,"WITH":72,"WithTablesList":73,"COMMA":74,"WithTable":75,"AS":76,"LPAR":77,"RPAR":78,"SelectClause":79,"Select_option0":80,"IntoClause":81,"FromClause":82,"Select_option1":83,"WhereClause":84,"GroupClause":85,"OrderClause":86,"LimitClause":87,"UnionClause":88,"SEARCH":89,"Select_repetition0":90,"Select_option2":91,"PivotClause":92,"PIVOT":93,"Expression":94,"FOR":95,"PivotClause_option0":96,"PivotClause_option1":97,"UNPIVOT":98,"IN":99,"ColumnsList":100,"PivotClause_option2":101,"PivotClause2":102,"AsList":103,"AsLiteral":104,"AsPart":105,"RemoveClause":106,"REMOVE":107,"RemoveClause_option0":108,"RemoveColumnsList":109,"RemoveColumn":110,"Column":111,"LIKE":112,"StringValue":113,"STRING":114,"SINGLE_STRING":115,"DOUBLE_STRING":116,"ArrowDot":117,"ARROW":118,"DOT":119,"SearchSelector":120,"ORDER":121,"BY":122,"OrderExpressionsList":123,"SearchSelector_option0":124,"DOTDOT":125,"CARET":126,"EQ":127,"SearchSelector_repetition_plus0":128,"SearchSelector_repetition_plus1":129,"SearchSelector_option1":130,"WHERE":131,"OF":132,"CLASS":133,"NUMBER":134,"SLASH":135,"VERTEX":136,"EDGE":137,"EXCLAMATION":138,"SHARP":139,"MODULO":140,"GT":141,"LT":142,"GTGT":143,"LTLT":144,"DOLLAR":145,"Json":146,"AT":147,"SET":148,"SetColumnsList":149,"TO":150,"VALUE":151,"ROW":152,"ExprList":153,"COLON":154,"PlusStar":155,"NOT":156,"SearchSelector_repetition2":157,"IF":158,"SearchSelector_repetition3":159,"Aggregator":160,"SearchSelector_repetition4":161,"SearchSelector_group0":162,"SearchSelector_repetition5":163,"UNION":164,"SearchSelectorList":165,"ALL":166,"SearchSelector_repetition6":167,"ANY":168,"SearchSelector_repetition7":169,"INTERSECT":170,"EXCEPT":171,"AND":172,"OR":173,"PATH":174,"RETURN":175,"ResultColumns":176,"REPEAT":177,"SearchSelector_repetition8":178,"SearchSelectorList_repetition0":179,"SearchSelectorList_repetition1":180,"PLUS":181,"STAR":182,"QUESTION":183,"SearchFrom":184,"FROM":185,"SelectModifier":186,"DISTINCT":187,"TopClause":188,"UNIQUE":189,"SELECT":190,"COLUMN":191,"MATRIX":192,"TEXTSTRING":193,"INDEX":194,"RECORDSET":195,"TOP":196,"NumValue":197,"TopClause_option0":198,"INTO":199,"Table":200,"FuncValue":201,"ParamValue":202,"VarValue":203,"FromTablesList":204,"JoinTablesList":205,"ApplyClause":206,"CROSS":207,"APPLY":208,"OUTER":209,"FromTable":210,"FromTable_option0":211,"FromTable_option1":212,"INDEXED":213,"INSERTED":214,"FromString":215,"JoinTable":216,"JoinMode":217,"JoinTableAs":218,"OnClause":219,"JoinTableAs_option0":220,"JoinTableAs_option1":221,"JoinModeMode":222,"NATURAL":223,"JOIN":224,"INNER":225,"LEFT":226,"RIGHT":227,"FULL":228,"SEMI":229,"ANTI":230,"ON":231,"USING":232,"GROUP":233,"GroupExpressionsList":234,"HavingClause":235,"GroupExpression":236,"GROUPING":237,"ROLLUP":238,"CUBE":239,"HAVING":240,"CORRESPONDING":241,"OrderExpression":242,"DIRECTION":243,"COLLATE":244,"NOCASE":245,"LIMIT":246,"OffsetClause":247,"OFFSET":248,"LimitClause_option0":249,"FETCH":250,"LimitClause_option1":251,"LimitClause_option2":252,"LimitClause_option3":253,"ResultColumn":254,"Star":255,"AggrValue":256,"Op":257,"LogicValue":258,"NullValue":259,"ExistsValue":260,"CaseValue":261,"CastClause":262,"ArrayValue":263,"NewClause":264,"Expression_group0":265,"CURRENT_TIMESTAMP":266,"JAVASCRIPT":267,"CREATE":268,"FUNCTION":269,"AGGREGATE":270,"NEW":271,"CAST":272,"ColumnType":273,"CONVERT":274,"PrimitiveValue":275,"OverClause":276,"OVER":277,"OverPartitionClause":278,"OverOrderByClause":279,"PARTITION":280,"SUM":281,"COUNT":282,"MIN":283,"MAX":284,"AVG":285,"FIRST":286,"LAST":287,"AGGR":288,"ARRAY":289,"FuncValue_option0":290,"TRUNCATE":291,"RIGHTFN":292,"LEFTFN":293,"REPLACE":294,"DATEADD":295,"DATEDIFF":296,"INTERVAL":297,"TRUE":298,"FALSE":299,"NSTRING":300,"NULL":301,"EXISTS":302,"ARRAYLBRA":303,"RBRA":304,"ParamValue_group0":305,"BRAQUESTION":306,"CASE":307,"WhensList":308,"ElseClause":309,"END":310,"When":311,"WHEN":312,"THEN":313,"ELSE":314,"REGEXP":315,"TILDA":316,"GLOB":317,"ESCAPE":318,"NOT_LIKE":319,"BARBAR":320,"MINUS":321,"AMPERSAND":322,"BAR":323,"GE":324,"LE":325,"EQEQ":326,"EQEQEQ":327,"NE":328,"NEEQEQ":329,"NEEQEQEQ":330,"CondOp":331,"AllSome":332,"ColFunc":333,"BETWEEN":334,"NOT_BETWEEN":335,"IS":336,"DOUBLECOLON":337,"SOME":338,"UPDATE":339,"SetColumn":340,"SetColumn_group0":341,"DELETE":342,"INSERT":343,"Into":344,"Values":345,"ValuesListsList":346,"DEFAULT":347,"VALUES":348,"ValuesList":349,"Value":350,"DateValue":351,"TemporaryClause":352,"TableClass":353,"IfNotExists":354,"CreateTableDefClause":355,"CreateTableOptionsClause":356,"TABLE":357,"CreateTableOptions":358,"CreateTableOption":359,"IDENTITY":360,"TEMP":361,"ColumnDefsList":362,"ConstraintsList":363,"Constraint":364,"ConstraintName":365,"PrimaryKey":366,"ForeignKey":367,"UniqueKey":368,"IndexKey":369,"Check":370,"CONSTRAINT":371,"CHECK":372,"PRIMARY":373,"KEY":374,"PrimaryKey_option0":375,"ColsList":376,"FOREIGN":377,"REFERENCES":378,"ForeignKey_option0":379,"OnForeignKeyClause":380,"ParColsList":381,"OnDeleteClause":382,"OnUpdateClause":383,"NO":384,"ACTION":385,"UniqueKey_option0":386,"UniqueKey_option1":387,"ColumnDef":388,"ColumnConstraintsClause":389,"ColumnConstraints":390,"SingularColumnType":391,"NumberMax":392,"ENUM":393,"MAXNUM":394,"ColumnConstraintsList":395,"ColumnConstraint":396,"ParLiteral":397,"ColumnConstraint_option0":398,"ColumnConstraint_option1":399,"DROP":400,"DropTable_group0":401,"IfExists":402,"TablesList":403,"ALTER":404,"RENAME":405,"ADD":406,"MODIFY":407,"ATTACH":408,"DATABASE":409,"DETACH":410,"AsClause":411,"USE":412,"SHOW":413,"VIEW":414,"CreateView_option0":415,"CreateView_option1":416,"SubqueryRestriction":417,"READ":418,"ONLY":419,"OPTION":420,"SOURCE":421,"ASSERT":422,"JsonObject":423,"ATLBRA":424,"JsonArray":425,"JsonValue":426,"JsonPrimitiveValue":427,"LCUR":428,"JsonPropertiesList":429,"RCUR":430,"JsonElementsList":431,"JsonProperty":432,"OnOff":433,"SetPropsList":434,"AtDollar":435,"SetProp":436,"OFF":437,"COMMIT":438,"TRANSACTION":439,"ROLLBACK":440,"BEGIN":441,"ElseStatement":442,"WHILE":443,"CONTINUE":444,"BREAK":445,"PRINT":446,"REQUIRE":447,"StringValuesList":448,"PluginsList":449,"Plugin":450,"ECHO":451,"DECLARE":452,"DeclaresList":453,"DeclareItem":454,"MERGE":455,"MergeInto":456,"MergeUsing":457,"MergeOn":458,"MergeMatchedList":459,"OutputClause":460,"MergeMatched":461,"MergeNotMatched":462,"MATCHED":463,"MergeMatchedAction":464,"MergeNotMatchedAction":465,"TARGET":466,"OUTPUT":467,"CreateVertex_option0":468,"CreateVertex_option1":469,"CreateVertex_option2":470,"CreateVertexSet":471,"SharpValue":472,"CONTENT":473,"CreateEdge_option0":474,"GRAPH":475,"GraphList":476,"GraphVertexEdge":477,"GraphElement":478,"GraphVertexEdge_option0":479,"GraphVertexEdge_option1":480,"GraphElementVar":481,"GraphVertexEdge_option2":482,"GraphVertexEdge_option3":483,"GraphVertexEdge_option4":484,"GraphVar":485,"GraphAsClause":486,"GraphAtClause":487,"GraphElement2":488,"GraphElement2_option0":489,"GraphElement2_option1":490,"GraphElement2_option2":491,"GraphElement2_option3":492,"GraphElement_option0":493,"GraphElement_option1":494,"GraphElement_option2":495,"SharpLiteral":496,"GraphElement_option3":497,"GraphElement_option4":498,"GraphElement_option5":499,"ColonLiteral":500,"DeleteVertex":501,"DeleteVertex_option0":502,"DeleteEdge":503,"DeleteEdge_option0":504,"DeleteEdge_option1":505,"DeleteEdge_option2":506,"Term":507,"COLONDASH":508,"TermsList":509,"QUESTIONDASH":510,"CALL":511,"TRIGGER":512,"BeforeAfter":513,"InsertDeleteUpdate":514,"CreateTrigger_option0":515,"CreateTrigger_option1":516,"BEFORE":517,"AFTER":518,"INSTEAD":519,"REINDEX":520,"A":521,"ABSENT":522,"ABSOLUTE":523,"ACCORDING":524,"ADA":525,"ADMIN":526,"ALWAYS":527,"ASC":528,"ASSERTION":529,"ASSIGNMENT":530,"ATTRIBUTE":531,"ATTRIBUTES":532,"BASE64":533,"BERNOULLI":534,"BLOCKED":535,"BOM":536,"BREADTH":537,"C":538,"CASCADE":539,"CATALOG":540,"CATALOG_NAME":541,"CHAIN":542,"CHARACTERISTICS":543,"CHARACTERS":544,"CHARACTER_SET_CATALOG":545,"CHARACTER_SET_NAME":546,"CHARACTER_SET_SCHEMA":547,"CLASS_ORIGIN":548,"COBOL":549,"COLLATION":550,"COLLATION_CATALOG":551,"COLLATION_NAME":552,"COLLATION_SCHEMA":553,"COLUMNS":554,"COLUMN_NAME":555,"COMMAND_FUNCTION":556,"COMMAND_FUNCTION_CODE":557,"COMMITTED":558,"CONDITION_NUMBER":559,"CONNECTION":560,"CONNECTION_NAME":561,"CONSTRAINTS":562,"CONSTRAINT_CATALOG":563,"CONSTRAINT_NAME":564,"CONSTRAINT_SCHEMA":565,"CONSTRUCTOR":566,"CONTROL":567,"CURSOR_NAME":568,"DATA":569,"DATETIME_INTERVAL_CODE":570,"DATETIME_INTERVAL_PRECISION":571,"DB":572,"DEFAULTS":573,"DEFERRABLE":574,"DEFERRED":575,"DEFINED":576,"DEFINER":577,"DEGREE":578,"DEPTH":579,"DERIVED":580,"DESC":581,"DESCRIPTOR":582,"DIAGNOSTICS":583,"DISPATCH":584,"DOCUMENT":585,"DOMAIN":586,"DYNAMIC_FUNCTION":587,"DYNAMIC_FUNCTION_CODE":588,"EMPTY":589,"ENCODING":590,"ENFORCED":591,"EXCLUDE":592,"EXCLUDING":593,"EXPRESSION":594,"FILE":595,"FINAL":596,"FLAG":597,"FOLLOWING":598,"FORTRAN":599,"FOUND":600,"FS":601,"G":602,"GENERAL":603,"GENERATED":604,"GO":605,"GOTO":606,"GRANTED":607,"HEX":608,"HIERARCHY":609,"ID":610,"IGNORE":611,"IMMEDIATE":612,"IMMEDIATELY":613,"IMPLEMENTATION":614,"INCLUDING":615,"INCREMENT":616,"INDENT":617,"INITIALLY":618,"INPUT":619,"INSTANCE":620,"INSTANTIABLE":621,"INTEGRITY":622,"INVOKER":623,"ISOLATION":624,"K":625,"KEY_MEMBER":626,"KEY_TYPE":627,"LENGTH":628,"LEVEL":629,"LIBRARY":630,"LINK":631,"LOCATION":632,"LOCATOR":633,"M":634,"MAP":635,"MAPPING":636,"MAXVALUE":637,"MESSAGE_LENGTH":638,"MESSAGE_OCTET_LENGTH":639,"MESSAGE_TEXT":640,"MINVALUE":641,"MORE":642,"MUMPS":643,"NAME":644,"NAMES":645,"NAMESPACE":646,"NESTING":647,"NEXT":648,"NFC":649,"NFD":650,"NFKC":651,"NFKD":652,"NIL":653,"NORMALIZED":654,"NULLABLE":655,"NULLS":656,"OBJECT":657,"OCTETS":658,"OPTIONS":659,"ORDERING":660,"ORDINALITY":661,"OTHERS":662,"OVERRIDING":663,"P":664,"PAD":665,"PARAMETER_MODE":666,"PARAMETER_NAME":667,"PARAMETER_ORDINAL_POSITION":668,"PARAMETER_SPECIFIC_CATALOG":669,"PARAMETER_SPECIFIC_NAME":670,"PARAMETER_SPECIFIC_SCHEMA":671,"PARTIAL":672,"PASCAL":673,"PASSING":674,"PASSTHROUGH":675,"PERMISSION":676,"PLACING":677,"PLI":678,"PRECEDING":679,"PRESERVE":680,"PRIOR":681,"PRIVILEGES":682,"PUBLIC":683,"RECOVERY":684,"RELATIVE":685,"REPEATABLE":686,"REQUIRING":687,"RESPECT":688,"RESTART":689,"RESTORE":690,"RESTRICT":691,"RETURNED_CARDINALITY":692,"RETURNED_LENGTH":693,"RETURNED_OCTET_LENGTH":694,"RETURNED_SQLSTATE":695,"RETURNING":696,"ROLE":697,"ROUTINE":698,"ROUTINE_CATALOG":699,"ROUTINE_NAME":700,"ROUTINE_SCHEMA":701,"ROW_COUNT":702,"SCALE":703,"SCHEMA":704,"SCHEMA_NAME":705,"SCOPE_CATALOG":706,"SCOPE_NAME":707,"SCOPE_SCHEMA":708,"SECTION":709,"SECURITY":710,"SELECTIVE":711,"SELF":712,"SEQUENCE":713,"SERIALIZABLE":714,"SERVER":715,"SERVER_NAME":716,"SESSION":717,"SETS":718,"SIMPLE":719,"SIZE":720,"SPACE":721,"SPECIFIC_NAME":722,"STANDALONE":723,"STATE":724,"STATEMENT":725,"STRIP":726,"STRUCTURE":727,"STYLE":728,"SUBCLASS_ORIGIN":729,"T":730,"TABLE_NAME":731,"TEMPORARY":732,"TIES":733,"TOKEN":734,"TOP_LEVEL_COUNT":735,"TRANSACTIONS_COMMITTED":736,"TRANSACTIONS_ROLLED_BACK":737,"TRANSACTION_ACTIVE":738,"TRANSFORM":739,"TRANSFORMS":740,"TRIGGER_CATALOG":741,"TRIGGER_NAME":742,"TRIGGER_SCHEMA":743,"TYPE":744,"UNBOUNDED":745,"UNCOMMITTED":746,"UNDER":747,"UNLINK":748,"UNNAMED":749,"UNTYPED":750,"URI":751,"USAGE":752,"USER_DEFINED_TYPE_CATALOG":753,"USER_DEFINED_TYPE_CODE":754,"USER_DEFINED_TYPE_NAME":755,"USER_DEFINED_TYPE_SCHEMA":756,"VALID":757,"VERSION":758,"WHITESPACE":759,"WORK":760,"WRAPPER":761,"WRITE":762,"XMLDECLARATION":763,"XMLSCHEMA":764,"YES":765,"ZONE":766,"SEMICOLON":767,"PERCENT":768,"ROWS":769,"FuncValue_option0_group0":770,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",10:"EOF",14:"EXPLAIN",15:"QUERY",16:"PLAN",53:"EndTransaction",72:"WITH",74:"COMMA",76:"AS",77:"LPAR",78:"RPAR",89:"SEARCH",93:"PIVOT",95:"FOR",98:"UNPIVOT",99:"IN",107:"REMOVE",112:"LIKE",115:"SINGLE_STRING",116:"DOUBLE_STRING",118:"ARROW",119:"DOT",121:"ORDER",122:"BY",125:"DOTDOT",126:"CARET",127:"EQ",131:"WHERE",132:"OF",133:"CLASS",134:"NUMBER",135:"SLASH",136:"VERTEX",137:"EDGE",138:"EXCLAMATION",139:"SHARP",140:"MODULO",141:"GT",142:"LT",143:"GTGT",144:"LTLT",145:"DOLLAR",147:"AT",148:"SET",150:"TO",151:"VALUE",152:"ROW",154:"COLON",156:"NOT",158:"IF",164:"UNION",166:"ALL",168:"ANY",170:"INTERSECT",171:"EXCEPT",172:"AND",173:"OR",174:"PATH",175:"RETURN",177:"REPEAT",181:"PLUS",182:"STAR",183:"QUESTION",185:"FROM",187:"DISTINCT",189:"UNIQUE",190:"SELECT",191:"COLUMN",192:"MATRIX",193:"TEXTSTRING",194:"INDEX",195:"RECORDSET",196:"TOP",199:"INTO",207:"CROSS",208:"APPLY",209:"OUTER",213:"INDEXED",214:"INSERTED",223:"NATURAL",224:"JOIN",225:"INNER",226:"LEFT",227:"RIGHT",228:"FULL",229:"SEMI",230:"ANTI",231:"ON",232:"USING",233:"GROUP",237:"GROUPING",238:"ROLLUP",239:"CUBE",240:"HAVING",241:"CORRESPONDING",243:"DIRECTION",244:"COLLATE",245:"NOCASE",246:"LIMIT",248:"OFFSET",250:"FETCH",266:"CURRENT_TIMESTAMP",267:"JAVASCRIPT",268:"CREATE",269:"FUNCTION",270:"AGGREGATE",271:"NEW",272:"CAST",274:"CONVERT",277:"OVER",280:"PARTITION",281:"SUM",282:"COUNT",283:"MIN",284:"MAX",285:"AVG",286:"FIRST",287:"LAST",288:"AGGR",289:"ARRAY",291:"TRUNCATE",292:"RIGHTFN",293:"LEFTFN",294:"REPLACE",295:"DATEADD",296:"DATEDIFF",297:"INTERVAL",298:"TRUE",299:"FALSE",300:"NSTRING",301:"NULL",302:"EXISTS",303:"ARRAYLBRA",304:"RBRA",306:"BRAQUESTION",307:"CASE",310:"END",312:"WHEN",313:"THEN",314:"ELSE",315:"REGEXP",316:"TILDA",317:"GLOB",318:"ESCAPE",319:"NOT_LIKE",320:"BARBAR",321:"MINUS",322:"AMPERSAND",323:"BAR",324:"GE",325:"LE",326:"EQEQ",327:"EQEQEQ",328:"NE",329:"NEEQEQ",330:"NEEQEQEQ",334:"BETWEEN",335:"NOT_BETWEEN",336:"IS",337:"DOUBLECOLON",338:"SOME",339:"UPDATE",342:"DELETE",343:"INSERT",347:"DEFAULT",348:"VALUES",351:"DateValue",357:"TABLE",360:"IDENTITY",361:"TEMP",371:"CONSTRAINT",372:"CHECK",373:"PRIMARY",374:"KEY",377:"FOREIGN",378:"REFERENCES",384:"NO",385:"ACTION",390:"ColumnConstraints",393:"ENUM",394:"MAXNUM",400:"DROP",404:"ALTER",405:"RENAME",406:"ADD",407:"MODIFY",408:"ATTACH",409:"DATABASE",410:"DETACH",412:"USE",413:"SHOW",414:"VIEW",418:"READ",419:"ONLY",420:"OPTION",421:"SOURCE",422:"ASSERT",424:"ATLBRA",428:"LCUR",430:"RCUR",437:"OFF",438:"COMMIT",439:"TRANSACTION",440:"ROLLBACK",441:"BEGIN",443:"WHILE",444:"CONTINUE",445:"BREAK",446:"PRINT",447:"REQUIRE",451:"ECHO",452:"DECLARE",455:"MERGE",463:"MATCHED",466:"TARGET",467:"OUTPUT",473:"CONTENT",475:"GRAPH",508:"COLONDASH",510:"QUESTIONDASH",511:"CALL",512:"TRIGGER",517:"BEFORE",518:"AFTER",519:"INSTEAD",520:"REINDEX",521:"A",522:"ABSENT",523:"ABSOLUTE",524:"ACCORDING",525:"ADA",526:"ADMIN",527:"ALWAYS",528:"ASC",529:"ASSERTION",530:"ASSIGNMENT",531:"ATTRIBUTE",532:"ATTRIBUTES",533:"BASE64",534:"BERNOULLI",535:"BLOCKED",536:"BOM",537:"BREADTH",538:"C",539:"CASCADE",540:"CATALOG",541:"CATALOG_NAME",542:"CHAIN",543:"CHARACTERISTICS",544:"CHARACTERS",545:"CHARACTER_SET_CATALOG",546:"CHARACTER_SET_NAME",547:"CHARACTER_SET_SCHEMA",548:"CLASS_ORIGIN",549:"COBOL",550:"COLLATION",551:"COLLATION_CATALOG",552:"COLLATION_NAME",553:"COLLATION_SCHEMA",554:"COLUMNS",555:"COLUMN_NAME",556:"COMMAND_FUNCTION",557:"COMMAND_FUNCTION_CODE",558:"COMMITTED",559:"CONDITION_NUMBER",560:"CONNECTION",561:"CONNECTION_NAME",562:"CONSTRAINTS",563:"CONSTRAINT_CATALOG",564:"CONSTRAINT_NAME",565:"CONSTRAINT_SCHEMA",566:"CONSTRUCTOR",567:"CONTROL",568:"CURSOR_NAME",569:"DATA",570:"DATETIME_INTERVAL_CODE",571:"DATETIME_INTERVAL_PRECISION",572:"DB",573:"DEFAULTS",574:"DEFERRABLE",575:"DEFERRED",576:"DEFINED",577:"DEFINER",578:"DEGREE",579:"DEPTH",580:"DERIVED",581:"DESC",582:"DESCRIPTOR",583:"DIAGNOSTICS",584:"DISPATCH",585:"DOCUMENT",586:"DOMAIN",587:"DYNAMIC_FUNCTION",588:"DYNAMIC_FUNCTION_CODE",589:"EMPTY",590:"ENCODING",591:"ENFORCED",592:"EXCLUDE",593:"EXCLUDING",594:"EXPRESSION",595:"FILE",596:"FINAL",597:"FLAG",598:"FOLLOWING",599:"FORTRAN",600:"FOUND",601:"FS",602:"G",603:"GENERAL",604:"GENERATED",605:"GO",606:"GOTO",607:"GRANTED",608:"HEX",609:"HIERARCHY",610:"ID",611:"IGNORE",612:"IMMEDIATE",613:"IMMEDIATELY",614:"IMPLEMENTATION",615:"INCLUDING",616:"INCREMENT",617:"INDENT",618:"INITIALLY",619:"INPUT",620:"INSTANCE",621:"INSTANTIABLE",622:"INTEGRITY",623:"INVOKER",624:"ISOLATION",625:"K",626:"KEY_MEMBER",627:"KEY_TYPE",628:"LENGTH",629:"LEVEL",630:"LIBRARY",631:"LINK",632:"LOCATION",633:"LOCATOR",634:"M",635:"MAP",636:"MAPPING",637:"MAXVALUE",638:"MESSAGE_LENGTH",639:"MESSAGE_OCTET_LENGTH",640:"MESSAGE_TEXT",641:"MINVALUE",642:"MORE",643:"MUMPS",644:"NAME",645:"NAMES",646:"NAMESPACE",647:"NESTING",648:"NEXT",649:"NFC",650:"NFD",651:"NFKC",652:"NFKD",653:"NIL",654:"NORMALIZED",655:"NULLABLE",656:"NULLS",657:"OBJECT",658:"OCTETS",659:"OPTIONS",660:"ORDERING",661:"ORDINALITY",662:"OTHERS",663:"OVERRIDING",664:"P",665:"PAD",666:"PARAMETER_MODE",667:"PARAMETER_NAME",668:"PARAMETER_ORDINAL_POSITION",669:"PARAMETER_SPECIFIC_CATALOG",670:"PARAMETER_SPECIFIC_NAME",671:"PARAMETER_SPECIFIC_SCHEMA",672:"PARTIAL",673:"PASCAL",674:"PASSING",675:"PASSTHROUGH",676:"PERMISSION",677:"PLACING",678:"PLI",679:"PRECEDING",680:"PRESERVE",681:"PRIOR",682:"PRIVILEGES",683:"PUBLIC",684:"RECOVERY",685:"RELATIVE",686:"REPEATABLE",687:"REQUIRING",688:"RESPECT",689:"RESTART",690:"RESTORE",691:"RESTRICT",692:"RETURNED_CARDINALITY",693:"RETURNED_LENGTH",694:"RETURNED_OCTET_LENGTH",695:"RETURNED_SQLSTATE",696:"RETURNING",697:"ROLE",698:"ROUTINE",699:"ROUTINE_CATALOG",700:"ROUTINE_NAME",701:"ROUTINE_SCHEMA",702:"ROW_COUNT",703:"SCALE",704:"SCHEMA",705:"SCHEMA_NAME",706:"SCOPE_CATALOG",707:"SCOPE_NAME",708:"SCOPE_SCHEMA",709:"SECTION",710:"SECURITY",711:"SELECTIVE",712:"SELF",713:"SEQUENCE",714:"SERIALIZABLE",715:"SERVER",716:"SERVER_NAME",717:"SESSION",718:"SETS",719:"SIMPLE",720:"SIZE",721:"SPACE",722:"SPECIFIC_NAME",723:"STANDALONE",724:"STATE",725:"STATEMENT",726:"STRIP",727:"STRUCTURE",728:"STYLE",729:"SUBCLASS_ORIGIN",730:"T",731:"TABLE_NAME",732:"TEMPORARY",733:"TIES",734:"TOKEN",735:"TOP_LEVEL_COUNT",736:"TRANSACTIONS_COMMITTED",737:"TRANSACTIONS_ROLLED_BACK",738:"TRANSACTION_ACTIVE",739:"TRANSFORM",740:"TRANSFORMS",741:"TRIGGER_CATALOG",742:"TRIGGER_NAME",743:"TRIGGER_SCHEMA",744:"TYPE",745:"UNBOUNDED",746:"UNCOMMITTED",747:"UNDER",748:"UNLINK",749:"UNNAMED",750:"UNTYPED",751:"URI",752:"USAGE",753:"USER_DEFINED_TYPE_CATALOG",754:"USER_DEFINED_TYPE_CODE",755:"USER_DEFINED_TYPE_NAME",756:"USER_DEFINED_TYPE_SCHEMA",757:"VALID",758:"VERSION",759:"WHITESPACE",760:"WORK",761:"WRAPPER",762:"WRITE",763:"XMLDECLARATION",764:"XMLSCHEMA",765:"YES",766:"ZONE",767:"SEMICOLON",768:"PERCENT",769:"ROWS"},
productions_: [0,[3,1],[3,1],[3,2],[7,1],[7,2],[8,2],[9,3],[9,1],[9,1],[13,2],[13,4],[12,1],[17,0],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[47,3],[73,3],[73,1],[75,5],[40,10],[40,4],[92,8],[92,11],[102,4],[104,2],[104,1],[103,3],[103,1],[105,1],[105,3],[106,3],[109,3],[109,1],[110,1],[110,2],[114,1],[114,1],[117,1],[117,1],[120,1],[120,5],[120,5],[120,1],[120,2],[120,1],[120,2],[120,2],[120,3],[120,4],[120,4],[120,4],[120,4],[120,4],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,2],[120,2],[120,2],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,2],[120,3],[120,4],[120,3],[120,1],[120,4],[120,2],[120,2],[120,4],[120,4],[120,4],[120,4],[120,4],[120,5],[120,4],[120,4],[120,4],[120,4],[120,4],[120,4],[120,4],[120,4],[120,6],[165,3],[165,1],[155,1],[155,1],[155,1],[184,2],[79,4],[79,4],[79,4],[79,3],[186,1],[186,2],[186,2],[186,2],[186,2],[186,2],[186,2],[186,2],[188,3],[188,4],[188,0],[81,0],[81,2],[81,2],[81,2],[81,2],[81,2],[82,2],[82,3],[82,5],[82,0],[206,6],[206,7],[206,6],[206,7],[204,1],[204,3],[210,4],[210,5],[210,3],[210,3],[210,2],[210,3],[210,1],[210,3],[210,2],[210,3],[210,1],[210,1],[210,2],[210,3],[210,1],[210,1],[210,2],[210,3],[210,1],[210,2],[210,3],[215,1],[200,3],[200,1],[205,2],[205,2],[205,1],[205,1],[216,3],[218,1],[218,2],[218,3],[218,3],[218,2],[218,3],[218,4],[218,5],[218,1],[218,2],[218,3],[218,1],[218,2],[218,3],[217,1],[217,2],[222,1],[222,2],[222,2],[222,3],[222,2],[222,3],[222,2],[222,3],[222,2],[222,2],[222,2],[219,2],[219,4],[219,0],[84,0],[84,2],[85,0],[85,4],[234,1],[234,3],[236,5],[236,4],[236,4],[236,1],[235,0],[235,2],[88,0],[88,2],[88,3],[88,2],[88,2],[88,3],[88,4],[88,3],[88,3],[86,0],[86,3],[123,1],[123,3],[242,1],[242,2],[242,3],[242,4],[87,0],[87,3],[87,8],[247,0],[247,2],[176,3],[176,1],[254,3],[254,2],[254,3],[254,2],[254,3],[254,2],[254,1],[255,5],[255,3],[255,1],[111,5],[111,3],[111,3],[111,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,3],[94,3],[94,3],[94,1],[94,1],[56,1],[70,5],[71,5],[264,2],[264,2],[262,6],[262,8],[262,6],[262,8],[262,6],[262,8],[275,1],[275,1],[275,1],[275,1],[275,1],[275,1],[275,1],[256,5],[256,6],[256,6],[276,0],[276,4],[276,4],[276,5],[278,3],[279,3],[160,1],[160,1],[160,1],[160,1],[160,1],[160,1],[160,1],[160,1],[160,1],[201,5],[201,4],[201,3],[201,3],[201,3],[201,4],[201,4],[201,8],[201,8],[201,8],[201,8],[201,3],[153,1],[153,3],[197,1],[258,1],[258,1],[113,1],[113,1],[259,1],[203,2],[260,4],[263,3],[202,2],[202,2],[202,1],[202,1],[261,5],[261,4],[308,2],[308,1],[311,4],[309,2],[309,0],[257,3],[257,3],[257,3],[257,3],[257,5],[257,3],[257,5],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,5],[257,3],[257,3],[257,3],[257,5],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,3],[257,6],[257,6],[257,3],[257,3],[257,2],[257,2],[257,2],[257,2],[257,2],[257,3],[257,5],[257,6],[257,5],[257,6],[257,4],[257,5],[257,3],[257,4],[257,3],[257,4],[257,3],[257,3],[257,3],[257,3],[257,3],[333,1],[333,1],[333,4],[331,1],[331,1],[331,1],[331,1],[331,1],[331,1],[332,1],[332,1],[332,1],[55,6],[55,4],[149,1],[149,3],[340,3],[340,4],[29,5],[29,3],[36,5],[36,4],[36,7],[36,6],[36,5],[36,4],[36,5],[36,8],[36,7],[36,4],[36,6],[36,7],[345,1],[345,1],[344,0],[344,1],[346,3],[346,1],[346,1],[346,5],[346,3],[346,3],[349,1],[349,3],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[100,1],[100,3],[24,9],[24,5],[353,1],[353,1],[356,0],[356,1],[358,2],[358,1],[359,1],[359,3],[359,3],[359,3],[352,0],[352,1],[354,0],[354,3],[355,3],[355,1],[355,2],[363,1],[363,3],[364,2],[364,2],[364,2],[364,2],[364,2],[365,0],[365,2],[370,4],[366,6],[367,9],[381,3],[380,0],[380,2],[382,4],[383,4],[368,6],[369,5],[369,5],[376,1],[376,1],[376,3],[376,3],[362,1],[362,3],[388,3],[388,2],[388,1],[391,6],[391,4],[391,1],[391,4],[273,2],[273,1],[392,1],[392,1],[389,0],[389,1],[395,2],[395,1],[397,3],[396,2],[396,5],[396,3],[396,6],[396,1],[396,2],[396,4],[396,2],[396,1],[396,2],[396,1],[396,1],[396,3],[396,5],[33,4],[403,3],[403,1],[402,0],[402,2],[18,6],[18,6],[18,6],[18,8],[18,6],[39,5],[19,4],[19,7],[19,6],[19,9],[30,3],[21,4],[21,6],[21,9],[21,6],[411,0],[411,2],[54,3],[54,2],[31,4],[31,5],[31,5],[22,8],[22,9],[32,3],[43,2],[43,4],[43,3],[43,5],[45,2],[45,4],[45,4],[45,6],[42,4],[42,6],[44,4],[44,6],[41,4],[41,6],[25,11],[25,8],[417,3],[417,3],[417,5],[34,4],[66,2],[57,2],[58,2],[58,2],[58,4],[146,4],[146,2],[146,2],[146,2],[146,2],[146,1],[146,2],[146,2],[426,1],[426,1],[427,1],[427,1],[427,1],[427,1],[427,1],[427,1],[427,1],[427,3],[423,3],[423,4],[423,2],[425,2],[425,3],[425,1],[429,3],[429,1],[432,3],[432,3],[432,3],[431,3],[431,1],[65,4],[65,3],[65,4],[65,5],[65,5],[65,6],[435,1],[435,1],[434,3],[434,2],[436,1],[436,1],[436,3],[433,1],[433,1],[51,2],[52,2],[50,2],[35,4],[35,3],[442,2],[59,3],[60,1],[61,1],[62,3],[63,2],[63,2],[64,2],[64,2],[450,1],[450,1],[69,2],[448,3],[448,1],[449,3],[449,1],[28,2],[453,1],[453,3],[454,3],[454,4],[454,5],[454,6],[46,3],[37,6],[456,1],[456,2],[457,2],[458,2],[459,2],[459,2],[459,1],[459,1],[461,4],[461,6],[464,1],[464,3],[462,5],[462,7],[462,7],[462,9],[462,7],[462,9],[465,3],[465,6],[465,3],[465,6],[460,0],[460,2],[460,5],[460,4],[460,7],[27,6],[472,2],[471,0],[471,2],[471,2],[471,1],[26,8],[23,3],[23,4],[476,3],[476,1],[477,3],[477,7],[477,6],[477,3],[477,4],[481,1],[481,1],[485,2],[486,3],[487,2],[488,4],[478,4],[478,3],[478,2],[478,1],[500,2],[496,2],[496,2],[501,4],[503,6],[67,3],[67,2],[509,3],[509,1],[507,1],[507,4],[68,2],[20,2],[48,9],[48,8],[48,9],[513,0],[513,1],[513,1],[513,1],[513,2],[514,1],[514,1],[514,1],[49,3],[38,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[80,0],[80,1],[83,0],[83,1],[90,0],[90,2],[91,0],[91,1],[96,0],[96,1],[97,0],[97,1],[101,0],[101,1],[108,0],[108,1],[124,0],[124,1],[128,1],[128,2],[129,1],[129,2],[130,0],[130,1],[157,0],[157,2],[159,0],[159,2],[161,0],[161,2],[162,1],[162,1],[163,0],[163,2],[167,0],[167,2],[169,0],[169,2],[178,0],[178,2],[179,0],[179,2],[180,0],[180,2],[198,0],[198,1],[211,0],[211,1],[212,0],[212,1],[220,0],[220,1],[221,0],[221,1],[249,0],[249,1],[251,0],[251,1],[252,0],[252,1],[253,0],[253,1],[265,1],[265,1],[770,1],[770,1],[290,0],[290,1],[305,1],[305,1],[341,1],[341,1],[375,0],[375,1],[379,0],[379,1],[386,0],[386,1],[387,0],[387,1],[398,0],[398,1],[399,0],[399,1],[401,1],[401,1],[415,0],[415,1],[416,0],[416,1],[468,0],[468,1],[469,0],[469,1],[470,0],[470,1],[474,0],[474,1],[479,0],[479,1],[480,0],[480,1],[482,0],[482,1],[483,0],[483,1],[484,0],[484,1],[489,0],[489,1],[490,0],[490,1],[491,0],[491,1],[492,0],[492,1],[493,0],[493,1],[494,0],[494,1],[495,0],[495,1],[497,0],[497,1],[498,0],[498,1],[499,0],[499,1],[502,0],[502,2],[504,0],[504,2],[505,0],[505,2],[506,0],[506,2],[515,0],[515,1],[516,0],[516,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			if (alasql.options.casesensitive) this.$ = $$[$0];
			else this.$ = $$[$0].toLowerCase();

break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 this.$ = $$[$0].toLowerCase() 
break;
case 4:
 this.$ = $$[$0] 
break;
case 5:
 this.$ = $$[$0] ? $$[$0-1] + ' ' + $$[$0] : $$[$0-1] 
break;
case 6:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 7:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 8: case 9: case 70: case 80: case 85: case 145: case 179: case 207: case 208: case 244: case 263: case 275: case 361: case 379: case 458: case 481: case 482: case 486: case 494: case 535: case 536: case 573: case 656: case 666: case 690: case 692: case 694: case 708: case 709: case 739: case 763:
 this.$ = [$$[$0]]; 
break;
case 10:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 11:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 12:

			this.$ = $$[$0];

			// TODO combine exists and queries
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;

break;
case 13: case 164: case 174: case 239: case 240: case 242: case 250: case 252: case 261: case 269: case 272: case 382: case 498: case 508: case 510: case 522: case 528: case 529: case 574:
 this.$ = undefined; 
break;
case 68:
 this.$ = new yy.WithSelect({withs: $$[$0-1], select:$$[$0]}); 
break;
case 69: case 572:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 71:
 this.$ = {name:$$[$0-4], select:$$[$0-1]}; 
break;
case 72:

			yy.extend(this.$,$$[$0-9]); yy.extend(this.$,$$[$0-8]); yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); 
		    yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]);yy.extend(this.$,$$[$0-3]); 
		    yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-9];
/*		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
*/		
break;
case 73:

			this.$ = new yy.Search({selectors:$$[$0-2], from:$$[$0]});
			yy.extend(this.$,$$[$0-1]);

break;
case 74:

			this.$ = {pivot:{expr:$$[$0-5], columnid:$$[$0-3], inlist:$$[$0-2], as:$$[$0]}}; 
			if (yy.__setLocationInfo) {
				yy.__setLocationInfo(this.$, 'pivot');
			}

break;
case 75:

			this.$ = {unpivot:{tocolumnid:$$[$0-8], forcolumnid:$$[$0-6], inlist:$$[$0-3], as:$$[$0]}}; 
			if (yy.__setLocationInfo) {
				yy.__setLocationInfo(this.$, 'pivot');
			}

break;
case 76: case 527: case 556: case 592: case 626: case 643: case 644: case 647: case 669:
 this.$ = $$[$0-1]; 
break;
case 77: case 78: case 86: case 149: case 187: case 249: case 282: case 290: case 291: case 292: case 293: case 294: case 295: case 296: case 297: case 298: case 299: case 300: case 301: case 302: case 303: case 306: case 307: case 324: case 325: case 326: case 327: case 328: case 329: case 381: case 447: case 448: case 449: case 450: case 451: case 452: case 523: case 549: case 553: case 555: case 630: case 631: case 632: case 633: case 634: case 635: case 639: case 641: case 642: case 651: case 667: case 668: case 730: case 745: case 746: case 748: case 749: case 755: case 756:
 this.$ = $$[$0]; 
break;
case 79: case 84: case 738: case 762:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 81:
 this.$ = {expr:$$[$0]}; 
break;
case 82:
 this.$ = {expr:$$[$0-2],as:$$[$0]}; 
break;
case 83:

			this.$ = {
				removecolumns:$$[$0]
			}; 
			if (yy.__setLocationInfo) {
				yy.__setLocationInfo(this.$, 'remove');
			}

break;
case 87:
 this.$ = {like:$$[$0]}; 
break;
case 88:

			this.$ = $$[$0]; 

break;
case 89:

			this.$ = $$[$0]; 
			if (yy.parseError2) {
				yy.parseError2('error.doubleString', this._$);
			}

break;
case 92: case 106:
 this.$ = {srchid:"PROP", args: [$$[$0]]}; 
break;
case 93:
 this.$ = {srchid:"ORDERBY", args: $$[$0-1]}; 
break;
case 94:

			var dir = $$[$0-1];
			if(!dir) dir = 'ASC';
			this.$ = {srchid:"ORDERBY", args: [{expression: new yy.Column({columnid:'_'}), direction:dir}]};

break;
case 95:
 this.$ = {srchid:"PARENT"}; 
break;
case 96:
 this.$ = {srchid:"APROP", args: [$$[$0]]}; 
break;
case 97:
 this.$ = {selid:"ROOT"};
break;
case 98:
 this.$ = {srchid:"EQ", args: [$$[$0]]}; 
break;
case 99:
 this.$ = {srchid:"LIKE", args: [$$[$0]]}; 
break;
case 100: case 101:
 this.$ = {selid:"WITH", args: $$[$0-1]}; 
break;
case 102:
 this.$ = {srchid:$$[$0-3].toUpperCase(), args:$$[$0-1]}; 
break;
case 103:
 this.$ = {srchid:"WHERE", args:[$$[$0-1]]}; 
break;
case 104:
 this.$ = {selid:"OF", args:[$$[$0-1]]}; 
break;
case 105:
 this.$ = {srchid:"CLASS", args:[$$[$0-1]]}; 
break;
case 107:
 this.$ = {srchid:"NAME", args: [$$[$0].substr(1,$$[$0].length-2)]}; 
break;
case 108:
 this.$ = {srchid:"CHILD"}; 
break;
case 109:
 this.$ = {srchid:"VERTEX"}; 
break;
case 110:
 this.$ = {srchid:"EDGE"}; 
break;
case 111:
 this.$ = {srchid:"REF"}; 
break;
case 112:
 this.$ = {srchid:"SHARP", args:[$$[$0]]}; 
break;
case 113:
 this.$ = {srchid:"ATTR", args:((typeof $$[$0] == 'undefined')?undefined:[$$[$0]])}; 
break;
case 114:
 this.$ = {srchid:"ATTR"}; 
break;
case 115:
 this.$ = {srchid:"OUT"}; 
break;
case 116:
 this.$ = {srchid:"IN"}; 
break;
case 117:
 this.$ = {srchid:"OUTOUT"}; 
break;
case 118:
 this.$ = {srchid:"ININ"}; 
break;
case 119:
 this.$ = {srchid:"CONTENT"}; 
break;
case 120:
 this.$ = {srchid:"EX",args:[new yy.Json({value:$$[$0]})]}; 
break;
case 121:
 this.$ = {srchid:"AT", args:[$$[$0]]}; 
break;
case 122:
 this.$ = {srchid:"AS", args:[$$[$0]]}; 
break;
case 123:
 this.$ = {srchid:"SET", args:$$[$0-1]}; 
break;
case 124:
 this.$ = {selid:"TO", args:[$$[$0]]}; 
break;
case 125:
 this.$ = {srchid:"VALUE"}; 
break;
case 126:
 this.$ = {srchid:"ROW", args:$$[$0-1]}; 
break;
case 127:
 this.$ = {srchid:"CLASS", args:[$$[$0]]}; 
break;
case 128:
 this.$ = {selid:$$[$0],args:[$$[$0-1]] }; 
break;
case 129:
 this.$ = {selid:"NOT",args:$$[$0-1] }; 
break;
case 130:
 this.$ = {selid:"IF",args:$$[$0-1] }; 
break;
case 131:
 this.$ = {selid:$$[$0-3],args:$$[$0-1] }; 
break;
case 132:
 this.$ = {selid:'DISTINCT',args:$$[$0-1] }; 
break;
case 133:
 this.$ = {selid:'UNION',args:$$[$0-1] }; 
break;
case 134:
 this.$ = {selid:'UNIONALL',args:$$[$0-1] }; 
break;
case 135:
 this.$ = {selid:'ALL',args:[$$[$0-1]] }; 
break;
case 136:
 this.$ = {selid:'ANY',args:[$$[$0-1]] }; 
break;
case 137:
 this.$ = {selid:'INTERSECT',args:$$[$0-1] }; 
break;
case 138:
 this.$ = {selid:'EXCEPT',args:$$[$0-1] }; 
break;
case 139:
 this.$ = {selid:'AND',args:$$[$0-1] }; 
break;
case 140:
 this.$ = {selid:'OR',args:$$[$0-1] }; 
break;
case 141:
 this.$ = {selid:'PATH',args:[$$[$0-1]] }; 
break;
case 142:
 this.$ = {srchid:'RETURN',args:$$[$0-1] }; 
break;
case 143:
 this.$ = {selid:'REPEAT',sels:$$[$0-3], args:$$[$0-1] }; 
break;
case 144:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 146:
 this.$ = "PLUS"; 
break;
case 147:
 this.$ = "STAR"; 
break;
case 148:
 this.$ = "QUESTION"; 
break;
case 150:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); 
break;
case 151:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 152:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 153:

			//if(!$$[$0]) {
				//this.$ = new yy.Select({columns:[new yy.Column({columnid:'_',})], modifier:'COLUMN'});
			//} else {
				this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); 
			//}

break;
case 154:
 if($$[$0]=='SELECT') this.$ = undefined; else this.$ = {modifier: $$[$0]};  
break;
case 155:
 this.$ = {modifier:'VALUE'}
break;
case 156:
 this.$ = {modifier:'ROW'}
break;
case 157:
 this.$ = {modifier:'COLUMN'}
break;
case 158:
 this.$ = {modifier:'MATRIX'}
break;
case 159:
 this.$ = {modifier:'TEXTSTRING'}
break;
case 160:
 this.$ = {modifier:'INDEX'}
break;
case 161:
 this.$ = {modifier:'RECORDSET'}
break;
case 162:

			this.$ = {top: $$[$0-1], percent:(typeof $$[$0] != 'undefined'?true:undefined)}; 
			if (yy.__setLocationInfo) {
				yy.__setLocationInfo(this.$, 'top');
			}

break;
case 163:

			this.$ = {top: $$[$0-1]}; 
			if (yy.__setLocationInfo) {
				yy.__setLocationInfo(this.$, 'top');
			}

break;
case 165: case 334: case 530: case 531: case 731:
this.$ = undefined; 
break;
case 166: case 167: case 168: case 169:
this.$ = {into: $$[$0]} 
break;
case 170:

			var s = $$[$0];
			s = s.substr(1,s.length-2);
			var x3 = s.substr(-3).toUpperCase();
			var x4 = s.substr(-4).toUpperCase();
			if(s[0] == '#') {
				this.$ = {into: new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
			} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {
				this.$ = {into: new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
			} else if(x4=='XLSX' || x4 == 'JSON') {
				this.$ = {into: new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};
			}

break;
case 171:
 this.$ = { from: $$[$0] }; 
break;
case 172:
 this.$ = { from: $$[$0-1], joins: $$[$0] }; 
break;
case 173:
 this.$ = { from: $$[$0-2], joins: $$[$0-1] }; 
break;
case 175:
 this.$ = new yy.Apply({select: $$[$0-2], applymode:'CROSS', as:$$[$0]}); 
break;
case 176:
 this.$ = new yy.Apply({select: $$[$0-3], applymode:'CROSS', as:$$[$0]}); 
break;
case 177:
 this.$ = new yy.Apply({select: $$[$0-2], applymode:'OUTER', as:$$[$0]}); 
break;
case 178:
 this.$ = new yy.Apply({select: $$[$0-3], applymode:'OUTER', as:$$[$0]}); 
break;
case 180: case 245: case 459: case 537: case 538:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 181:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 182:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 183:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 184:
 this.$ = new yy.Json({value:$$[$0-2]}); $$[$0-2].as = $$[$0] 
break;
case 185:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 186:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 188: case 645: case 648:
 this.$ = $$[$0-2]; 
break;
case 189: case 193: case 197: case 200:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 190: case 194: case 198: case 201:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 191: case 192: case 196: case 199:
 this.$ = $$[$0]; $$[$0].as = 'default'; 
break;
case 195:
 this.$ = {inserted:true}; $$[$0].as = 'default'; 
break;
case 202:

			var s = $$[$0];
			s = s.substr(1,s.length-2);
			var x3 = s.substr(-3).toUpperCase();
			var x4 = s.substr(-4).toUpperCase();
			var r;
			if(s[0] == '#') {
				r = new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
			} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {
				r = new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
			} else if(x4=='XLSX' || x4 == 'JSON') {
				r = new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});
			} else {
				throw new Error('Unknown string in FROM clause');
			};
			this.$ = r;

break;
case 203:

			if($$[$0-2] == 'INFORMATION_SCHEMA') {
				this.$ = new yy.FuncValue({funcid: $$[$0-2], args:[new yy.StringValue({value:$$[$0]})]});
			} else {
				this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
			}

break;
case 204:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 205: case 206:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 209:
 this.$ = new yy.Join($$[$0-2]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 210:
 this.$ = {table: $$[$0]}; 
break;
case 211:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 212:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 213:
 this.$ = {json:new yy.Json({value:$$[$0-2],as:$$[$0]})}; 
break;
case 214:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 215:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 216:
 this.$ = {select: $$[$0-2], as: $$[$0]} ; 
break;
case 217:
 this.$ = {select: $$[$0-3], as: $$[$0] } ; 
break;
case 218:
 this.$ = {func:$$[$0], as:'default'}; 
break;
case 219:
 this.$ = {func:$$[$0-1], as: $$[$0]}; 
break;
case 220:
 this.$ = {func:$$[$0-2], as: $$[$0]}; 
break;
case 221:
 this.$ = {variable:$$[$0],as:'default'}; 
break;
case 222:
 this.$ = {variable:$$[$0-1],as:$$[$0]}; 
break;
case 223:
 this.$ = {variable:$$[$0-2],as:$$[$0]} 
break;
case 224:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 225:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 226: case 227:
 this.$ = "INNER"; 
break;
case 228:
 this.$ = "LEFT"; 
break;
case 229:
 this.$ = "LEFT OUTER"; 
break;
case 230:
 this.$ = "RIGHT"; 
break;
case 231:
 this.$ = "RIGHT OUTER"; 
break;
case 232: case 233:
 this.$ = "OUTER"; 
break;
case 234:
 this.$ = "SEMI"; 
break;
case 235:
 this.$ = "ANTI"; 
break;
case 236:
 this.$ = "CROSS"; 
break;
case 237:
 this.$ = {on: $$[$0]}; 
break;
case 238:
 this.$ = {using: $$[$0-1]}; 
break;
case 241:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 243:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 246:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 247:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 248:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 251:
 this.$ = {having:$$[$0]}
break;
case 253:
 this.$ = {union: $$[$0]} ; 
break;
case 254:
 this.$ = {unionall: $$[$0]} ; 
break;
case 255:
 this.$ = {except: $$[$0]} ; 
break;
case 256:
 this.$ = {intersect: $$[$0]} ; 
break;
case 257:
 this.$ = {union: $$[$0], corresponding:true} ; 
break;
case 258:
 this.$ = {unionall: $$[$0], corresponding:true} ; 
break;
case 259:
 this.$ = {except: $$[$0], corresponding:true} ; 
break;
case 260:
 this.$ = {intersect: $$[$0], corresponding:true} ; 
break;
case 262:
 this.$ = {order:$$[$0]}
break;
case 264:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 265:
 this.$ = new yy.Expression({expression: $$[$0], direction:'ASC'}) 
break;
case 266:
 this.$ = new yy.Expression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 267:
 this.$ = new yy.Expression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 268:
 this.$ = new yy.Expression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 270:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0]); 
break;
case 271:
 this.$ = {limit:$$[$0-2],offset:$$[$0-6]}; 
break;
case 273:
 this.$ = {offset:$$[$0]}; 
break;
case 274: case 516: case 540: case 655: case 665: case 689: case 691: case 695:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 276: case 278: case 280:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 277: case 279: case 281:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 283:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 284:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 285:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 286:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 287: case 288:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 289:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 304:
 this.$ = new yy.DomainValueValue(); 
break;
case 305:
 this.$ = new yy.Json({value:$$[$0]}); 
break;
case 308: case 309: case 310:

			if(!yy.queries) yy.queries = []; 
			yy.queries.push($$[$0-1]);
			$$[$0-1].queriesidx = yy.queries.length;
			this.$ = $$[$0-1];

break;
case 311:
this.$ = $$[$0]
break;
case 312:
 this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'});
break;
case 313:
 this.$ = new yy.JavaScript({value:$$[$0].substr(2,$$[$0].length-4)}); 
break;
case 314:
 this.$ = new yy.JavaScript({value:'alasql.fn["'+$$[$0-2]+'"] = '+$$[$0].substr(2,$$[$0].length-4)}); 
break;
case 315:
 this.$ = new yy.JavaScript({value:'alasql.aggr["'+$$[$0-2]+'"] = '+$$[$0].substr(2,$$[$0].length-4)}); 
break;
case 316:
 this.$ = new yy.FuncValue({funcid:$$[$0], newid:true}); 
break;
case 317:
 this.$ = $$[$0]; yy.extend(this.$,{newid:true}); 
break;
case 318:
 this.$ = new yy.Convert({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 319:
 this.$ = new yy.Convert({expression:$$[$0-5], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 320:
 this.$ = new yy.Convert({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 321:
 this.$ = new yy.Convert({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; 
break;
case 322:
 this.$ = new yy.Convert({expression:$$[$0-3], useDBType: 'mysql'}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 323:
 this.$ = new yy.Convert({expression:$$[$0-5], style:$$[$0-1], useDBType: 'mysql'}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 330:
 this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'}); 
break;
case 331:

		  if($$[$0-2].length > 1 && ($$[$0-4].toUpperCase() == 'MAX' || $$[$0-4].toUpperCase() == 'MIN')) {
		  	this.$ = new yy.FuncValue({funcid:$$[$0-4],args:$$[$0-2]});
		  } else {
			this.$ = new yy.AggrValue({aggregatorid: $$[$0-4].toUpperCase(), expression: $$[$0-2].pop(), over:$$[$0]}); 
		  } 

break;
case 332:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2], distinct:true, over:$$[$0]}); 
break;
case 333:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2],
		 over:$$[$0]}); 
break;
case 335: case 336:
 this.$ = new yy.Over(); yy.extend(this.$,$$[$0-1]); 
break;
case 337:
 this.$ = new yy.Over(); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);
break;
case 338:
 this.$ = {partition:$$[$0]}; 
break;
case 339:
 this.$ = {order:$$[$0]}; 
break;
case 340:
 this.$ = "SUM"; 
break;
case 341:
 this.$ = "COUNT"; 
break;
case 342:
 this.$ = "MIN"; 
break;
case 343: case 551:
 this.$ = "MAX"; 
break;
case 344:
 this.$ = "AVG"; 
break;
case 345:
 this.$ = "FIRST"; 
break;
case 346:
 this.$ = "LAST"; 
break;
case 347:
 this.$ = "AGGR"; 
break;
case 348:
 this.$ = "ARRAY"; 
break;
case 349:

			var funcid = $$[$0-4];
			var exprlist = $$[$0-1];
			if(exprlist.length > 1 && (funcid.toUpperCase() == 'MIN' || funcid.toUpperCase() == 'MAX')) {
					this.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); 
			} else if(alasql.aggr[$$[$0-4]]) {
		    	this.$ = new yy.AggrValue({aggregatorid: 'REDUCE', 
                      funcid: funcid, expression: exprlist.pop(),distinct:($$[$0-2]=='DISTINCT') });
		    } else {
			    this.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); 
			};

break;
case 350:
 this.$ = new yy.FuncValue({ funcid: 'TRUNCATE', args: $$[$0-1]});  
break;
case 351:
 this.$ = new yy.FuncValue({ funcid: 'RIGHT', args: $$[$0-1]});  
break;
case 352:
 this.$ = new yy.FuncValue({ funcid: 'LEFT', args: $$[$0-1]});  
break;
case 353:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 354:
 this.$ = new yy.FuncValue({ funcid: 'IIF', args:$$[$0-1] }) 
break;
case 355:
 this.$ = new yy.FuncValue({ funcid: 'REPLACE', args:$$[$0-1] }) 
break;
case 356:
 this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[new yy.StringValue({value:$$[$0-5]}),$$[$0-3],$$[$0-1]]}) 
break;
case 357:
 this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[$$[$0-5],$$[$0-3],$$[$0-1]]}) 
break;
case 358:
 this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[new yy.StringValue({value:$$[$0-5]}),$$[$0-3],$$[$0-1]]}) 
break;
case 359:
 this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[$$[$0-5],$$[$0-3],$$[$0-1]]}) 
break;
case 360:
 this.$ = new yy.FuncValue({ funcid: 'INTERVAL', args:[$$[$0-1],new yy.StringValue({value:($$[$0]).toLowerCase()})]}); 
break;
case 362:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 363:
 this.$ = new yy.NumValue({value:+$$[$0]}); 
break;
case 364:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 365:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 366:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 367:
 this.$ = new yy.StringValue({value: $$[$0].substr(2,$$[$0].length-3).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 368:
 this.$ = new yy.NullValue({value:undefined}); 
break;
case 369:
 this.$ = new yy.VarValue({variable:$$[$0]}); 
break;
case 370:

			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);

break;
case 371:
 this.$ = new yy.ArrayValue({value:$$[$0-1]}); 
break;
case 372: case 373:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 374:

			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 

break;
case 375:

			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++, array:true}); 

break;
case 376:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 377:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 378: case 706: case 707:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 380:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 383: case 384:
 this.$ = new yy.Op({left:$$[$0-2], op:'REGEXP', right:$$[$0]}); 
break;
case 385:
 this.$ = new yy.Op({left:$$[$0-2], op:'GLOB', right:$$[$0]}); 
break;
case 386:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 387:
 this.$ = new yy.Op({left:$$[$0-4], op:'LIKE', right:$$[$0-2], escape:$$[$0]}); 
break;
case 388:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT LIKE', right:$$[$0] }); 
break;
case 389:
 this.$ = new yy.Op({left:$$[$0-4], op:'NOT LIKE', right:$$[$0-2], escape:$$[$0] }); 
break;
case 390:
 this.$ = new yy.Op({left:$$[$0-2], op:'||', right:$$[$0]}); 
break;
case 391:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 392:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 393:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 394:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 395:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 396:
 this.$ = new yy.Op({left:$$[$0-2], op:'^', right:$$[$0]}); 
break;
case 397:
 this.$ = new yy.Op({left:$$[$0-2], op:'>>', right:$$[$0]}); 
break;
case 398:
 this.$ = new yy.Op({left:$$[$0-2], op:'<<', right:$$[$0]}); 
break;
case 399:
 this.$ = new yy.Op({left:$$[$0-2], op:'&', right:$$[$0]}); 
break;
case 400:
 this.$ = new yy.Op({left:$$[$0-2], op:'|', right:$$[$0]}); 
break;
case 401: case 402: case 404:
 this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); 
break;
case 403:
 this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); 
break;
case 405: case 406: case 408:
 this.$ = new yy.Op({left:$$[$0-2], op:'!' , right:$$[$0]}); 
break;
case 407:
 this.$ = new yy.Op({left:$$[$0-4], op:'!' , right:$$[$0-1]}); 
break;
case 409:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 410:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 411:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 412:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 413:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 414:
 this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); 
break;
case 415:
 this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); 
break;
case 416:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 417:
 this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); 
break;
case 418:
 this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); 
break;
case 419:

			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  

break;
case 420:

			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 

break;
case 421:

			if($$[$0-2].op == 'BETWEEN1') {

				if($$[$0-2].left.op == 'AND') {
					this.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:
						new yy.Op({left:$$[$0-2].left.right, op:'BETWEEN', 
							right1:$$[$0-2].right, right2:$$[$0]})
					});
				} else {
					this.$ = new yy.Op({left:$$[$0-2].left, op:'BETWEEN', 
						right1:$$[$0-2].right, right2:$$[$0]});
				}

			} else if($$[$0-2].op == 'NOT BETWEEN1') {
				if($$[$0-2].left.op == 'AND') {
					this.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:
						new yy.Op({left:$$[$0-2].left.right, op:'NOT BETWEEN', 
							right1:$$[$0-2].right, right2:$$[$0]})
					});
				} else {
					this.$ = new yy.Op({left:$$[$0-2].left, op:'NOT BETWEEN', 
						right1:$$[$0-2].right, right2:$$[$0]});
				}
			} else {
				this.$ = new yy.Op({left:$$[$0-2], op:'AND', right:$$[$0]});
			}

break;
case 422:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 423:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 424:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 425:
 this.$ = new yy.UniOp({op:'+' , right:$$[$0]}); 
break;
case 426:
 this.$ = new yy.UniOp({op:'~' , right:$$[$0]}); 
break;
case 427:
 this.$ = new yy.UniOp({op:'#' , right:$$[$0]}); 
break;
case 428:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 429:

			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  

break;
case 430:

			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  

break;
case 431:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 432:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 433:
 this.$ = new yy.Op({left: $$[$0-3], op:'IN', right:[]}); 
break;
case 434:
 this.$ = new yy.Op({left: $$[$0-4], op:'NOT IN', right:[]}); 
break;
case 435: case 437:
 this.$ = new yy.Op({left: $$[$0-2], op:'IN', right:$$[$0]}); 
break;
case 436: case 438:
 this.$ = new yy.Op({left: $$[$0-3], op:'NOT IN', right:$$[$0]}); 
break;
case 439:

/*			var expr = $$[$0];
			if(expr.left && expr.left.op == 'AND') {
				this.$ = new yy.Op({left:new yy.Op({left:$$[$0-2], op:'BETWEEN', right:expr.left}), op:'AND', right:expr.right }); 
			} else {
*/
				this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN1', right:$$[$0] }); 

break;
case 440:

				this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN1', right:$$[$0] }); 

break;
case 441:
 this.$ = new yy.Op({op:'IS' , left:$$[$0-2], right:$$[$0]}); 
break;
case 442:

			this.$ = new yy.Op({
				op:'IS', 
				left:$$[$0-2], 
				right: new yy.UniOp({
					op:'NOT',
					right:new yy.NullValue({value:undefined}) 
				})
			}); 

break;
case 443:
 this.$ = new yy.Convert({expression:$$[$0-2]}) ; yy.extend(this.$,$$[$0]) ; 
break;
case 444: case 445:
 this.$ = $$[$0];
break;
case 446:
 this.$ = $$[$0-1];
break;
case 453:
 this.$ = 'ALL'; 
break;
case 454:
 this.$ = 'SOME'; 
break;
case 455:
 this.$ = 'ANY'; 
break;
case 456:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 457:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 460:
 this.$ = new yy.SetColumn({column:$$[$0-2], expression:$$[$0]})
break;
case 461:
 this.$ = new yy.SetColumn({variable:$$[$0-2], expression:$$[$0], method:$$[$0-3]})
break;
case 462:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 463:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 464:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 465:
 this.$ = new yy.Insert({into:$$[$0-1], values: $$[$0]}); 
break;
case 466: case 468:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0], orreplace:true}); 
break;
case 467: case 469:
 this.$ = new yy.Insert({into:$$[$0-1], values: $$[$0], orreplace:true}); 
break;
case 470:
 this.$ = new yy.Insert({into:$$[$0-2], "default": true}) ; 
break;
case 471:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 472:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], values: $$[$0]}); 
break;
case 473:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 474:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0], orreplace:true}); 
break;
case 475:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 480:
 this.$ = [$$[$0-1]]; 
break;
case 483:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 484: case 485: case 487: case 495:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 496:

			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0]); 

break;
case 497:

			this.$ = new yy.CreateTable({table:$$[$0]}); 
			yy.extend(this.$,$$[$0-3]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]); 

break;
case 499:
 this.$ = {class:true}; 
break;
case 509:
 this.$ = {temporary:true}; 
break;
case 511:
 this.$ = {ifnotexists: true}; 
break;
case 512:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 513:
 this.$ = {columns: $$[$0]}; 
break;
case 514:
 this.$ = {as: $$[$0]} 
break;
case 515: case 539:
 this.$ = [$$[$0]];
break;
case 517: case 518: case 519: case 520: case 521:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 524:
 this.$ = {type: 'CHECK', expression: $$[$0-1]}; 
break;
case 525:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()}; 
break;
case 526:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-5], fktable: $$[$0-2], fkcolumns: $$[$0-1]}; 
break;
case 532:

			this.$ = {type: 'UNIQUE', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()};

break;
case 541:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 542:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 543:
 this.$ = new yy.ColumnDef({columnid:$$[$0], dbtypeid: ''}); 
break;
case 544:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: +$$[$0-1]} 
break;
case 545:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 546:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 547:
 this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} 
break;
case 548:
 this.$ = $$[$0-1]; $$[$0-1].dbtypeid += '[' + $$[$0] + ']'; 
break;
case 550: case 757:
 this.$ = +$$[$0]; 
break;
case 552:
this.$ = undefined
break;
case 554:

			yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];

break;
case 557:
this.$ = {primarykey:true};
break;
case 558: case 559:
this.$ = {foreignkey:{table:$$[$0-1], columnid: $$[$0]}};
break;
case 560:
 this.$ = {identity: {value:$$[$0-3],step:$$[$0-1]}} 
break;
case 561:
 this.$ = {identity: {value:1,step:1}} 
break;
case 562: case 564:
this.$ = {"default":$$[$0]};
break;
case 563:
this.$ = {"default":$$[$0-1]};
break;
case 565:
this.$ = {null:true}; 
break;
case 566:
this.$ = {notnull:true}; 
break;
case 567:
this.$ = {check:$$[$0]}; 
break;
case 568:
this.$ = {unique:true}; 
break;
case 569:
this.$ = {"onupdate":$$[$0]};
break;
case 570:
this.$ = {"onupdate":$$[$0-1]};
break;
case 571:
 this.$ = new yy.DropTable({tables:$$[$0],type:$$[$0-2]}); yy.extend(this.$, $$[$0-1]); 
break;
case 575:
 this.$ = {ifexists: true};
break;
case 576:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 577:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 578:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 579:
 this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});
break;
case 580:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 581:
 this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});
break;
case 582:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0], engineid:$$[$0-2].toUpperCase() });
break;
case 583:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-3], engineid:$$[$0-5].toUpperCase(), args:$$[$0-1] });
break;
case 584:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-2], engineid:$$[$0-4].toUpperCase(), as:$$[$0] });
break;
case 585:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-5], engineid:$$[$0-7].toUpperCase(), as:$$[$0], args:$$[$0-3]});
break;
case 586:
 this.$ = new yy.DetachDatabase({databaseid:$$[$0]});
break;
case 587:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] }); yy.extend(this.$,$$[$0]); 
break;
case 588:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), databaseid:$$[$0-1], as:$$[$0] }); yy.extend(this.$,$$[$0-2]); 
break;
case 589:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-7].toUpperCase(), databaseid:$$[$0-4], args:$$[$0-2], as:$$[$0] }); yy.extend(this.$,$$[$0-5]); 
break;
case 590:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), 
		    as:$$[$0], args:[$$[$0-1]] }); yy.extend(this.$,$$[$0-2]); 
break;
case 591:
this.$ = undefined;
break;
case 593: case 594:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 595:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] }); yy.extend(this.$,$$[$0-1]); 
break;
case 596: case 597:
 this.$ = new yy.DropDatabase({databaseid: $$[$0], engineid:$$[$0-3].toUpperCase() }); yy.extend(this.$,$$[$0-1]); 
break;
case 598:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 599:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 600:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 601:
 this.$ = new yy.ShowDatabases();
break;
case 602:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 603:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-1].toUpperCase() });
break;
case 604:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-3].toUpperCase() , like:$$[$0]});
break;
case 605:
 this.$ = new yy.ShowTables();
break;
case 606:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 607:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 608:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 609:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 610:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 611:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 612:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 613:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 614:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 615:

			this.$ = new yy.CreateTable({table:$$[$0-6],view:true,select:$$[$0-1],viewcolumns:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-9]); 
			yy.extend(this.$,$$[$0-7]); 

break;
case 616:

			this.$ = new yy.CreateTable({table:$$[$0-3],view:true,select:$$[$0-1]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 

break;
case 620:
 this.$ = new yy.DropTable({tables:$$[$0], view:true}); yy.extend(this.$, $$[$0-1]); 
break;
case 621: case 767:
 this.$ = new yy.ExpressionStatement({expression:$$[$0]}); 
break;
case 622:
 this.$ = new yy.Source({url:$$[$0].value}); 
break;
case 623:
 this.$ = new yy.Assert({value:$$[$0]}); 
break;
case 624:
 this.$ = new yy.Assert({value:$$[$0].value}); 
break;
case 625:
 this.$ = new yy.Assert({value:$$[$0], message:$$[$0-2]}); 
break;
case 627: case 638: case 640:
 this.$ = $$[$0].value; 
break;
case 628: case 636:
 this.$ = +$$[$0].value; 
break;
case 629:
 this.$ = (!!$$[$0].value); 
break;
case 637:
 this.$ = ""+$$[$0].value; 
break;
case 646:
 this.$ = {}; 
break;
case 649:
 this.$ = []; 
break;
case 650:
 yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; 
break;
case 652:
 this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; 
break;
case 653: case 654:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 657:
 this.$ = new yy.SetVariable({variable:$$[$0-2].toLowerCase(), value:$$[$0]});
break;
case 658:
 this.$ = new yy.SetVariable({variable:$$[$0-1].toLowerCase(), value:$$[$0]});
break;
case 659:
 this.$ = new yy.SetVariable({variable:$$[$0-2], expression:$$[$0]});
break;
case 660:
 this.$ = new yy.SetVariable({variable:$$[$0-3], props: $$[$0-2], expression:$$[$0]});
break;
case 661:
 this.$ = new yy.SetVariable({variable:$$[$0-2], expression:$$[$0], method:$$[$0-3]});
break;
case 662:
 this.$ = new yy.SetVariable({variable:$$[$0-3], props: $$[$0-2], expression:$$[$0], method:$$[$0-4]});
break;
case 663:
this.$ = '@'; 
break;
case 664:
this.$ = '$'; 
break;
case 670:
 this.$ = true; 
break;
case 671:
 this.$ = false; 
break;
case 672:
 this.$ = new yy.CommitTransaction(); 
break;
case 673:
 this.$ = new yy.RollbackTransaction(); 
break;
case 674:
 this.$ = new yy.BeginTransaction(); 
break;
case 675:
 this.$ = new yy.If({expression:$$[$0-2],thenstat:$$[$0-1], elsestat:$$[$0]}); 
			if($$[$0-1].exists) this.$.exists = $$[$0-1].exists;
			if($$[$0-1].queries) this.$.queries = $$[$0-1].queries;

break;
case 676:

			this.$ = new yy.If({expression:$$[$0-1],thenstat:$$[$0]}); 
			if($$[$0].exists) this.$.exists = $$[$0].exists;
			if($$[$0].queries) this.$.queries = $$[$0].queries;

break;
case 677:
this.$ = $$[$0];
break;
case 678:
 this.$ = new yy.While({expression:$$[$0-1],loopstat:$$[$0]}); 
			if($$[$0].exists) this.$.exists = $$[$0].exists;
			if($$[$0].queries) this.$.queries = $$[$0].queries;

break;
case 679:
 this.$ = new yy.Continue(); 
break;
case 680:
 this.$ = new yy.Break(); 
break;
case 681:
 this.$ = new yy.BeginEnd({statements:$$[$0-1]}); 
break;
case 682:
 this.$ = new yy.Print({exprs:$$[$0]});
break;
case 683:
 this.$ = new yy.Print({select:$$[$0]});
break;
case 684:
 this.$ = new yy.Require({paths:$$[$0]}); 
break;
case 685:
 this.$ = new yy.Require({plugins:$$[$0]}); 
break;
case 686: case 687:
this.$ = $$[$0].toUpperCase(); 
break;
case 688:
 this.$ = new yy.Echo({expr:$$[$0]}); 
break;
case 693:
 this.$ = new yy.Declare({declares:$$[$0]}); 
break;
case 696:
 this.$ = {variable: $$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 697:
 this.$ = {variable: $$[$0-2]}; yy.extend(this.$,$$[$0]); 
break;
case 698:
 this.$ = {variable: $$[$0-3], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);
break;
case 699:
 this.$ = {variable: $$[$0-4], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);
break;
case 700:
 this.$ = new yy.TruncateTable({table:$$[$0]});
break;
case 701:

			this.$ = new yy.Merge(); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); 
			yy.extend(this.$,$$[$0-2]);
			yy.extend(this.$,{matches:$$[$0-1]});yy.extend(this.$,$$[$0]);

break;
case 702: case 703:
 this.$ = {into: $$[$0]}; 
break;
case 704:
 this.$ = {using: $$[$0]}; 
break;
case 705:
 this.$ = {on:$$[$0]}; 
break;
case 710:
 this.$ = {matched:true, action:$$[$0]} 
break;
case 711:
 this.$ = {matched:true, expr: $$[$0-2], action:$$[$0]} 
break;
case 712:
 this.$ = {delete:true}; 
break;
case 713:
 this.$ = {update:$$[$0]}; 
break;
case 714: case 715:
 this.$ = {matched:false, bytarget: true, action:$$[$0]} 
break;
case 716: case 717:
 this.$ = {matched:false, bytarget: true, expr:$$[$0-2], action:$$[$0]} 
break;
case 718:
 this.$ = {matched:false, bysource: true, action:$$[$0]} 
break;
case 719:
 this.$ = {matched:false, bysource: true, expr:$$[$0-2], action:$$[$0]} 
break;
case 720:
 this.$ = {insert:true, values:$$[$0]}; 
break;
case 721:
 this.$ = {insert:true, values:$$[$0], columns:$$[$0-3]}; 
break;
case 722:
 this.$ = {insert:true, defaultvalues:true}; 
break;
case 723:
 this.$ = {insert:true, defaultvalues:true, columns:$$[$0-3]}; 
break;
case 725:
 this.$ = {output:{columns:$$[$0]}} 
break;
case 726:
 this.$ = {output:{columns:$$[$0-3], intovar: $$[$0], method:$$[$0-1]}} 
break;
case 727:
 this.$ = {output:{columns:$$[$0-2], intotable: $$[$0]}} 
break;
case 728:
 this.$ = {output:{columns:$$[$0-5], intotable: $$[$0-3], intocolumns:$$[$0-1]}} 
break;
case 729:

			this.$ = new yy.CreateVertex({class:$$[$0-3],sharp:$$[$0-2], name:$$[$0-1]}); 
			yy.extend(this.$,$$[$0]); 

break;
case 732:
 this.$ = {sets:$$[$0]}; 
break;
case 733:
 this.$ = {content:$$[$0]}; 
break;
case 734:
 this.$ = {select:$$[$0]}; 
break;
case 735:

			this.$ = new yy.CreateEdge({from:$$[$0-3],to:$$[$0-1],name:$$[$0-5]});
			yy.extend(this.$,$$[$0]); 

break;
case 736:
 this.$ = new yy.CreateGraph({graph:$$[$0]}); 
break;
case 737:
 this.$ = new yy.CreateGraph({from:$$[$0]}); 
break;
case 740:

			this.$ = $$[$0-2]; 
			if($$[$0-1]) this.$.json = new yy.Json({value:$$[$0-1]});
			if($$[$0]) this.$.as = $$[$0];

break;
case 741:

			this.$ = {source:$$[$0-6], target: $$[$0]};
			if($$[$0-3]) this.$.json = new yy.Json({value:$$[$0-3]});
			if($$[$0-2]) this.$.as = $$[$0-2];
			yy.extend(this.$,$$[$0-4]);

break;
case 742:

			this.$ = {source:$$[$0-5], target: $$[$0]};
			if($$[$0-2]) this.$.json = new yy.Json({value:$$[$0-3]});
			if($$[$0-1]) this.$.as = $$[$0-2];

break;
case 743:

			this.$ = {source:$$[$0-2], target: $$[$0]};

break;
case 747:
 this.$ = {vars:$$[$0], method:$$[$0-1]}; 
break;
case 750: case 751:

			var s3 = $$[$0-1];
			this.$ = {prop:$$[$0-3], sharp:$$[$0-2], name:(typeof s3 == 'undefined')?undefined:s3.substr(1,s3.length-2), class:$$[$0]}; 

break;
case 752:

			var s2 = $$[$0-1];
			this.$ = {sharp:$$[$0-2], name:(typeof s2 == 'undefined')?undefined:s2.substr(1,s2.length-2), class:$$[$0]}; 

break;
case 753:

			var s1 = $$[$0-1];
			this.$ = {name:(typeof s1 == 'undefined')?undefined:s1.substr(1,s1.length-2), class:$$[$0]}; 

break;
case 754:

			this.$ = {class:$$[$0]}; 

break;
case 760:
 this.$ = new yy.AddRule({left:$$[$0-2], right:$$[$0]}); 
break;
case 761:
 this.$ = new yy.AddRule({right:$$[$0]}); 
break;
case 764:
 this.$ = new yy.Term({termid:$$[$0]}); 
break;
case 765:
 this.$ = new yy.Term({termid:$$[$0-3],args:$$[$0-1]}); 
break;
case 768:

			this.$ = new yy.CreateTrigger({trigger:$$[$0-6], when:$$[$0-5], action:$$[$0-4], table:$$[$0-2], statement:$$[$0]}); 
			if($$[$0].exists) this.$.exists = $$[$0].exists;
			if($$[$0].queries) this.$.queries = $$[$0].queries;

break;
case 769:

			this.$ = new yy.CreateTrigger({trigger:$$[$0-5], when:$$[$0-4], action:$$[$0-3], table:$$[$0-1], funcid:$$[$0]}); 

break;
case 770:

			this.$ = new yy.CreateTrigger({trigger:$$[$0-6], when:$$[$0-4], action:$$[$0-3], table:$$[$0-5], statement:$$[$0]}); 
			if($$[$0].exists) this.$.exists = $$[$0].exists;
			if($$[$0].queries) this.$.queries = $$[$0].queries;

break;
case 771: case 772: case 774:
 this.$ = 'AFTER'; 
break;
case 773:
 this.$ = 'BEFORE'; 
break;
case 775:
 this.$ = 'INSTEADOF'; 
break;
case 776:
 this.$ = 'INSERT'; 
break;
case 777:
 this.$ = 'DELETE'; 
break;
case 778:
 this.$ = 'UPDATE'; 
break;
case 779:
 this.$ = new yy.DropTrigger({trigger:$$[$0]}); 
break;
case 780:
 this.$ = new yy.Reindex({indexid:$$[$0]});
break;
case 1054: case 1074: case 1076: case 1078: case 1082: case 1084: case 1086: case 1088: case 1090: case 1092:
this.$ = [];
break;
case 1055: case 1069: case 1071: case 1075: case 1077: case 1079: case 1083: case 1085: case 1087: case 1089: case 1091: case 1093:
$$[$0-1].push($$[$0]);
break;
case 1068: case 1070:
this.$ = [$$[$0]];
break;
}
},
table: [o([10,605,767],$V0,{8:1,9:2,12:3,13:4,17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,2:$V1,4:$V2,5:$V3,14:$V4,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),{1:[3]},{10:[1,105],11:106,605:$VH,767:$VI},o($VJ,[2,8]),o($VJ,[2,9]),o($VK,[2,12]),o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:109,2:$V1,4:$V2,5:$V3,15:[1,110],53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VK,[2,14]),o($VK,[2,15]),o($VK,[2,16]),o($VK,[2,17]),o($VK,[2,18]),o($VK,[2,19]),o($VK,[2,20]),o($VK,[2,21]),o($VK,[2,22]),o($VK,[2,23]),o($VK,[2,24]),o($VK,[2,25]),o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,28]),o($VK,[2,29]),o($VK,[2,30]),o($VK,[2,31]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,34]),o($VK,[2,35]),o($VK,[2,36]),o($VK,[2,37]),o($VK,[2,38]),o($VK,[2,39]),o($VK,[2,40]),o($VK,[2,41]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),{357:[1,111]},{2:$V1,3:112,4:$V2,5:$V3},{2:$V1,3:114,4:$V2,5:$V3,158:$VL,201:113,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS},o($VT,[2,508],{3:124,352:128,2:$V1,4:$V2,5:$V3,136:$VU,137:$VV,189:[1,126],194:[1,125],269:[1,132],270:[1,133],361:[1,134],409:[1,123],475:[1,127],512:[1,131]}),{147:$VW,453:135,454:136},{185:[1,138]},{409:[1,139]},{2:$V1,3:141,4:$V2,5:$V3,133:[1,147],194:[1,142],357:[1,146],401:143,409:[1,140],414:[1,144],512:[1,145]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:148,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vx1,$Vy1,{344:209,173:[1,210],199:$Vz1}),o($Vx1,$Vy1,{344:212,199:$Vz1}),{2:$V1,3:224,4:$V2,5:$V3,77:$VA1,114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,199:[1,215],200:218,201:220,202:219,203:222,210:214,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1,456:213},{2:$V1,3:226,4:$V2,5:$V3},{357:[1,227]},o($VC1,[2,1050],{80:228,106:229,107:[1,230]}),o($VD1,[2,1054],{90:231}),{2:$V1,3:235,4:$V2,5:$V3,191:[1,233],194:[1,236],268:[1,232],357:[1,237],409:[1,234]},{357:[1,238]},{2:$V1,3:241,4:$V2,5:$V3,73:239,75:240},o([310,605,767],$V0,{12:3,13:4,17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,9:243,2:$V1,4:$V2,5:$V3,14:$V4,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,439:[1,242],440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),{439:[1,244]},{439:[1,245]},{2:$V1,3:247,4:$V2,5:$V3,409:[1,246]},{2:$V1,3:249,4:$V2,5:$V3,200:248},o($VE1,[2,313]),{113:250,114:181,115:$VY,116:$VZ,300:$Vn1},{2:$V1,3:114,4:$V2,5:$V3,113:256,114:253,115:$VY,116:$VZ,134:$V_,145:$V01,146:251,147:$VF1,154:$V31,158:$VL,183:$V71,197:255,201:260,202:259,258:257,259:258,266:$VG1,275:252,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:262,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VK,[2,679]),o($VK,[2,680]),{2:$V1,3:171,4:$V2,5:$V3,40:264,56:168,77:$VX,79:75,89:$V7,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:263,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,186:99,190:$Vb,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:271,4:$V2,5:$V3,113:268,114:181,115:$VY,116:$VZ,300:$Vn1,448:266,449:267,450:269,451:$VH1},{2:$V1,3:272,4:$V2,5:$V3,145:$VI1,147:$VJ1,435:273},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:276,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{508:[1,277]},{2:$V1,3:100,4:$V2,5:$V3,507:279,509:278},{2:$V1,3:114,4:$V2,5:$V3,158:$VL,201:280,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:281,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VK1,$VL1,{188:285,166:[1,284],187:[1,282],189:[1,283],196:$VM1}),o($VN1,[2,764],{77:[1,287]}),o([2,4,5,77,115,116,134,139,145,147,154,156,158,166,181,182,183,187,189,196,266,267,271,272,274,281,282,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,306,307,316,321,424,428],[2,154],{151:[1,288],152:[1,289],191:[1,290],192:[1,291],193:[1,292],194:[1,293],195:[1,294]}),o($VO1,[2,1]),o($VO1,[2,2]),{6:295,134:[1,444],174:[1,467],246:[1,416],286:[1,378],287:[1,412],374:[1,409],385:[1,300],406:[1,302],414:[1,554],418:[1,476],420:[1,448],421:[1,514],437:[1,447],439:[1,530],444:[1,347],463:[1,423],467:[1,453],473:[1,346],517:[1,312],518:[1,304],519:[1,404],521:[1,296],522:[1,297],523:[1,298],524:[1,299],525:[1,301],526:[1,303],527:[1,305],528:[1,306],529:[1,307],530:[1,308],531:[1,309],532:[1,310],533:[1,311],534:[1,313],535:[1,314],536:[1,315],537:[1,316],538:[1,317],539:[1,318],540:[1,319],541:[1,320],542:[1,321],543:[1,322],544:[1,323],545:[1,324],546:[1,325],547:[1,326],548:[1,327],549:[1,328],550:[1,329],551:[1,330],552:[1,331],553:[1,332],554:[1,333],555:[1,334],556:[1,335],557:[1,336],558:[1,337],559:[1,338],560:[1,339],561:[1,340],562:[1,341],563:[1,342],564:[1,343],565:[1,344],566:[1,345],567:[1,348],568:[1,349],569:[1,350],570:[1,351],571:[1,352],572:[1,353],573:[1,354],574:[1,355],575:[1,356],576:[1,357],577:[1,358],578:[1,359],579:[1,360],580:[1,361],581:[1,362],582:[1,363],583:[1,364],584:[1,365],585:[1,366],586:[1,367],587:[1,368],588:[1,369],589:[1,370],590:[1,371],591:[1,372],592:[1,373],593:[1,374],594:[1,375],595:[1,376],596:[1,377],597:[1,379],598:[1,380],599:[1,381],600:[1,382],601:[1,383],602:[1,384],603:[1,385],604:[1,386],605:[1,387],606:[1,388],607:[1,389],608:[1,390],609:[1,391],610:[1,392],611:[1,393],612:[1,394],613:[1,395],614:[1,396],615:[1,397],616:[1,398],617:[1,399],618:[1,400],619:[1,401],620:[1,402],621:[1,403],622:[1,405],623:[1,406],624:[1,407],625:[1,408],626:[1,410],627:[1,411],628:[1,413],629:[1,414],630:[1,415],631:[1,417],632:[1,418],633:[1,419],634:[1,420],635:[1,421],636:[1,422],637:[1,424],638:[1,425],639:[1,426],640:[1,427],641:[1,428],642:[1,429],643:[1,430],644:[1,431],645:[1,432],646:[1,433],647:[1,434],648:[1,435],649:[1,436],650:[1,437],651:[1,438],652:[1,439],653:[1,440],654:[1,441],655:[1,442],656:[1,443],657:[1,445],658:[1,446],659:[1,449],660:[1,450],661:[1,451],662:[1,452],663:[1,454],664:[1,455],665:[1,456],666:[1,457],667:[1,458],668:[1,459],669:[1,460],670:[1,461],671:[1,462],672:[1,463],673:[1,464],674:[1,465],675:[1,466],676:[1,468],677:[1,469],678:[1,470],679:[1,471],680:[1,472],681:[1,473],682:[1,474],683:[1,475],684:[1,477],685:[1,478],686:[1,479],687:[1,480],688:[1,481],689:[1,482],690:[1,483],691:[1,484],692:[1,485],693:[1,486],694:[1,487],695:[1,488],696:[1,489],697:[1,490],698:[1,491],699:[1,492],700:[1,493],701:[1,494],702:[1,495],703:[1,496],704:[1,497],705:[1,498],706:[1,499],707:[1,500],708:[1,501],709:[1,502],710:[1,503],711:[1,504],712:[1,505],713:[1,506],714:[1,507],715:[1,508],716:[1,509],717:[1,510],718:[1,511],719:[1,512],720:[1,513],721:[1,515],722:[1,516],723:[1,517],724:[1,518],725:[1,519],726:[1,520],727:[1,521],728:[1,522],729:[1,523],730:[1,524],731:[1,525],732:[1,526],733:[1,527],734:[1,528],735:[1,529],736:[1,531],737:[1,532],738:[1,533],739:[1,534],740:[1,535],741:[1,536],742:[1,537],743:[1,538],744:[1,539],745:[1,540],746:[1,541],747:[1,542],748:[1,543],749:[1,544],750:[1,545],751:[1,546],752:[1,547],753:[1,548],754:[1,549],755:[1,550],756:[1,551],757:[1,552],758:[1,553],759:[1,555],760:[1,556],761:[1,557],762:[1,558],763:[1,559],764:[1,560],765:[1,561],766:[1,562]},{1:[2,6]},o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:563,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VP1,[2,1048]),o($VP1,[2,1049]),o($VJ,[2,10]),{16:[1,564]},{2:$V1,3:249,4:$V2,5:$V3,200:565},{409:[1,566]},o($VK,[2,767]),{77:$VQ1},{77:[1,568]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:569,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:570,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,571]},{77:$VR1},{77:[1,573]},{77:[1,574]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:575,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vx1,$VS1,{354:576,158:$VT1}),{409:[1,578]},{2:$V1,3:579,4:$V2,5:$V3},{194:[1,580]},{2:$V1,3:586,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,185:[1,582],435:593,476:581,477:583,478:584,481:585,485:590,496:587,500:589},{133:[1,597],353:594,357:[1,596],414:[1,595]},{113:599,114:181,115:$VY,116:$VZ,185:[2,1146],300:$Vn1,474:598},o($VW1,[2,1140],{468:600,3:601,2:$V1,4:$V2,5:$V3}),{2:$V1,3:602,4:$V2,5:$V3},{4:[1,603]},{4:[1,604]},o($VT,[2,509]),o($VK,[2,693],{74:[1,605]}),o($VX1,[2,694]),{2:$V1,3:606,4:$V2,5:$V3},{2:$V1,3:249,4:$V2,5:$V3,200:607},{2:$V1,3:608,4:$V2,5:$V3},o($Vx1,$VY1,{402:609,158:$VZ1}),{409:[1,611]},{2:$V1,3:612,4:$V2,5:$V3},o($Vx1,$VY1,{402:613,158:$VZ1}),o($Vx1,$VY1,{402:614,158:$VZ1}),{2:$V1,3:615,4:$V2,5:$V3},o($V_1,[2,1134]),o($V_1,[2,1135]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:616,117:633,331:645,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$V42,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,148:$V9,156:$Vc2,158:$Va,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VE1,[2,290]),o($VE1,[2,291]),o($VE1,[2,292]),o($VE1,[2,293]),o($VE1,[2,294]),o($VE1,[2,295]),o($VE1,[2,296]),o($VE1,[2,297]),o($VE1,[2,298]),o($VE1,[2,299]),o($VE1,[2,300]),o($VE1,[2,301]),o($VE1,[2,302]),o($VE1,[2,303]),o($VE1,[2,304]),o($VE1,[2,305]),o($VE1,[2,306]),o($VE1,[2,307]),{2:$V1,3:171,4:$V2,5:$V3,26:662,27:661,36:657,40:656,56:168,77:$VX,79:75,89:$V7,94:659,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,186:99,190:$Vb,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,265:658,266:$V81,267:$Vc,268:[1,663],271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:[1,660],295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,343:$Vi,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,311]),o($VE1,[2,312]),{77:[1,664]},o([2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VA2,{77:$VQ1,119:[1,665]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:666,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:667,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:668,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:669,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:670,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,285]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,232,233,240,243,244,246,248,250,266,267,268,271,272,274,281,282,283,284,285,286,287,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,306,307,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,419,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767,768,769],[2,363]),o($VB2,[2,364]),o($VB2,[2,365]),o($VB2,$VC2),o($VB2,[2,367]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,368]),{2:$V1,3:672,4:$V2,5:$V3,134:[1,673],305:671},{2:$V1,3:674,4:$V2,5:$V3},o($VB2,[2,374]),o($VB2,[2,375]),{2:$V1,3:675,4:$V2,5:$V3,77:$VD2,113:677,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,154:$V31,183:$V71,197:678,202:680,258:679,298:$Vl1,299:$Vm1,300:$Vn1,306:$Vr1,423:681,428:$Vw1},{77:[1,682]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:683,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,308:684,311:685,312:$VE2,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,687]},{77:[1,688]},o($VF2,[2,631]),{2:$V1,3:703,4:$V2,5:$V3,77:$VG2,111:698,113:696,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,146:693,147:$VF1,154:$V31,158:$VL,183:$V71,197:695,201:701,202:700,258:697,259:699,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,304:[1,691],306:$Vr1,423:193,424:$Vv1,425:689,426:692,427:694,428:$Vw1,431:690},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:704,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:705,4:$V2,5:$V3,158:$VL,201:706,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS},{77:[2,340]},{77:[2,341]},{77:[2,342]},{77:[2,343]},{77:[2,344]},{77:[2,345]},{77:[2,346]},{77:[2,347]},{77:[2,348]},o($VB2,[2,88]),o($VB2,[2,89]),{2:$V1,3:712,4:$V2,5:$V3,114:710,115:$VY,116:$VZ,134:$VH2,429:707,430:[1,708],432:709},{2:$V1,3:249,4:$V2,5:$V3,200:713},{294:[1,714]},o($Vx1,[2,479]),{2:$V1,3:249,4:$V2,5:$V3,200:715},{232:[1,717],457:716},{232:[2,702]},{2:$V1,3:224,4:$V2,5:$V3,77:$VA1,114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,200:218,201:220,202:219,203:222,210:718,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},{40:719,79:75,89:$V7,186:99,190:$Vb},o($VI2,[2,1096],{211:720,76:[1,721]}),o($VJ2,[2,187],{3:722,2:$V1,4:$V2,5:$V3,76:[1,723],156:[1,724]}),o($VJ2,[2,191],{3:725,2:$V1,4:$V2,5:$V3,76:[1,726]}),o($VJ2,[2,192],{3:727,2:$V1,4:$V2,5:$V3,76:[1,728]}),o($VJ2,[2,195]),o($VJ2,[2,196],{3:729,2:$V1,4:$V2,5:$V3,76:[1,730]}),o($VJ2,[2,199],{3:731,2:$V1,4:$V2,5:$V3,76:[1,732]}),o([2,4,5,10,72,74,76,78,93,98,121,131,156,164,170,171,185,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],$VK2,{77:$VQ1,119:$VL2}),o([2,4,5,10,72,74,76,78,93,98,121,131,164,170,171,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,310,314,605,767],[2,202]),o($VK,[2,780]),{2:$V1,3:249,4:$V2,5:$V3,200:734},o($VM2,$VN2,{81:735,199:$VO2}),o($VC1,[2,1051]),o($VP2,[2,1064],{108:737,191:[1,738]}),o([10,78,185,310,314,605,767],$VN2,{423:193,81:739,120:740,3:741,117:744,114:754,146:766,160:776,162:777,2:$V1,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,115:$VY,116:$VZ,118:$V12,119:$V22,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,199:$VO2,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,424:$Vv1,428:$Vw1}),{357:[1,790]},{185:[1,791]},o($VK,[2,601],{112:[1,792]}),{409:[1,793]},{185:[1,794]},o($VK,[2,605],{112:[1,795],185:[1,796]}),{2:$V1,3:249,4:$V2,5:$V3,200:797},{40:798,74:[1,799],79:75,89:$V7,186:99,190:$Vb},o($Vv3,[2,70]),{76:[1,800]},o($VK,[2,674]),{11:106,310:[1,801],605:$VH,767:$VI},o($VK,[2,672]),o($VK,[2,673]),{2:$V1,3:802,4:$V2,5:$V3},o($VK,[2,594]),{148:[1,803]},o([2,4,5,10,53,72,74,76,77,78,89,95,127,131,145,147,148,150,151,154,156,158,183,185,189,190,231,267,268,291,294,301,306,310,314,339,342,343,347,348,360,372,373,377,378,400,404,405,406,407,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,508,510,511,517,518,519,520,605,767],$VK2,{119:$VL2}),o($VK,[2,622]),o($VK,[2,623]),o($VK,[2,624]),o($VK,$VC2,{74:[1,804]}),{77:$VD2,113:677,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,154:$V31,183:$V71,197:678,202:680,258:679,298:$Vl1,299:$Vm1,300:$Vn1,306:$Vr1,423:681,428:$Vw1},o($Vw3,[2,324]),o($Vw3,[2,325]),o($Vw3,[2,326]),o($Vw3,[2,327]),o($Vw3,[2,328]),o($Vw3,[2,329]),o($Vw3,[2,330]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,117:633,331:645,12:805,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$V42,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,148:$V9,156:$Vc2,158:$Va,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VK,[2,682],{74:$Vx3}),o($VK,[2,683]),o($Vy3,[2,361],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VK,[2,684],{74:[1,808]}),o($VK,[2,685],{74:[1,809]}),o($VX1,[2,690]),o($VX1,[2,692]),o($VX1,[2,686]),o($VX1,[2,687]),{117:815,118:$V12,119:$V22,127:[1,810],231:$VA3,433:811,434:812,437:$VB3},{2:$V1,3:816,4:$V2,5:$V3},o($Vx1,[2,663]),o($Vx1,[2,664]),o($VK,[2,621],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:100,4:$V2,5:$V3,507:279,509:817},o($VK,[2,761],{74:$VC3}),o($VD3,[2,763]),o($VK,[2,766]),o($VK,[2,688],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VK1,$VL1,{188:819,196:$VM1}),o($VK1,$VL1,{188:820,196:$VM1}),o($VK1,$VL1,{188:821,196:$VM1}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:822,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,826],134:$V_,197:825},{2:$V1,3:100,4:$V2,5:$V3,507:279,509:827},o($VE3,[2,155]),o($VE3,[2,156]),o($VE3,[2,157]),o($VE3,[2,158]),o($VE3,[2,159]),o($VE3,[2,160]),o($VE3,[2,161]),o($VO1,[2,3]),o($VO1,[2,781]),o($VO1,[2,782]),o($VO1,[2,783]),o($VO1,[2,784]),o($VO1,[2,785]),o($VO1,[2,786]),o($VO1,[2,787]),o($VO1,[2,788]),o($VO1,[2,789]),o($VO1,[2,790]),o($VO1,[2,791]),o($VO1,[2,792]),o($VO1,[2,793]),o($VO1,[2,794]),o($VO1,[2,795]),o($VO1,[2,796]),o($VO1,[2,797]),o($VO1,[2,798]),o($VO1,[2,799]),o($VO1,[2,800]),o($VO1,[2,801]),o($VO1,[2,802]),o($VO1,[2,803]),o($VO1,[2,804]),o($VO1,[2,805]),o($VO1,[2,806]),o($VO1,[2,807]),o($VO1,[2,808]),o($VO1,[2,809]),o($VO1,[2,810]),o($VO1,[2,811]),o($VO1,[2,812]),o($VO1,[2,813]),o($VO1,[2,814]),o($VO1,[2,815]),o($VO1,[2,816]),o($VO1,[2,817]),o($VO1,[2,818]),o($VO1,[2,819]),o($VO1,[2,820]),o($VO1,[2,821]),o($VO1,[2,822]),o($VO1,[2,823]),o($VO1,[2,824]),o($VO1,[2,825]),o($VO1,[2,826]),o($VO1,[2,827]),o($VO1,[2,828]),o($VO1,[2,829]),o($VO1,[2,830]),o($VO1,[2,831]),o($VO1,[2,832]),o($VO1,[2,833]),o($VO1,[2,834]),o($VO1,[2,835]),o($VO1,[2,836]),o($VO1,[2,837]),o($VO1,[2,838]),o($VO1,[2,839]),o($VO1,[2,840]),o($VO1,[2,841]),o($VO1,[2,842]),o($VO1,[2,843]),o($VO1,[2,844]),o($VO1,[2,845]),o($VO1,[2,846]),o($VO1,[2,847]),o($VO1,[2,848]),o($VO1,[2,849]),o($VO1,[2,850]),o($VO1,[2,851]),o($VO1,[2,852]),o($VO1,[2,853]),o($VO1,[2,854]),o($VO1,[2,855]),o($VO1,[2,856]),o($VO1,[2,857]),o($VO1,[2,858]),o($VO1,[2,859]),o($VO1,[2,860]),o($VO1,[2,861]),o($VO1,[2,862]),o($VO1,[2,863]),o($VO1,[2,864]),o($VO1,[2,865]),o($VO1,[2,866]),o($VO1,[2,867]),o($VO1,[2,868]),o($VO1,[2,869]),o($VO1,[2,870]),o($VO1,[2,871]),o($VO1,[2,872]),o($VO1,[2,873]),o($VO1,[2,874]),o($VO1,[2,875]),o($VO1,[2,876]),o($VO1,[2,877]),o($VO1,[2,878]),o($VO1,[2,879]),o($VO1,[2,880]),o($VO1,[2,881]),o($VO1,[2,882]),o($VO1,[2,883]),o($VO1,[2,884]),o($VO1,[2,885]),o($VO1,[2,886]),o($VO1,[2,887]),o($VO1,[2,888]),o($VO1,[2,889]),o($VO1,[2,890]),o($VO1,[2,891]),o($VO1,[2,892]),o($VO1,[2,893]),o($VO1,[2,894]),o($VO1,[2,895]),o($VO1,[2,896]),o($VO1,[2,897]),o($VO1,[2,898]),o($VO1,[2,899]),o($VO1,[2,900]),o($VO1,[2,901]),o($VO1,[2,902]),o($VO1,[2,903]),o($VO1,[2,904]),o($VO1,[2,905]),o($VO1,[2,906]),o($VO1,[2,907]),o($VO1,[2,908]),o($VO1,[2,909]),o($VO1,[2,910]),o($VO1,[2,911]),o($VO1,[2,912]),o($VO1,[2,913]),o($VO1,[2,914]),o($VO1,[2,915]),o($VO1,[2,916]),o($VO1,[2,917]),o($VO1,[2,918]),o($VO1,[2,919]),o($VO1,[2,920]),o($VO1,[2,921]),o($VO1,[2,922]),o($VO1,[2,923]),o($VO1,[2,924]),o($VO1,[2,925]),o($VO1,[2,926]),o($VO1,[2,927]),o($VO1,[2,928]),o($VO1,[2,929]),o($VO1,[2,930]),o($VO1,[2,931]),o($VO1,[2,932]),o($VO1,[2,933]),o($VO1,[2,934]),o($VO1,[2,935]),o($VO1,[2,936]),o($VO1,[2,937]),o($VO1,[2,938]),o($VO1,[2,939]),o($VO1,[2,940]),o($VO1,[2,941]),o($VO1,[2,942]),o($VO1,[2,943]),o($VO1,[2,944]),o($VO1,[2,945]),o($VO1,[2,946]),o($VO1,[2,947]),o($VO1,[2,948]),o($VO1,[2,949]),o($VO1,[2,950]),o($VO1,[2,951]),o($VO1,[2,952]),o($VO1,[2,953]),o($VO1,[2,954]),o($VO1,[2,955]),o($VO1,[2,956]),o($VO1,[2,957]),o($VO1,[2,958]),o($VO1,[2,959]),o($VO1,[2,960]),o($VO1,[2,961]),o($VO1,[2,962]),o($VO1,[2,963]),o($VO1,[2,964]),o($VO1,[2,965]),o($VO1,[2,966]),o($VO1,[2,967]),o($VO1,[2,968]),o($VO1,[2,969]),o($VO1,[2,970]),o($VO1,[2,971]),o($VO1,[2,972]),o($VO1,[2,973]),o($VO1,[2,974]),o($VO1,[2,975]),o($VO1,[2,976]),o($VO1,[2,977]),o($VO1,[2,978]),o($VO1,[2,979]),o($VO1,[2,980]),o($VO1,[2,981]),o($VO1,[2,982]),o($VO1,[2,983]),o($VO1,[2,984]),o($VO1,[2,985]),o($VO1,[2,986]),o($VO1,[2,987]),o($VO1,[2,988]),o($VO1,[2,989]),o($VO1,[2,990]),o($VO1,[2,991]),o($VO1,[2,992]),o($VO1,[2,993]),o($VO1,[2,994]),o($VO1,[2,995]),o($VO1,[2,996]),o($VO1,[2,997]),o($VO1,[2,998]),o($VO1,[2,999]),o($VO1,[2,1000]),o($VO1,[2,1001]),o($VO1,[2,1002]),o($VO1,[2,1003]),o($VO1,[2,1004]),o($VO1,[2,1005]),o($VO1,[2,1006]),o($VO1,[2,1007]),o($VO1,[2,1008]),o($VO1,[2,1009]),o($VO1,[2,1010]),o($VO1,[2,1011]),o($VO1,[2,1012]),o($VO1,[2,1013]),o($VO1,[2,1014]),o($VO1,[2,1015]),o($VO1,[2,1016]),o($VO1,[2,1017]),o($VO1,[2,1018]),o($VO1,[2,1019]),o($VO1,[2,1020]),o($VO1,[2,1021]),o($VO1,[2,1022]),o($VO1,[2,1023]),o($VO1,[2,1024]),o($VO1,[2,1025]),o($VO1,[2,1026]),o($VO1,[2,1027]),o($VO1,[2,1028]),o($VO1,[2,1029]),o($VO1,[2,1030]),o($VO1,[2,1031]),o($VO1,[2,1032]),o($VO1,[2,1033]),o($VO1,[2,1034]),o($VO1,[2,1035]),o($VO1,[2,1036]),o($VO1,[2,1037]),o($VO1,[2,1038]),o($VO1,[2,1039]),o($VO1,[2,1040]),o($VO1,[2,1041]),o($VO1,[2,1042]),o($VO1,[2,1043]),o($VO1,[2,1044]),o($VO1,[2,1045]),o($VO1,[2,1046]),o($VO1,[2,1047]),o($VJ,[2,7]),o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:828,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),{400:[1,832],405:[1,829],406:[1,830],407:[1,831]},{2:$V1,3:833,4:$V2,5:$V3},o($VK1,[2,1116],{290:834,770:836,78:[1,835],166:[1,838],187:[1,837]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:839,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{74:$Vx3,78:[1,840]},{74:$Vx3,78:[1,841]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:842,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:843,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:844,4:$V2,5:$V3,114:845,115:$VY,116:$VZ},{2:$V1,3:846,4:$V2,5:$V3,114:847,115:$VY,116:$VZ},{2:$V1,3:848,4:$V2,5:$V3,99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{2:$V1,3:849,4:$V2,5:$V3},{156:[1,850]},o($VF3,$VS1,{354:851,158:$VT1}),{231:[1,852]},{2:$V1,3:853,4:$V2,5:$V3},o($VK,[2,736],{74:$VG3}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:855,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VD3,[2,739]),o($VH3,[2,1148],{423:193,479:856,146:857,141:$VI3,143:$VI3,147:$VF1,424:$Vv1,428:$Vw1}),{141:[1,858],143:[1,859]},o($VJ3,$VK3,{493:861,496:862,77:[1,860],139:$VU1}),o($VL3,[2,1172],{497:863,114:864,115:$VY,116:$VZ}),o($VM3,[2,1176],{499:865,500:866,154:$VV1}),o($VM3,[2,754]),o($VN3,[2,746]),{2:$V1,3:867,4:$V2,5:$V3,134:[1,868]},{2:$V1,3:869,4:$V2,5:$V3},{2:$V1,3:870,4:$V2,5:$V3},o($Vx1,$VS1,{354:871,158:$VT1}),o($Vx1,$VS1,{354:872,158:$VT1}),o($V_1,[2,498]),o($V_1,[2,499]),{185:[1,873]},{185:[2,1147]},o($VO3,[2,1142],{469:874,472:875,139:[1,876]}),o($VW1,[2,1141]),o($VP3,$VQ3,{513:877,95:$VR3,231:[1,878],517:$VS3,518:$VT3,519:$VU3}),{76:[1,883]},{76:[1,884]},{147:$VW,454:885},{4:$VV3,7:889,76:[1,887],273:886,391:888,393:$VW3},o($VK,[2,463],{131:[1,892]}),o($VK,[2,586]),{2:$V1,3:893,4:$V2,5:$V3},{302:[1,894]},o($VF3,$VY1,{402:895,158:$VZ1}),o($VK,[2,600]),{2:$V1,3:249,4:$V2,5:$V3,200:897,403:896},{2:$V1,3:249,4:$V2,5:$V3,200:897,403:898},o($VK,[2,779]),o($VJ,[2,676],{442:899,314:[1,900]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:901,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:902,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:903,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:904,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:905,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:906,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:907,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:908,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:909,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:910,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:911,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:912,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:913,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:914,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:915,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:916,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:917,4:$V2,5:$V3,77:[1,919],134:$V_,158:$VL,197:918,201:920,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS},{2:$V1,3:921,4:$V2,5:$V3,77:[1,923],134:$V_,158:$VL,197:922,201:924,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS},o($VX3,[2,447],{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:925,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),o($VX3,[2,448],{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:926,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),o($VX3,[2,449],{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:927,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),o($VX3,[2,450],{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:928,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),o($VX3,$VY3,{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:929,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:930,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:931,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VX3,[2,452],{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:932,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:933,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:934,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{166:[1,936],168:[1,938],332:935,338:[1,937]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:939,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:940,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:703,4:$V2,5:$V3,77:[1,941],111:944,147:$VZ3,158:$VL,201:945,203:943,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,333:942},{99:[1,947],301:[1,948]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:949,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:950,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:951,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{4:$VV3,7:889,273:952,391:888,393:$VW3},o($V_3,[2,90]),o($V_3,[2,91]),{78:[1,953]},{78:[1,954]},{78:[1,955]},{78:[1,956],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($Vx1,$Vy1,{344:212,77:$VR1,199:$Vz1}),{78:[2,1112]},{78:[2,1113]},{136:$VU,137:$VV},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:957,154:$V31,156:$V41,158:$VL,160:170,166:[1,959],181:$V51,182:$V61,183:$V71,187:[1,958],197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:960,4:$V2,5:$V3,151:$V$3,182:[1,962]},o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,115,116,121,125,131,132,133,134,136,137,139,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,318,334,335,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,423],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,336:$Vy2}),o($V04,[2,424],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,182:$Vg2,316:$Vi2,320:$Vl2}),o($V04,[2,425],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,182:$Vg2,316:$Vi2,320:$Vl2}),o($V14,[2,426],{117:633,331:645,320:$Vl2}),o($V14,[2,427],{117:633,331:645,320:$Vl2}),o($VB2,[2,372]),o($VB2,[2,1118]),o($VB2,[2,1119]),o($VB2,[2,373]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,232,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,369]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:963,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VF2,[2,627]),o($VF2,[2,628]),o($VF2,[2,629]),o($VF2,[2,630]),o($VF2,[2,632]),{40:964,79:75,89:$V7,186:99,190:$Vb},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,308:965,311:685,312:$VE2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{309:966,310:$V24,311:967,312:$VE2,314:$V34},o($V44,[2,379]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:969,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:970,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:[1,973],5:$V3,7:889,56:168,77:$VX,94:972,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,273:971,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,391:888,393:$VW3,423:193,424:$Vv1,428:$Vw1},o($VF2,[2,633]),{74:[1,975],304:[1,974]},o($VF2,[2,649]),o($V54,[2,656]),o($V64,[2,634]),o($V64,[2,635]),o($V64,[2,636]),o($V64,[2,637]),o($V64,[2,638]),o($V64,[2,639]),o($V64,[2,640]),o($V64,[2,641]),o($V64,[2,642]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:976,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o([2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,430,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],$VA2,{77:$VQ1,119:$V74}),{74:$Vx3,304:[1,978]},o($V84,[2,316],{77:$VQ1}),o($VE1,[2,317]),{74:[1,980],430:[1,979]},o($VF2,[2,646]),o($V94,[2,651]),{154:[1,981]},{154:[1,982]},{154:[1,983]},{40:988,77:[1,987],79:75,89:$V7,145:$V01,146:991,147:$VF1,151:$Va4,154:$V31,183:$V71,186:99,190:$Vb,202:992,306:$Vr1,345:984,346:985,347:[1,986],348:$Vb4,423:193,424:$Vv1,428:$Vw1},o($Vx1,$Vy1,{344:993,199:$Vz1}),{77:$Vc4,145:$V01,146:991,147:$VF1,151:$Va4,154:$V31,183:$V71,202:992,306:$Vr1,345:994,346:995,348:$Vb4,423:193,424:$Vv1,428:$Vw1},{231:[1,998],458:997},{2:$V1,3:224,4:$V2,5:$V3,77:$VA1,114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,200:218,201:220,202:219,203:222,210:999,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},{232:[2,703]},{78:[1,1000]},o($VJ2,[2,1098],{212:1001,3:1002,2:$V1,4:$V2,5:$V3}),o($VI2,[2,1097]),o($VJ2,[2,185]),{2:$V1,3:1003,4:$V2,5:$V3},{213:[1,1004]},o($VJ2,[2,189]),{2:$V1,3:1005,4:$V2,5:$V3},o($VJ2,[2,193]),{2:$V1,3:1006,4:$V2,5:$V3},o($VJ2,[2,197]),{2:$V1,3:1007,4:$V2,5:$V3},o($VJ2,[2,200]),{2:$V1,3:1008,4:$V2,5:$V3},{2:$V1,3:1009,4:$V2,5:$V3},{150:[1,1010]},o($Vd4,[2,174],{82:1011,185:[1,1012]}),{2:$V1,3:224,4:$V2,5:$V3,114:1017,115:$VY,116:$VZ,145:$V01,147:[1,1018],154:$V31,158:$VL,183:$V71,200:1013,201:1014,202:1015,203:1016,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1},{2:$V1,3:1023,4:$V2,5:$V3,109:1019,110:1020,111:1021,112:$Ve4},o($VP2,[2,1065]),o($Vf4,[2,1056],{91:1024,184:1025,185:[1,1026]}),o($VD1,[2,1055],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o([2,4,5,10,72,74,76,78,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,199,281,282,283,284,285,286,287,288,289,310,314,424,428,605,767],[2,92],{77:[1,1031]}),{122:[1,1032]},o($Vj4,[2,95]),{2:$V1,3:1033,4:$V2,5:$V3},o($Vj4,[2,97]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1034,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1035,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1037,121:$VU2,125:$VV2,126:$VW2,127:$VX2,128:1036,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{77:[1,1038]},{77:[1,1039]},{77:[1,1040]},{77:[1,1041]},o($Vj4,[2,106]),o($Vj4,[2,107]),o($Vj4,[2,108]),o($Vj4,[2,109]),o($Vj4,[2,110]),o($Vj4,[2,111]),{2:$V1,3:1042,4:$V2,5:$V3},{2:$V1,3:1043,4:$V2,5:$V3,135:[1,1044]},o($Vj4,[2,115]),o($Vj4,[2,116]),o($Vj4,[2,117]),o($Vj4,[2,118]),o($Vj4,[2,119]),o($Vj4,[2,120]),{2:$V1,3:1045,4:$V2,5:$V3,77:$VD2,113:677,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,154:$V31,183:$V71,197:678,202:680,258:679,298:$Vl1,299:$Vm1,300:$Vn1,306:$Vr1,423:681,428:$Vw1},{147:[1,1046]},{77:[1,1047]},{147:[1,1048]},o($Vj4,[2,125]),{77:[1,1049]},{2:$V1,3:1050,4:$V2,5:$V3},{77:[1,1051]},{77:[1,1052]},{77:[1,1053]},{77:[1,1054]},{77:[1,1055],166:[1,1056]},{77:[1,1057]},{77:[1,1058]},{77:[1,1059]},{77:[1,1060]},{77:[1,1061]},{77:[1,1062]},{77:[1,1063]},{77:[1,1064]},{77:[1,1065]},{77:[2,1080]},{77:[2,1081]},{2:$V1,3:249,4:$V2,5:$V3,200:1066},{2:$V1,3:249,4:$V2,5:$V3,200:1067},{113:1068,114:181,115:$VY,116:$VZ,300:$Vn1},o($VK,[2,603],{112:[1,1069]}),{2:$V1,3:249,4:$V2,5:$V3,200:1070},{113:1071,114:181,115:$VY,116:$VZ,300:$Vn1},{2:$V1,3:1072,4:$V2,5:$V3},o($VK,[2,700]),o($VK,[2,68]),{2:$V1,3:241,4:$V2,5:$V3,75:1073},{77:[1,1074]},o($VK,[2,681]),o($VK,[2,593]),{2:$V1,3:1023,4:$V2,5:$V3,111:1077,145:$Vk4,147:$Vl4,149:1075,340:1076,341:1078},{146:1081,147:$VF1,423:193,424:$Vv1,428:$Vw1},o($VK,[2,678]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1082,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VX3,$VY3,{256:149,201:150,257:151,111:152,255:153,197:154,258:155,113:156,259:157,202:158,203:159,260:160,261:161,262:162,146:164,263:165,264:166,56:168,160:170,3:171,114:181,423:193,94:1083,2:$V1,4:$V2,5:$V3,77:$VX,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,181:$V51,182:$V61,183:$V71,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,424:$Vv1,428:$Vw1}),{113:1084,114:181,115:$VY,116:$VZ,300:$Vn1},{2:$V1,3:271,4:$V2,5:$V3,450:1085,451:$VH1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1087,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,231:$VA3,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1,433:1086,437:$VB3},o($VK,[2,658]),{117:1089,118:$V12,119:$V22,127:[1,1088]},o($VK,[2,670]),o($VK,[2,671]),{2:$V1,3:1091,4:$V2,5:$V3,77:$Vm4,134:$Vn4,436:1090},{117:815,118:$V12,119:$V22,127:[1,1094],434:1095},o($VK,[2,760],{74:$VC3}),{2:$V1,3:100,4:$V2,5:$V3,507:1096},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:1097,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:1098,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:1099,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vo4,[2,153],{74:$Vp4}),o($Vq4,[2,275]),o($Vq4,[2,282],{114:181,117:633,331:645,3:1102,113:1104,2:$V1,4:$V2,5:$V3,76:[1,1101],99:$V$1,112:$V02,115:$VY,116:$VZ,118:$V12,119:$V22,126:$V32,127:$Vz3,134:[1,1103],135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,300:$Vn1,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VK1,[2,1094],{198:1105,768:[1,1106]}),{134:$V_,197:1107},{74:$VC3,78:[1,1108]},o($VJ,[2,11]),{150:[1,1109],191:[1,1110]},{191:[1,1111]},{191:[1,1112]},{191:[1,1113]},o($VK,[2,582],{76:[1,1115],77:[1,1114]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1116,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VB2,[2,353]),o($VK1,[2,1117]),o($VK1,[2,1114]),o($VK1,[2,1115]),{74:$Vx3,78:[1,1117]},o($VB2,[2,351]),o($VB2,[2,352]),{74:$Vx3,78:[1,1118]},{74:$Vx3,78:[1,1119]},{74:[1,1120]},{74:[1,1121]},{74:[1,1122]},{74:[1,1123]},o($VB2,[2,360]),o($VK,[2,587]),{302:[1,1124]},{2:$V1,3:1125,4:$V2,5:$V3,113:1126,114:181,115:$VY,116:$VZ,300:$Vn1},{2:$V1,3:249,4:$V2,5:$V3,200:1127},{231:[1,1128]},{2:$V1,3:586,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,435:593,477:1129,478:584,481:585,485:590,496:587,500:589},o($VK,[2,737],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VD3,[2,1150],{480:1130,486:1131,76:$Vr4}),o($VH3,[2,1149]),{2:$V1,3:1135,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,146:1134,147:$VF1,154:$VV1,423:193,424:$Vv1,428:$Vw1,478:1133,496:587,500:589},{2:$V1,3:1135,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,435:593,478:1137,481:1136,485:590,496:587,500:589},{2:$V1,3:586,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,435:593,476:1138,477:583,478:584,481:585,485:590,496:587,500:589},o($VL3,[2,1168],{494:1139,114:1140,115:$VY,116:$VZ}),o($VJ3,[2,1167]),o($VM3,[2,1174],{498:1141,500:1142,154:$VV1}),o($VL3,[2,1173]),o($VM3,[2,753]),o($VM3,[2,1177]),o($VJ3,[2,756]),o($VJ3,[2,757]),o($VM3,[2,755]),o($VN3,[2,747]),{2:$V1,3:249,4:$V2,5:$V3,200:1143},{2:$V1,3:249,4:$V2,5:$V3,200:1144},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1145,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vs4,[2,1144],{114:181,470:1146,113:1147,115:$VY,116:$VZ,300:$Vn1}),o($VO3,[2,1143]),{2:$V1,3:1148,4:$V2,5:$V3},{339:$Vt4,342:$Vu4,343:$Vv4,514:1149},{2:$V1,3:249,4:$V2,5:$V3,200:1153},o($VP3,[2,772]),o($VP3,[2,773]),o($VP3,[2,774]),{132:[1,1154]},{267:[1,1155]},{267:[1,1156]},o($VX1,[2,695]),o($VX1,[2,696],{127:[1,1157]}),{4:$VV3,7:889,273:1158,391:888,393:$VW3},o([2,4,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,549],{5:[1,1159]}),o([2,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,119,121,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,231,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,301,304,310,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,347,360,372,373,377,378,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,546],{4:[1,1161],77:[1,1160]}),{77:[1,1162]},o($Vw4,$Vx4),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1163,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VK,[2,595]),o($VF3,[2,575]),{2:$V1,3:1164,4:$V2,5:$V3,113:1165,114:181,115:$VY,116:$VZ,300:$Vn1},o($VK,[2,571],{74:$Vy4}),o($VX1,[2,573]),o($VK,[2,620],{74:$Vy4}),o($VK,[2,675]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:1167,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($Vz4,[2,383],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($V14,[2,384],{117:633,331:645,320:$Vl2}),o($Vz4,[2,385],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($VA4,[2,386],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,318:[1,1168],320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($VA4,[2,388],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,318:[1,1169],320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($VE1,[2,390],{117:633,331:645}),o($V04,[2,391],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,182:$Vg2,316:$Vi2,320:$Vl2}),o($V04,[2,392],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,182:$Vg2,316:$Vi2,320:$Vl2}),o($VB4,[2,393],{117:633,331:645,118:$V12,119:$V22,126:$V32,138:$V62,316:$Vi2,320:$Vl2}),o($VB4,[2,394],{117:633,331:645,118:$V12,119:$V22,126:$V32,138:$V62,316:$Vi2,320:$Vl2}),o($VB4,[2,395],{117:633,331:645,118:$V12,119:$V22,126:$V32,138:$V62,316:$Vi2,320:$Vl2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,121,125,126,127,131,132,133,134,135,136,137,139,140,141,142,143,144,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,181,182,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,315,317,318,319,321,322,323,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,396],{117:633,331:645,118:$V12,119:$V22,138:$V62,316:$Vi2,320:$Vl2}),o($VC4,[2,397],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2}),o($VC4,[2,398],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2}),o($VC4,[2,399],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2}),o($VC4,[2,400],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2}),o($V84,[2,401],{77:$VQ1}),o($VE1,[2,402]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1170,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,404]),o($V84,[2,405],{77:$VQ1}),o($VE1,[2,406]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1171,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,408]),o($VD4,[2,409],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,410],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,411],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,412],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o([2,4,5,10,53,72,89,99,127,141,142,148,156,158,172,173,190,267,268,291,294,310,314,324,325,326,327,328,329,330,334,335,337,339,342,343,400,404,405,408,410,412,413,421,422,438,440,441,443,444,445,446,447,451,452,455,508,510,511,520,605,767],$VE4,{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,414],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,415],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,416],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,417],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VD4,[2,418],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),{77:[1,1172]},{77:[2,453]},{77:[2,454]},{77:[2,455]},o($VF4,[2,421],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,336:$Vy2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,107,115,116,121,125,131,132,133,134,136,137,139,145,147,148,150,151,152,154,158,164,166,168,170,171,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,318,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,422],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2}),{2:$V1,3:171,4:$V2,5:$V3,40:1173,56:168,77:$VX,78:[1,1175],79:75,89:$V7,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1174,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,186:99,190:$Vb,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,435]),o($VE1,[2,437]),o($VE1,[2,444]),o($VE1,[2,445]),{2:$V1,3:675,4:$V2,5:$V3,77:[1,1176]},{2:$V1,3:703,4:$V2,5:$V3,77:[1,1177],111:944,147:$VZ3,158:$VL,201:945,203:1179,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,333:1178},o($VE1,[2,442]),o($VF4,[2,439],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,336:$Vy2}),o($VF4,[2,440],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,336:$Vy2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,190,199,207,209,223,224,225,226,227,228,229,230,233,240,243,244,246,248,267,268,281,282,283,284,285,286,287,288,289,291,294,300,304,310,312,313,314,318,324,325,326,327,328,329,330,334,335,336,337,339,342,343,400,404,405,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,467,473,508,510,511,520,605,767],[2,441],{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($VE1,[2,443]),o($VE1,[2,308]),o($VE1,[2,309]),o($VE1,[2,310]),o($VE1,[2,428]),{74:$Vx3,78:[1,1180]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1181,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1182,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,$VG4),o($VH4,[2,288]),o($VE1,[2,284]),{78:[1,1184],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1185]},{309:1186,310:$V24,311:967,312:$VE2,314:$V34},{310:[1,1187]},o($V44,[2,378]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1188,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,313:[1,1189],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{76:[1,1190],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{74:[1,1191]},{74:[1,1192],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o([4,5,74,77,99,112,118,119,126,127,135,138,140,141,142,143,144,156,172,173,181,182,315,316,317,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337],$Vx4),o($VF2,[2,647]),{2:$V1,3:703,4:$V2,5:$V3,77:$VG2,111:698,113:696,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,146:693,147:$VF1,154:$V31,158:$VL,183:$V71,197:695,201:701,202:700,258:697,259:699,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,304:[1,1193],306:$Vr1,423:193,424:$Vv1,426:1194,427:694,428:$Vw1},{78:[1,1195],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{2:$V1,3:1196,4:$V2,5:$V3,151:$V$3},o($VE1,[2,371]),o($VF2,[2,644]),{2:$V1,3:712,4:$V2,5:$V3,114:710,115:$VY,116:$VZ,134:$VH2,430:[1,1197],432:1198},{2:$V1,3:703,4:$V2,5:$V3,77:$VG2,111:698,113:696,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,146:693,147:$VF1,154:$V31,158:$VL,183:$V71,197:695,201:701,202:700,258:697,259:699,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1,423:193,424:$Vv1,426:1199,427:694,428:$Vw1},{2:$V1,3:703,4:$V2,5:$V3,77:$VG2,111:698,113:696,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,146:693,147:$VF1,154:$V31,158:$VL,183:$V71,197:695,201:701,202:700,258:697,259:699,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1,423:193,424:$Vv1,426:1200,427:694,428:$Vw1},{2:$V1,3:703,4:$V2,5:$V3,77:$VG2,111:698,113:696,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,146:693,147:$VF1,154:$V31,158:$VL,183:$V71,197:695,201:701,202:700,258:697,259:699,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1,423:193,424:$Vv1,426:1201,427:694,428:$Vw1},{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1202,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,465],{74:$VJ4}),{151:$Va4,345:1204,348:$Vb4},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1208,100:1205,111:1207,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,349:1206,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,473]),o($VK4,[2,476]),o($VK4,[2,477]),o($VL4,[2,481]),o($VL4,[2,482]),{2:$V1,3:249,4:$V2,5:$V3,200:1209},{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1210,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,469],{74:$VJ4}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1208,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,349:1206,423:193,424:$Vv1,428:$Vw1},{312:$VM4,459:1211,461:1212,462:1213},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1215,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{231:[2,704]},o($VJ2,[2,183],{3:1216,2:$V1,4:$V2,5:$V3,76:[1,1217]}),o($VJ2,[2,184]),o($VJ2,[2,1099]),o($VJ2,[2,186]),o($VJ2,[2,188]),o($VJ2,[2,190]),o($VJ2,[2,194]),o($VJ2,[2,198]),o($VJ2,[2,201]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,121,127,131,145,147,148,150,151,154,156,158,164,170,171,183,185,189,190,207,209,223,224,225,226,227,228,229,230,231,232,233,246,248,267,268,291,294,301,306,310,314,339,342,343,347,348,360,372,373,377,378,400,404,405,406,407,408,410,412,413,421,422,424,428,438,440,441,443,444,445,446,447,451,452,455,508,510,511,517,518,519,520,605,767],[2,203]),{2:$V1,3:1218,4:$V2,5:$V3},o($VN4,[2,1052],{83:1219,92:1220,93:[1,1221],98:[1,1222]}),{2:$V1,3:224,4:$V2,5:$V3,77:[1,1224],114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,200:218,201:220,202:219,203:222,204:1223,210:1225,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},o($VM2,[2,166]),o($VM2,[2,167]),o($VM2,[2,168]),o($VM2,[2,169]),o($VM2,[2,170]),{2:$V1,3:675,4:$V2,5:$V3},o($VC1,[2,83],{74:[1,1226]}),o($VO4,[2,85]),o($VO4,[2,86]),{113:1227,114:181,115:$VY,116:$VZ,300:$Vn1},o([10,72,74,78,93,98,121,127,131,164,170,171,185,199,233,246,248,310,314,605,767],$VA2,{119:$V74}),o($Vf4,[2,73]),o($Vf4,[2,1057]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1228,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vj4,[2,128]),o($Vj4,[2,146]),o($Vj4,[2,147]),o($Vj4,[2,148]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,78:[2,1072],94:265,111:152,113:156,114:181,115:$VY,116:$VZ,130:1229,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1230,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,1231]},o($Vj4,[2,96]),o([2,4,5,10,72,74,76,77,78,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,199,281,282,283,284,285,286,287,288,289,310,314,424,428,605,767],[2,98],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o([2,4,5,10,72,74,76,77,78,112,115,116,121,125,127,131,132,133,134,136,137,139,141,142,145,147,148,150,151,152,154,156,158,164,166,168,170,171,172,173,174,175,177,183,185,187,189,199,281,282,283,284,285,286,287,288,289,310,314,424,428,605,767],[2,99],{117:633,331:645,99:$V$1,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1232],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1233,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},o($VP4,[2,1068],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1235,121:$VU2,125:$VV2,126:$VW2,127:$VX2,129:1234,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1236,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1237,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1238,4:$V2,5:$V3},o($Vj4,[2,112]),o($Vj4,[2,113]),o($Vj4,[2,114]),o($Vj4,[2,121]),{2:$V1,3:1239,4:$V2,5:$V3},{2:$V1,3:1023,4:$V2,5:$V3,111:1077,145:$Vk4,147:$Vl4,149:1240,340:1076,341:1078},{2:$V1,3:1241,4:$V2,5:$V3},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1242,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vj4,[2,127]),o($VP4,[2,1074],{157:1243}),o($VP4,[2,1076],{159:1244}),o($VP4,[2,1078],{161:1245}),o($VP4,[2,1082],{163:1246}),o($VQ4,$VR4,{165:1247,180:1248}),{77:[1,1249]},o($VP4,[2,1084],{167:1250}),o($VP4,[2,1086],{169:1251}),o($VQ4,$VR4,{180:1248,165:1252}),o($VQ4,$VR4,{180:1248,165:1253}),o($VQ4,$VR4,{180:1248,165:1254}),o($VQ4,$VR4,{180:1248,165:1255}),{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1256,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:1257,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VS4,[2,1088],{178:1258}),o($VK,[2,613],{185:[1,1259]}),o($VK,[2,609],{185:[1,1260]}),o($VK,[2,602]),{113:1261,114:181,115:$VY,116:$VZ,300:$Vn1},o($VK,[2,611],{185:[1,1262]}),o($VK,[2,606]),o($VK,[2,607],{112:[1,1263]}),o($Vv3,[2,69]),{40:1264,79:75,89:$V7,186:99,190:$Vb},o($VK,[2,457],{74:$VT4,131:[1,1265]}),o($VU4,[2,458]),{127:[1,1267]},{2:$V1,3:1268,4:$V2,5:$V3},o($Vx1,[2,1120]),o($Vx1,[2,1121]),o($VK,[2,625]),o($Vy3,[2,362],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VD4,$VE4,{117:633,331:645,112:$V02,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,336:$Vy2}),o($VX1,[2,689]),o($VX1,[2,691]),o($VK,[2,657]),o($VK,[2,659],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1269,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1091,4:$V2,5:$V3,77:$Vm4,134:$Vn4,436:1270},o($VV4,[2,666]),o($VV4,[2,667]),o($VV4,[2,668]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1271,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1272,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{117:1089,118:$V12,119:$V22,127:[1,1273]},o($VD3,[2,762]),o($Vo4,[2,150],{74:$Vp4}),o($Vo4,[2,151],{74:$Vp4}),o($Vo4,[2,152],{74:$Vp4}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:1274,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1275,4:$V2,5:$V3,113:1277,114:181,115:$VY,116:$VZ,134:[1,1276],300:$Vn1},o($Vq4,[2,277]),o($Vq4,[2,279]),o($Vq4,[2,281]),o($VK1,[2,162]),o($VK1,[2,1095]),{78:[1,1278]},o($VN1,[2,765]),{2:$V1,3:1279,4:$V2,5:$V3},{2:$V1,3:1280,4:$V2,5:$V3},{2:$V1,3:1282,4:$V2,5:$V3,388:1281},{2:$V1,3:1282,4:$V2,5:$V3,388:1283},{2:$V1,3:1284,4:$V2,5:$V3},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1285,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1286,4:$V2,5:$V3},{74:$Vx3,78:[1,1287]},o($VB2,[2,350]),o($VB2,[2,354]),o($VB2,[2,355]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1288,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1289,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1290,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1291,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VF3,[2,511]),o($VK,$VW4,{411:1292,76:$VX4,77:[1,1293]}),o($VK,$VW4,{411:1295,76:$VX4}),{77:[1,1296]},{2:$V1,3:249,4:$V2,5:$V3,200:1297},o($VD3,[2,738]),o($VD3,[2,740]),o($VD3,[2,1151]),{145:$VI1,147:$VJ1,435:1298},o($VY4,[2,1152],{423:193,482:1299,146:1300,147:$VF1,424:$Vv1,428:$Vw1}),{76:$Vr4,141:[2,1156],484:1301,486:1302},o([10,74,76,78,115,116,141,147,154,310,314,424,428,605,767],$VK3,{493:861,496:862,139:$VU1}),o($VD3,[2,743]),o($VD3,$VI3),{74:$VG3,78:[1,1303]},o($VM3,[2,1170],{495:1304,500:1305,154:$VV1}),o($VL3,[2,1169]),o($VM3,[2,752]),o($VM3,[2,1175]),o($VK,[2,497],{77:[1,1306]}),{76:[1,1308],77:[1,1307]},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,150:[1,1309],156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VI4,$VZ4,{79:75,186:99,471:1310,40:1313,89:$V7,148:$V_4,190:$Vb,473:$V$4}),o($Vs4,[2,1145]),o($VO3,[2,730]),{231:[1,1314]},o($V05,[2,776]),o($V05,[2,777]),o($V05,[2,778]),o($VP3,$VQ3,{513:1315,95:$VR3,517:$VS3,518:$VT3,519:$VU3}),o($VP3,[2,775]),o($VK,[2,314]),o($VK,[2,315]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1316,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VX1,[2,697],{127:[1,1317]}),o($Vw4,[2,548]),{134:[1,1319],392:1318,394:[1,1320]},o($Vw4,[2,5]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1208,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,349:1321,423:193,424:$Vv1,428:$Vw1},o($VK,[2,462],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VK,[2,596]),o($VK,[2,597]),{2:$V1,3:249,4:$V2,5:$V3,200:1322},o($VK,[2,677]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1323,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1324,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{78:[1,1325],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1326],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{2:$V1,3:171,4:$V2,5:$V3,40:1327,56:168,77:$VX,79:75,89:$V7,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1328,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,186:99,190:$Vb,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{78:[1,1329]},{74:$Vx3,78:[1,1330]},o($VE1,[2,433]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1331,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,40:1332,56:168,77:$VX,78:[1,1334],79:75,89:$V7,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1333,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,186:99,190:$Vb,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,436]),o($VE1,[2,438]),o($VE1,$V15,{276:1335,277:$V25}),{78:[1,1337],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1338],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{2:$V1,3:1339,4:$V2,5:$V3,182:[1,1340]},o($VF2,[2,626]),o($VE1,[2,370]),{310:[1,1341]},o($VE1,[2,377]),{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,310:[2,381],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1342,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{4:$VV3,7:889,273:1343,391:888,393:$VW3},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1344,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{4:$VV3,7:889,273:1345,391:888,393:$VW3},o($VF2,[2,648]),o($V54,[2,655]),o($V64,[2,643]),o($VH4,$VG4),o($VF2,[2,645]),o($V94,[2,650]),o($V94,[2,652]),o($V94,[2,653]),o($V94,[2,654]),o($VI4,[2,464],{74:$VJ4}),{77:[1,1347],145:$V01,146:1348,147:$VF1,154:$V31,183:$V71,202:1349,306:$Vr1,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,470]),{74:$V35,78:[1,1350]},{74:$V45,78:[1,1352]},o([74,78,99,112,118,119,126,127,135,138,140,141,142,143,144,156,172,173,181,182,315,316,317,319,320,321,322,323,324,325,326,327,328,329,330,334,335,336,337],$V55),o($V65,[2,486],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{40:1356,77:$Vc4,79:75,89:$V7,145:$V01,146:991,147:$VF1,151:$Va4,154:$V31,183:$V71,186:99,190:$Vb,202:992,306:$Vr1,345:1354,346:1355,348:$Vb4,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,468],{74:$VJ4}),o($VK,[2,724],{460:1357,461:1358,462:1359,312:$VM4,467:[1,1360]}),o($V75,[2,708]),o($V75,[2,709]),{156:[1,1362],463:[1,1361]},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,312:[2,705],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VJ2,[2,181]),{2:$V1,3:1363,4:$V2,5:$V3},o($VK,[2,581]),o($V85,[2,240],{84:1364,131:[1,1365]}),o($VN4,[2,1053]),{77:[1,1366]},{77:[1,1367]},o($Vd4,[2,171],{205:1368,216:1370,206:1371,217:1372,222:1375,74:$V95,207:$Va5,209:$Vb5,223:$Vc5,224:$Vd5,225:$Ve5,226:$Vf5,227:$Vg5,228:$Vh5,229:$Vi5,230:$Vj5}),{2:$V1,3:224,4:$V2,5:$V3,40:719,77:$VA1,79:75,89:$V7,114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,186:99,190:$Vb,200:218,201:220,202:219,203:222,204:1384,210:1225,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},o($Vk5,[2,179]),{2:$V1,3:1023,4:$V2,5:$V3,110:1385,111:1021,112:$Ve4},o($VO4,[2,87]),o($Vf4,[2,149],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{78:[1,1386]},{74:$Vx3,78:[2,1073]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,78:[2,1066],94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,123:1387,124:1388,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1389,243:[1,1390],255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vj4,[2,100]),o($VP4,[2,1069],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1392],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1393,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},o($VP4,[2,1070],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),{78:[1,1394],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1395],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1396]},o($Vj4,[2,122]),{74:$VT4,78:[1,1397]},o($Vj4,[2,124]),{74:$Vx3,78:[1,1398]},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1399],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1400,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1401],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1402,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1403],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1404,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1405],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1406,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{74:$Vl5,78:[1,1407]},o($V65,[2,145],{423:193,3:741,117:744,114:754,146:766,160:776,162:777,120:1409,2:$V1,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,115:$VY,116:$VZ,118:$V12,119:$V22,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,424:$Vv1,428:$Vw1}),o($VQ4,$VR4,{180:1248,165:1410}),{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1411],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1412,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,78:[1,1413],112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1414,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{74:$Vl5,78:[1,1415]},{74:$Vl5,78:[1,1416]},{74:$Vl5,78:[1,1417]},{74:$Vl5,78:[1,1418]},{78:[1,1419],155:1027,181:$Vg4,182:$Vh4,183:$Vi4},{74:$Vp4,78:[1,1420]},{2:$V1,3:741,4:$V2,5:$V3,72:$VQ2,74:[1,1421],76:$VR2,77:$VS2,112:$VT2,114:754,115:$VY,116:$VZ,117:744,118:$V12,119:$V22,120:1422,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,146:766,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,160:776,162:777,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1423,4:$V2,5:$V3},{2:$V1,3:1424,4:$V2,5:$V3},o($VK,[2,604]),{2:$V1,3:1425,4:$V2,5:$V3},{113:1426,114:181,115:$VY,116:$VZ,300:$Vn1},{78:[1,1427]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1428,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1023,4:$V2,5:$V3,111:1077,145:$Vk4,147:$Vl4,340:1429,341:1078},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1430,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{127:[1,1431]},o($VK,[2,660],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VV4,[2,665]),{78:[1,1432],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VK,[2,661],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1433,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vq4,[2,274]),o($Vq4,[2,276]),o($Vq4,[2,278]),o($Vq4,[2,280]),o($VK1,[2,163]),o($VK,[2,576]),{150:[1,1434]},o($VK,[2,577]),o($VD3,[2,543],{391:888,7:889,273:1435,4:$VV3,390:[1,1436],393:$VW3}),o($VK,[2,578]),o($VK,[2,580]),{74:$Vx3,78:[1,1437]},o($VK,[2,584]),o($VB2,[2,349]),{74:[1,1438],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{74:[1,1439],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{74:[1,1440],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{74:[1,1441],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VK,[2,588]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1442,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1443,4:$V2,5:$V3},o($VK,[2,590]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,123:1444,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1389,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,1445]},{2:$V1,3:1446,4:$V2,5:$V3},{76:$Vr4,141:[2,1154],483:1447,486:1448},o($VY4,[2,1153]),{141:[1,1449]},{141:[2,1157]},o($VD3,[2,744]),o($VM3,[2,751]),o($VM3,[2,1171]),{2:$V1,3:1282,4:$V2,5:$V3,76:[1,1452],355:1450,362:1451,388:1453},{2:$V1,3:1023,4:$V2,5:$V3,100:1454,111:1455},{40:1456,79:75,89:$V7,186:99,190:$Vb},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1457,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,729]),{2:$V1,3:1023,4:$V2,5:$V3,111:1077,145:$Vk4,147:$Vl4,149:1458,340:1076,341:1078},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1459,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,734]),{2:$V1,3:249,4:$V2,5:$V3,200:1460},{339:$Vt4,342:$Vu4,343:$Vv4,514:1461},o($VX1,[2,698],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1462,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{74:[1,1463],78:[1,1464]},o($V65,[2,550]),o($V65,[2,551]),{74:$V45,78:[1,1465]},o($VX1,[2,572]),o($Vz4,[2,387],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($Vz4,[2,389],{117:633,331:645,118:$V12,119:$V22,126:$V32,135:$V52,138:$V62,140:$V72,143:$Va2,144:$Vb2,181:$Vf2,182:$Vg2,316:$Vi2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2}),o($VE1,[2,403]),o($VE1,[2,407]),{78:[1,1466]},{74:$Vx3,78:[1,1467]},o($VE1,[2,429]),o($VE1,[2,431]),{78:[1,1468],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1469]},{74:$Vx3,78:[1,1470]},o($VE1,[2,434]),o($VE1,[2,331]),{77:[1,1471]},o($VE1,$V15,{276:1472,277:$V25}),o($VE1,$V15,{276:1473,277:$V25}),o($VH4,[2,286]),o($VE1,[2,283]),o($VE1,[2,376]),o($V44,[2,380],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{74:[1,1475],78:[1,1474]},{74:[1,1477],78:[1,1476],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{74:[1,1479],78:[1,1478]},{2:$V1,3:1339,4:$V2,5:$V3},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1208,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,349:1480,423:193,424:$Vv1,428:$Vw1},o($VL4,[2,484]),o($VL4,[2,485]),{40:1483,77:$Vc4,79:75,89:$V7,145:$V01,146:991,147:$VF1,151:$Va4,154:$V31,183:$V71,186:99,190:$Vb,202:992,306:$Vr1,345:1481,346:1482,348:$Vb4,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1023,4:$V2,5:$V3,111:1484},o($VL4,[2,480]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1485,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1486,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,467],{74:$VJ4}),o($VI4,[2,474]),o($VK,[2,701]),o($V75,[2,706]),o($V75,[2,707]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:824,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,176:1487,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,254:823,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{172:[1,1489],313:[1,1488]},{463:[1,1490]},o($VJ2,[2,182]),o($Vm5,[2,242],{85:1491,233:[1,1492]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1493,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1494,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1495,4:$V2,5:$V3},o($Vd4,[2,172],{217:1372,222:1375,216:1496,206:1497,207:$Va5,209:$Vb5,223:$Vc5,224:$Vd5,225:$Ve5,226:$Vf5,227:$Vg5,228:$Vh5,229:$Vi5,230:$Vj5}),{2:$V1,3:224,4:$V2,5:$V3,77:$VA1,114:225,115:$VY,116:$VZ,145:$V01,146:217,147:$V11,154:$V31,158:$VL,183:$V71,200:218,201:220,202:219,203:222,210:1498,214:$VB1,215:223,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},o($Vn5,[2,207]),o($Vn5,[2,208]),{2:$V1,3:224,4:$V2,5:$V3,77:[1,1503],145:$V01,146:1501,147:$V11,154:$V31,158:$VL,183:$V71,200:1500,201:1504,202:1502,203:1505,218:1499,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,306:$Vr1,423:193,424:$Vv1,428:$Vw1},{208:[1,1506],224:$Vo5},{208:[1,1508],224:$Vp5},o($Vq5,[2,224]),{207:[1,1512],209:[1,1511],222:1510,224:$Vd5,225:$Ve5,226:$Vf5,227:$Vg5,228:$Vh5,229:$Vi5,230:$Vj5},o($Vq5,[2,226]),{224:[1,1513]},{209:[1,1515],224:[1,1514]},{209:[1,1517],224:[1,1516]},{209:[1,1518]},{224:[1,1519]},{224:[1,1520]},{74:$V95,205:1521,206:1371,207:$Va5,209:$Vb5,216:1370,217:1372,222:1375,223:$Vc5,224:$Vd5,225:$Ve5,226:$Vf5,227:$Vg5,228:$Vh5,229:$Vi5,230:$Vj5},o($VO4,[2,84]),o($Vj4,[2,102]),{74:$Vr5,78:[1,1522]},{78:[1,1524]},o($Vs5,[2,263]),{78:[2,1067]},o($Vs5,[2,265],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,243:[1,1525],244:[1,1526],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($Vj4,[2,101]),o($VP4,[2,1071],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,103]),o($Vj4,[2,104]),o($Vj4,[2,105]),o($Vj4,[2,123]),o($Vj4,[2,126]),o($Vj4,[2,129]),o($VP4,[2,1075],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,130]),o($VP4,[2,1077],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,131]),o($VP4,[2,1079],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,132]),o($VP4,[2,1083],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,133]),o($VQ4,[2,1090],{179:1527}),o($VQ4,[2,1093],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),{74:$Vl5,78:[1,1528]},o($Vj4,[2,135]),o($VP4,[2,1085],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,136]),o($VP4,[2,1087],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,137]),o($Vj4,[2,138]),o($Vj4,[2,139]),o($Vj4,[2,140]),o($Vj4,[2,141]),o($Vj4,[2,142]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:265,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,153:1529,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VS4,[2,1089],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($VK,[2,614]),o($VK,[2,610]),o($VK,[2,612]),o($VK,[2,608]),o($Vv3,[2,71]),o($VK,[2,456],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VU4,[2,459]),o($VU4,[2,460],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1530,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VV4,[2,669]),o($VK,[2,662],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:1531,4:$V2,5:$V3},o($VD3,[2,552],{389:1532,395:1533,396:1534,370:1542,156:$Vt5,189:$Vu5,231:$Vv5,301:$Vw5,347:$Vx5,360:$Vy5,372:$Vz5,373:$VA5,377:$VB5,378:$VC5}),o($VD3,[2,542]),o($VK,[2,583],{76:[1,1546]}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1547,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1548,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1549,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1550,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{74:$Vx3,78:[1,1551]},o($VK,[2,592]),{74:$Vr5,78:[1,1552]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,123:1553,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1389,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o([10,74,78,141,310,314,605,767],[2,748]),{141:[1,1554]},{141:[2,1155]},{2:$V1,3:1135,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,435:593,478:1137,481:1555,485:590,496:587,500:589},{78:[1,1556]},{74:[1,1557],78:[2,513]},{40:1558,79:75,89:$V7,186:99,190:$Vb},o($V65,[2,539]),{74:$V35,78:[1,1559]},o($V65,$V55),o($VK,[2,1138],{416:1560,417:1561,72:$VD5}),o($VI4,$VZ4,{79:75,186:99,117:633,331:645,40:1313,471:1563,89:$V7,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,148:$V_4,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,190:$Vb,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2,473:$V$4}),o($VI4,[2,732],{74:$VT4}),o($VI4,[2,733],{74:$Vx3}),o([10,53,72,89,127,148,158,190,267,268,291,294,310,314,339,342,343,400,404,405,408,410,412,413,421,422,438,440,441,443,444,445,446,447,451,452,455,508,510,511,520,605,767],[2,1186],{515:1564,3:1565,2:$V1,4:$V2,5:$V3,76:[1,1566]}),o($VE5,[2,1188],{516:1567,76:[1,1568]}),o($VX1,[2,699],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{134:[1,1569]},o($Vw4,[2,545]),o($Vw4,[2,547]),o($VE1,[2,419]),o($VE1,[2,420]),o($VE1,[2,446]),o($VE1,[2,430]),o($VE1,[2,432]),{121:$VF5,278:1570,279:1571,280:[1,1572]},o($VE1,[2,332]),o($VE1,[2,333]),o($VE1,[2,318]),{134:[1,1574]},o($VE1,[2,320]),{134:[1,1575]},o($VE1,[2,322]),{134:[1,1576]},{74:$V45,78:[1,1577]},{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1578,423:193,424:$Vv1,428:$Vw1},o($VI4,[2,472],{74:$VJ4}),o($VI4,[2,475]),o($V65,[2,495]),o($V65,[2,487],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VI4,[2,466],{74:$VJ4}),o($VK,[2,725],{74:$Vp4,199:[1,1579]}),{339:$VG5,342:$VH5,464:1580},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1583,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{122:[1,1585],172:[1,1586],313:[1,1584]},o($VI5,[2,261],{86:1587,121:[1,1588]}),{122:[1,1589]},o($V85,[2,241],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{95:[1,1590],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{95:[1,1591]},o($Vn5,[2,205]),o($Vn5,[2,206]),o($Vk5,[2,180]),o($Vn5,[2,239],{219:1592,231:[1,1593],232:[1,1594]}),o($VJ5,[2,210],{3:1595,2:$V1,4:$V2,5:$V3,76:[1,1596]}),o($VK5,[2,1100],{220:1597,76:[1,1598]}),{2:$V1,3:1599,4:$V2,5:$V3,76:[1,1600]},{40:1601,79:75,89:$V7,186:99,190:$Vb},o($VJ5,[2,218],{3:1602,2:$V1,4:$V2,5:$V3,76:[1,1603]}),o($VJ5,[2,221],{3:1604,2:$V1,4:$V2,5:$V3,76:[1,1605]}),{77:[1,1606]},o($Vq5,[2,236]),{77:[1,1607]},o($Vq5,[2,232]),o($Vq5,[2,225]),{224:$Vp5},{224:$Vo5},o($Vq5,[2,227]),o($Vq5,[2,228]),{224:[1,1608]},o($Vq5,[2,230]),{224:[1,1609]},{224:[1,1610]},o($Vq5,[2,234]),o($Vq5,[2,235]),{78:[1,1611],206:1497,207:$Va5,209:$Vb5,216:1496,217:1372,222:1375,223:$Vc5,224:$Vd5,225:$Ve5,226:$Vf5,227:$Vg5,228:$Vh5,229:$Vi5,230:$Vj5},o($Vj4,[2,93]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1612,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vj4,[2,94]),o($Vs5,[2,266]),{245:[1,1613]},o($V65,[2,144],{423:193,3:741,117:744,114:754,146:766,160:776,162:777,120:1614,2:$V1,4:$V2,5:$V3,72:$VQ2,76:$VR2,77:$VS2,112:$VT2,115:$VY,116:$VZ,118:$V12,119:$V22,121:$VU2,125:$VV2,126:$VW2,127:$VX2,131:$VY2,132:$VZ2,133:$V_2,134:$V$2,135:$V03,136:$V13,137:$V23,138:$V33,139:$V43,140:$V53,141:$V63,142:$V73,143:$V83,144:$V93,145:$Va3,147:$Vb3,148:$Vc3,150:$Vd3,151:$Ve3,152:$Vf3,154:$Vg3,156:$Vh3,158:$Vi3,164:$Vj3,166:$Vk3,168:$Vl3,170:$Vm3,171:$Vn3,172:$Vo3,173:$Vp3,174:$Vq3,175:$Vr3,177:$Vs3,187:$Vt3,189:$Vu3,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,424:$Vv1,428:$Vw1}),o($Vj4,[2,134]),{74:$Vx3,78:[1,1615]},o($VU4,[2,461],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),o($VK,[2,579]),o($VD3,[2,541]),o($VD3,[2,553],{370:1542,396:1616,156:$Vt5,189:$Vu5,231:$Vv5,301:$Vw5,347:$Vx5,360:$Vy5,372:$Vz5,373:$VA5,377:$VB5,378:$VC5}),o($Vw3,[2,555]),{374:[1,1617]},{374:[1,1618]},{2:$V1,3:249,4:$V2,5:$V3,200:1619},o($Vw3,[2,561],{77:[1,1620]}),{2:$V1,3:114,4:$V2,5:$V3,77:[1,1622],113:256,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,154:$V31,158:$VL,183:$V71,197:255,201:1623,202:259,258:257,259:258,266:$VG1,275:1621,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1},o($Vw3,[2,565]),{301:[1,1624]},o($Vw3,[2,567]),o($Vw3,[2,568]),{339:[1,1625]},{77:[1,1626]},{2:$V1,3:1627,4:$V2,5:$V3},{78:[1,1628],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1629],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1630],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{78:[1,1631],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VK,$VW4,{411:1632,76:$VX4}),o($VK,[2,598]),{74:$Vr5,78:[1,1633]},{2:$V1,3:1135,4:$V2,5:$V3,114:588,115:$VY,116:$VZ,139:$VU1,145:$VI1,147:$VJ1,154:$VV1,435:593,478:1137,481:1634,485:590,496:587,500:589},o($VD3,[2,742]),o($VK,[2,500],{356:1635,358:1636,359:1637,4:$VL5,244:$VM5,347:$VN5,360:$VO5}),o($VP5,$VQ5,{3:1282,363:1642,388:1643,364:1644,365:1645,2:$V1,4:$V2,5:$V3,371:$VR5}),{78:[2,514]},{76:[1,1647]},o($VK,[2,616]),o($VK,[2,1139]),{372:[1,1649],418:[1,1648]},o($VI4,[2,735]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:1650,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VK,[2,769]),o($VE5,[2,1187]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,507:95,186:99,3:100,12:1651,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,127:$V8,148:$V9,158:$Va,190:$Vb,267:$Vc,268:$Vd,291:$Ve,294:$Vf,339:$Vg,342:$Vh,343:$Vi,400:$Vj,404:$Vk,405:$Vl,408:$Vm,410:$Vn,412:$Vo,413:$Vp,421:$Vq,422:$Vr,438:$Vs,440:$Vt,441:$Vu,443:$Vv,444:$Vw,445:$Vx,446:$Vy,447:$Vz,451:$VA,452:$VB,455:$VC,508:$VD,510:$VE,511:$VF,520:$VG}),o($VE5,[2,1189]),{78:[1,1652]},{78:[1,1653],121:$VF5,279:1654},{78:[1,1655]},{122:[1,1656]},{122:[1,1657]},{78:[1,1658]},{78:[1,1659]},{78:[1,1660]},o($VL4,[2,483]),o($VI4,[2,471],{74:$VJ4}),{2:$V1,3:249,4:$V2,5:$V3,145:$VI1,147:$VJ1,200:1662,435:1661},o($V75,[2,710]),o($V75,[2,712]),{148:[1,1663]},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,313:[1,1664],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},{343:$VS5,465:1665},{421:[1,1668],466:[1,1667]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1669,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VT5,[2,269],{87:1670,246:[1,1671],248:[1,1672]}),{122:[1,1673]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,234:1674,236:1675,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1680,4:$V2,5:$V3},{2:$V1,3:1681,4:$V2,5:$V3},o($Vn5,[2,209]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1682,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,1683]},o($VJ5,[2,211]),{2:$V1,3:1684,4:$V2,5:$V3},o($VJ5,[2,1102],{221:1685,3:1686,2:$V1,4:$V2,5:$V3}),o($VK5,[2,1101]),o($VJ5,[2,214]),{2:$V1,3:1687,4:$V2,5:$V3},{78:[1,1688]},o($VJ5,[2,219]),{2:$V1,3:1689,4:$V2,5:$V3},o($VJ5,[2,222]),{2:$V1,3:1690,4:$V2,5:$V3},{40:1691,79:75,89:$V7,186:99,190:$Vb},{40:1692,79:75,89:$V7,186:99,190:$Vb},o($Vq5,[2,229]),o($Vq5,[2,231]),o($Vq5,[2,233]),o($Vd4,[2,173]),o($Vs5,[2,264]),o($Vs5,[2,267],{243:[1,1693]}),o($VQ4,[2,1091],{155:1027,181:$Vg4,182:$Vh4,183:$Vi4}),o($Vj4,[2,143]),o($Vw3,[2,554]),o($Vw3,[2,557]),{378:[1,1694]},o($Vw3,[2,1132],{399:1695,397:1696,77:$VX5}),{134:$V_,197:1698},o($Vw3,[2,562]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1699,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vw3,[2,564]),o($Vw3,[2,566]),{2:$V1,3:114,4:$V2,5:$V3,77:[1,1701],113:256,114:181,115:$VY,116:$VZ,134:$V_,145:$V01,154:$V31,158:$VL,183:$V71,197:255,201:260,202:259,258:257,259:258,266:$VG1,275:1700,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,306:$Vr1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1702,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VK,[2,585]),o($VB2,[2,356]),o($VB2,[2,357]),o($VB2,[2,358]),o($VB2,[2,359]),o($VK,[2,589]),o($VK,[2,599]),o($VD3,[2,741]),o($VK,[2,496]),o($VK,[2,501],{359:1703,4:$VL5,244:$VM5,347:$VN5,360:$VO5}),o($VY5,[2,503]),o($VY5,[2,504]),{127:[1,1704]},{127:[1,1705]},{127:[1,1706]},{74:[1,1707],78:[2,512]},o($V65,[2,540]),o($V65,[2,515]),{189:[1,1715],194:[1,1716],366:1708,367:1709,368:1710,369:1711,370:1712,372:$Vz5,373:[1,1713],374:[1,1717],377:[1,1714]},{2:$V1,3:1718,4:$V2,5:$V3},{40:1719,79:75,89:$V7,186:99,190:$Vb},{419:[1,1720]},{420:[1,1721]},o($VK,[2,768]),o($VK,[2,770]),o($Vw4,[2,544]),o($VE1,[2,335]),{78:[1,1722]},o($VE1,[2,336]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,234:1723,236:1675,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,123:1724,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1389,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($VE1,[2,319]),o($VE1,[2,321]),o($VE1,[2,323]),{2:$V1,3:1725,4:$V2,5:$V3},o($VK,[2,727],{77:[1,1726]}),{2:$V1,3:1023,4:$V2,5:$V3,111:1077,145:$Vk4,147:$Vl4,149:1727,340:1076,341:1078},{339:$VG5,342:$VH5,464:1728},o($V75,[2,714]),{77:[1,1730],347:[1,1731],348:[1,1729]},{172:[1,1733],313:[1,1732]},{172:[1,1735],313:[1,1734]},{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,313:[1,1736],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($Vf4,[2,252],{88:1737,164:[1,1738],170:[1,1740],171:[1,1739]}),{134:$V_,197:1741},{134:$V_,197:1742},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1391,111:152,113:156,114:181,115:$VY,116:$VZ,123:1743,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,242:1389,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},o($Vm5,[2,250],{235:1744,74:$VZ5,240:[1,1746]}),o($V_5,[2,244]),{148:[1,1747]},{77:[1,1748]},{77:[1,1749]},o($V_5,[2,249],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{78:[2,1058],96:1750,99:[1,1752],102:1751},{99:[1,1753]},o($Vn5,[2,237],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:1023,4:$V2,5:$V3,100:1754,111:1455},o($VJ5,[2,212]),o($VJ5,[2,213]),o($VJ5,[2,1103]),o($VJ5,[2,215]),{2:$V1,3:1755,4:$V2,5:$V3,76:[1,1756]},o($VJ5,[2,220]),o($VJ5,[2,223]),{78:[1,1757]},{78:[1,1758]},o($Vs5,[2,268]),{2:$V1,3:249,4:$V2,5:$V3,200:1759},o($Vw3,[2,559]),o($Vw3,[2,1133]),{2:$V1,3:1760,4:$V2,5:$V3},{74:[1,1761]},{78:[1,1762],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($Vw3,[2,569]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1763,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{78:[1,1764],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($VY5,[2,502]),{2:$V1,3:1765,4:$V2,5:$V3},{134:$V_,197:1766},{2:$V1,3:1767,4:$V2,5:$V3},o($VP5,$VQ5,{365:1645,364:1768,371:$VR5}),o($VD3,[2,517]),o($VD3,[2,518]),o($VD3,[2,519]),o($VD3,[2,520]),o($VD3,[2,521]),{374:[1,1769]},{374:[1,1770]},o($V$5,[2,1126],{386:1771,374:[1,1772]}),{2:$V1,3:1773,4:$V2,5:$V3},{2:$V1,3:1774,4:$V2,5:$V3},o($VP5,[2,523]),o($VK,[2,1136],{415:1775,417:1776,72:$VD5}),o($VK,[2,617]),o($VK,[2,618],{371:[1,1777]}),o($VE1,[2,337]),o([78,121],[2,338],{74:$VZ5}),{74:$Vr5,78:[2,339]},o($VK,[2,726]),{2:$V1,3:1023,4:$V2,5:$V3,100:1778,111:1455},o($V75,[2,713],{74:$VT4}),o($V75,[2,711]),{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1779,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1023,4:$V2,5:$V3,100:1780,111:1455},{348:[1,1781]},{343:$VS5,465:1782},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1783,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{343:$VS5,465:1784},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1785,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{343:$VS5,465:1786},o($Vf4,[2,72]),{40:1787,79:75,89:$V7,166:[1,1788],186:99,190:$Vb,241:[1,1789]},{40:1790,79:75,89:$V7,186:99,190:$Vb,241:[1,1791]},{40:1792,79:75,89:$V7,186:99,190:$Vb,241:[1,1793]},o($VT5,[2,272],{247:1794,248:[1,1795]}),{249:1796,250:[2,1104],769:[1,1797]},o($VI5,[2,262],{74:$Vr5}),o($Vm5,[2,243]),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,236:1798,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1799,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{77:[1,1800]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,234:1801,236:1675,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,234:1802,236:1675,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{78:[1,1803]},{78:[2,1059]},{77:[1,1804]},{77:[1,1805]},{74:$V35,78:[1,1806]},o($VJ5,[2,216]),{2:$V1,3:1807,4:$V2,5:$V3},{2:$V1,3:1808,4:$V2,5:$V3,76:[1,1809]},{2:$V1,3:1810,4:$V2,5:$V3,76:[1,1811]},o($Vw3,[2,1130],{398:1812,397:1813,77:$VX5}),{78:[1,1814]},{134:$V_,197:1815},o($Vw3,[2,563]),{78:[1,1816],99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($Vw3,[2,524]),o($VY5,[2,505]),o($VY5,[2,506]),o($VY5,[2,507]),o($V65,[2,516]),{2:$V1,3:1818,4:$V2,5:$V3,77:[2,1122],375:1817},{77:[1,1819]},{2:$V1,3:1821,4:$V2,5:$V3,77:[2,1128],387:1820},o($V$5,[2,1127]),{77:[1,1822]},{77:[1,1823]},o($VK,[2,615]),o($VK,[2,1137]),o($VP5,$VQ5,{365:1645,364:1824,371:$VR5}),{74:$V35,78:[1,1825]},o($V75,[2,720],{74:$VJ4}),{74:$V35,78:[1,1826]},o($V75,[2,722]),o($V75,[2,715]),{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,313:[1,1827],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($V75,[2,718]),{99:$V$1,112:$V02,117:633,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,313:[1,1828],315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,331:645,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2},o($V75,[2,716]),o($Vf4,[2,253]),{40:1829,79:75,89:$V7,186:99,190:$Vb,241:[1,1830]},{40:1831,79:75,89:$V7,186:99,190:$Vb},o($Vf4,[2,255]),{40:1832,79:75,89:$V7,186:99,190:$Vb},o($Vf4,[2,256]),{40:1833,79:75,89:$V7,186:99,190:$Vb},o($VT5,[2,270]),{134:$V_,197:1834},{250:[1,1835]},{250:[2,1105]},o($V_5,[2,245]),o($Vm5,[2,251],{117:633,331:645,99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1679,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,234:1836,236:1675,237:$VU5,238:$VV5,239:$VW5,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{74:$VZ5,78:[1,1837]},{74:$VZ5,78:[1,1838]},o($VN4,[2,1060],{97:1839,104:1840,3:1842,2:$V1,4:$V2,5:$V3,76:$V06}),{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1845,103:1843,105:1844,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1023,4:$V2,5:$V3,100:1846,111:1455},o($Vn5,[2,238]),o($VJ5,[2,217]),o($Vn5,[2,175]),{2:$V1,3:1847,4:$V2,5:$V3},o($Vn5,[2,177]),{2:$V1,3:1848,4:$V2,5:$V3},o($Vw3,[2,558]),o($Vw3,[2,1131]),o($Vw3,[2,556]),{78:[1,1849]},o($Vw3,[2,570]),{77:[1,1850]},{77:[2,1123]},{2:$V1,3:1852,4:$V2,5:$V3,114:1853,115:$VY,116:$VZ,376:1851},{77:[1,1854]},{77:[2,1129]},{2:$V1,3:1023,4:$V2,5:$V3,100:1855,111:1455},{2:$V1,3:1023,4:$V2,5:$V3,100:1856,111:1455},o($VK,[2,619]),o($VK,[2,728]),{347:[1,1858],348:[1,1857]},{343:$VS5,465:1859},{339:$VG5,342:$VH5,464:1860},o($Vf4,[2,254]),{40:1861,79:75,89:$V7,186:99,190:$Vb},o($Vf4,[2,257]),o($Vf4,[2,259]),o($Vf4,[2,260]),o($VT5,[2,273]),{134:[2,1106],251:1862,648:[1,1863]},{74:$VZ5,78:[1,1864]},o($V_5,[2,247]),o($V_5,[2,248]),o($VN4,[2,74]),o($VN4,[2,1061]),{2:$V1,3:1865,4:$V2,5:$V3},o($VN4,[2,78]),{74:[1,1867],78:[1,1866]},o($V65,[2,80]),o($V65,[2,81],{117:633,331:645,76:[1,1868],99:$V$1,112:$V02,118:$V12,119:$V22,126:$V32,127:$Vz3,135:$V52,138:$V62,140:$V72,141:$V82,142:$V92,143:$Va2,144:$Vb2,156:$Vc2,172:$Vd2,173:$Ve2,181:$Vf2,182:$Vg2,315:$Vh2,316:$Vi2,317:$Vj2,319:$Vk2,320:$Vl2,321:$Vm2,322:$Vn2,323:$Vo2,324:$Vp2,325:$Vq2,326:$Vr2,327:$Vs2,328:$Vt2,329:$Vu2,330:$Vv2,334:$Vw2,335:$Vx2,336:$Vy2,337:$Vz2}),{74:$V35,78:[1,1869]},o($Vn5,[2,176]),o($Vn5,[2,178]),o($Vw3,[2,560]),{2:$V1,3:1852,4:$V2,5:$V3,114:1853,115:$VY,116:$VZ,376:1870},{74:$V16,78:[1,1871]},o($V65,[2,535]),o($V65,[2,536]),{2:$V1,3:1023,4:$V2,5:$V3,100:1873,111:1455},{74:$V35,78:[1,1874]},{74:$V35,78:[1,1875]},{77:$Vc4,145:$V01,146:991,147:$VF1,154:$V31,183:$V71,202:992,306:$Vr1,346:1876,423:193,424:$Vv1,428:$Vw1},{348:[1,1877]},o($V75,[2,717]),o($V75,[2,719]),o($Vf4,[2,258]),{134:$V_,197:1878},{134:[2,1107]},o($V_5,[2,246]),o($VN4,[2,77]),{78:[2,76]},{2:$V1,3:171,4:$V2,5:$V3,56:168,77:$VX,94:1845,105:1879,111:152,113:156,114:181,115:$VY,116:$VZ,134:$V_,139:$V$,145:$V01,146:164,147:$V11,151:$V21,154:$V31,156:$V41,158:$VL,160:170,181:$V51,182:$V61,183:$V71,197:154,201:150,202:158,203:159,255:153,256:149,257:151,258:155,259:157,260:160,261:161,262:162,263:165,264:166,266:$V81,267:$Vc,271:$V91,272:$Va1,274:$Vb1,281:$Vc1,282:$Vd1,283:$Ve1,284:$Vf1,285:$Vg1,286:$Vh1,287:$Vi1,288:$Vj1,289:$Vk1,291:$VM,292:$VN,293:$VO,294:$VP,295:$VQ,296:$VR,297:$VS,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1,303:$Vq1,306:$Vr1,307:$Vs1,316:$Vt1,321:$Vu1,423:193,424:$Vv1,428:$Vw1},{2:$V1,3:1880,4:$V2,5:$V3},{78:[1,1881]},{74:$V16,78:[1,1882]},{378:[1,1883]},{2:$V1,3:1884,4:$V2,5:$V3,114:1885,115:$VY,116:$VZ},{74:$V35,78:[1,1886]},o($VD3,[2,533]),o($VD3,[2,534]),o($V75,[2,721],{74:$VJ4}),o($V75,[2,723]),o($V26,[2,1108],{252:1887,769:[1,1888]}),o($V65,[2,79]),o($V65,[2,82]),o($VN4,[2,1062],{3:1842,101:1889,104:1890,2:$V1,4:$V2,5:$V3,76:$V06}),o($VD3,[2,525]),{2:$V1,3:249,4:$V2,5:$V3,200:1891},o($V65,[2,537]),o($V65,[2,538]),o($VD3,[2,532]),o($VT5,[2,1110],{253:1892,419:[1,1893]}),o($V26,[2,1109]),o($VN4,[2,75]),o($VN4,[2,1063]),o($V36,[2,1124],{379:1894,381:1895,77:[1,1896]}),o($VT5,[2,271]),o($VT5,[2,1111]),o($VD3,[2,528],{380:1897,382:1898,231:[1,1899]}),o($V36,[2,1125]),{2:$V1,3:1852,4:$V2,5:$V3,114:1853,115:$VY,116:$VZ,376:1900},o($VD3,[2,526]),{231:[1,1902],383:1901},{342:[1,1903]},{74:$V16,78:[1,1904]},o($VD3,[2,529]),{339:[1,1905]},{384:[1,1906]},o($V36,[2,527]),{384:[1,1907]},{385:[1,1908]},{385:[1,1909]},{231:[2,530]},o($VD3,[2,531])],
defaultActions: {105:[2,6],197:[2,340],198:[2,341],199:[2,342],200:[2,343],201:[2,344],202:[2,345],203:[2,346],204:[2,347],205:[2,348],214:[2,702],599:[2,1147],661:[2,1112],662:[2,1113],718:[2,703],788:[2,1080],789:[2,1081],936:[2,453],937:[2,454],938:[2,455],999:[2,704],1302:[2,1157],1390:[2,1067],1448:[2,1155],1558:[2,514],1751:[2,1059],1797:[2,1105],1818:[2,1123],1821:[2,1129],1863:[2,1107],1866:[2,76],1908:[2,530]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    position: lexer.showPosition(),
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// from https://www.postgresql.org/docs/current/static/sql-keywords-appendix.html
// JSON.stringify([].slice.call(document.querySelectorAll('tr')).filter(x => x.children.length == 5 && x.children[2].innerText == 'reserved').map(x => x.children[0].innerText))

var nonReserved = ["A","ABSENT","ABSOLUTE","ACCORDING","ACTION","ADA","ADD","ADMIN","AFTER","ALWAYS","ASC","ASSERTION","ASSIGNMENT","ATTRIBUTE","ATTRIBUTES","BASE64","BEFORE","BERNOULLI","BLOCKED","BOM","BREADTH","C","CASCADE","CATALOG","CATALOG_NAME","CHAIN","CHARACTERISTICS","CHARACTERS","CHARACTER_SET_CATALOG","CHARACTER_SET_NAME","CHARACTER_SET_SCHEMA","CLASS_ORIGIN","COBOL","COLLATION","COLLATION_CATALOG","COLLATION_NAME","COLLATION_SCHEMA","COLUMNS","COLUMN_NAME","COMMAND_FUNCTION","COMMAND_FUNCTION_CODE","COMMITTED","CONDITION_NUMBER","CONNECTION","CONNECTION_NAME","CONSTRAINTS","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONSTRUCTOR","CONTENT","CONTINUE","CONTROL","CURSOR_NAME","DATA","DATETIME_INTERVAL_CODE","DATETIME_INTERVAL_PRECISION","DB","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DEGREE","DEPTH","DERIVED","DESC","DESCRIPTOR","DIAGNOSTICS","DISPATCH","DOCUMENT","DOMAIN","DYNAMIC_FUNCTION","DYNAMIC_FUNCTION_CODE","EMPTY","ENCODING","ENFORCED","EXCLUDE","EXCLUDING","EXPRESSION","FILE","FINAL","FIRST","FLAG","FOLLOWING","FORTRAN","FOUND","FS","G","GENERAL","GENERATED","GO","GOTO","GRANTED","HEX","HIERARCHY","ID","IGNORE","IMMEDIATE","IMMEDIATELY","IMPLEMENTATION","INCLUDING","INCREMENT","INDENT","INITIALLY","INPUT","INSTANCE","INSTANTIABLE","INSTEAD","INTEGRITY","INVOKER","ISOLATION","K","KEY","KEY_MEMBER","KEY_TYPE","LAST","LENGTH","LEVEL","LIBRARY","LIMIT","LINK","LOCATION","LOCATOR","M","MAP","MAPPING","MATCHED","MAXVALUE","MESSAGE_LENGTH","MESSAGE_OCTET_LENGTH","MESSAGE_TEXT","MINVALUE","MORE","MUMPS","NAME","NAMES","NAMESPACE","NESTING","NEXT","NFC","NFD","NFKC","NFKD","NIL","NORMALIZED","NULLABLE","NULLS","NUMBER","OBJECT","OCTETS","OFF","OPTION","OPTIONS","ORDERING","ORDINALITY","OTHERS","OUTPUT","OVERRIDING","P","PAD","PARAMETER_MODE","PARAMETER_NAME","PARAMETER_ORDINAL_POSITION","PARAMETER_SPECIFIC_CATALOG","PARAMETER_SPECIFIC_NAME","PARAMETER_SPECIFIC_SCHEMA","PARTIAL","PASCAL","PASSING","PASSTHROUGH","PATH","PERMISSION","PLACING","PLI","PRECEDING","PRESERVE","PRIOR","PRIVILEGES","PUBLIC","READ","RECOVERY","RELATIVE","REPEATABLE","REQUIRING","RESPECT","RESTART","RESTORE","RESTRICT","RETURNED_CARDINALITY","RETURNED_LENGTH","RETURNED_OCTET_LENGTH","RETURNED_SQLSTATE","RETURNING","ROLE","ROUTINE","ROUTINE_CATALOG","ROUTINE_NAME","ROUTINE_SCHEMA","ROW_COUNT","SCALE","SCHEMA","SCHEMA_NAME","SCOPE_CATALOG","SCOPE_NAME","SCOPE_SCHEMA","SECTION","SECURITY","SELECTIVE","SELF","SEQUENCE","SERIALIZABLE","SERVER","SERVER_NAME","SESSION","SETS","SIMPLE","SIZE","SOURCE","SPACE","SPECIFIC_NAME","STANDALONE","STATE","STATEMENT","STRIP","STRUCTURE","STYLE","SUBCLASS_ORIGIN","T","TABLE_NAME","TEMPORARY","TIES","TOKEN","TOP_LEVEL_COUNT","TRANSACTION","TRANSACTIONS_COMMITTED","TRANSACTIONS_ROLLED_BACK","TRANSACTION_ACTIVE","TRANSFORM","TRANSFORMS","TRIGGER_CATALOG","TRIGGER_NAME","TRIGGER_SCHEMA","TYPE","UNBOUNDED","UNCOMMITTED","UNDER","UNLINK","UNNAMED","UNTYPED","URI","USAGE","USER_DEFINED_TYPE_CATALOG","USER_DEFINED_TYPE_CODE","USER_DEFINED_TYPE_NAME","USER_DEFINED_TYPE_SCHEMA","VALID","VERSION","VIEW","WHITESPACE","WORK","WRAPPER","WRITE","XMLDECLARATION","XMLSCHEMA","YES","ZONE"]

parser.parseError = function(str, hash) {
	if (hash.expected && hash.expected.indexOf("'LITERAL'") > -1 && /[a-zA-Z_][a-zA-Z_0-9]*/.test(hash.token) && nonReserved.indexOf(hash.token) > -1) {
		return
	}
	throw new SyntaxError(str)
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 267
break;
case 1:return 306
break;
case 2:return 424
break;
case 3:return 303
break;
case 4:return 5
break;
case 5:return 5
break;
case 6:return 300
break;
case 7:return 300
break;
case 8:return 115
break;
case 9:return 116
break;
case 10:return /* its a COMMENT */
break;
case 11:/* skip whitespace */
break;
case 12:return 320
break;
case 13:return 323
break;
case 14:yy_.yytext = 'VALUE';return 89
break;
case 15:yy_.yytext = 'VALUE';return 190
break;
case 16:yy_.yytext = 'ROW';return 190
break;
case 17:yy_.yytext = 'COLUMN';return 190
break;
case 18:yy_.yytext = 'MATRIX';return 190
break;
case 19:yy_.yytext = 'INDEX';return 190
break;
case 20:yy_.yytext = 'RECORDSET';return 190
break;
case 21:yy_.yytext = 'TEXT';return 190
break;
case 22:yy_.yytext = 'SELECT';return 190
break;
case 23:return 523
break;
case 24:return 385
break;
case 25:return 406
break;
case 26:return 518
break;
case 27:return 288
break;
case 28:return 270
break;
case 29:return 270
break;
case 30:return 166
break;
case 31:return 404
break;
case 32:return 172
break;
case 33:return 230
break;
case 34:return 168
break;
case 35:return 208
break;
case 36:return 289
break;
case 37:return 76
break;
case 38:return 422
break;
case 39:return 243
break;
case 40:return 408
break;
case 41:return 360
break;
case 42:return 285
break;
case 43:return 517
break;
case 44:return 441
break;
case 45:return 334
break;
case 46:return 445
break;
case 47:return 335
break;
case 48:return 319
break;
case 49:return 122
break;
case 50:return 112
break;
case 51:return 319
break;
case 52:return 112
break;
case 53:return 319
break;
case 54:return 112
break;
case 55:return 319
break;
case 56:return 511
break;
case 57:return 307
break;
case 58:return 272
break;
case 59:return 372
break;
case 60:return 133
break;
case 61:return 'CLOSE'
break;
case 62:return 244
break;
case 63:return 191
break;
case 64:return 191
break;
case 65:return 438
break;
case 66:return 371
break;
case 67:return 473
break;
case 68:return 444
break;
case 69:return 274
break;
case 70:return 241
break;
case 71:return 282
break;
case 72:return 268
break;
case 73:return 207
break;
case 74:return 239
break;
case 75:return 266
break;
case 76:return 'CURSOR'
break;
case 77:return 409
break;
case 78:return 295
break;
case 79:return 296
break;
case 80:return 452
break;
case 81:return 347
break;
case 82:return 342
break;
case 83:return 'DELETED'
break;
case 84:return 243
break;
case 85:return 410
break;
case 86:return 187
break;
case 87:return 400
break;
case 88:return 451
break;
case 89:return 137
break;
case 90:return 310
break;
case 91:return 393
break;
case 92:return 314
break;
case 93:return 318
break;
case 94:return 171
break;
case 95:return 511
break;
case 96:return 511
break;
case 97:return 302
break;
case 98:return 14
break;
case 99:return 299
break;
case 100:return 250
break;
case 101:return 286
break;
case 102:return 95
break;
case 103:return 377
break;
case 104:return 185
break;
case 105:return 228
break;
case 106:return 269
break;
case 107:return 317
break;
case 108:return 605
break;
case 109:return 475
break;
case 110:return 233
break;
case 111:return 237
break;
case 112:return 240
break;
case 113:return 158
break;
case 114:return 360
break;
case 115:return 336
break;
case 116:return 99
break;
case 117:return 194
break;
case 118:return 213
break;
case 119:return 225
break;
case 120:return 519
break;
case 121:return 343
break;
case 122:return 214
break;
case 123:return 170
break;
case 124:return 297
break;
case 125:return 199
break;
case 126:return 224
break;
case 127:return 374
break;
case 128:return 287
break;
case 129:return 'LET'
break;
case 130:return 112
break;
case 131:return 246
break;
case 132:return 463
break;
case 133:return 192
break;
case 134:return 292
break;
case 135:return 293
break;
case 136:return 227
break;
case 137:return 226
break;
case 138:return 284
break;
case 139:return 394
break;
case 140:return 283
break;
case 141:return 455
break;
case 142:return 171
break;
case 143:return 407
break;
case 144:return 223
break;
case 145:return 648
break;
case 146:return 271
break;
case 147:return 245
break;
case 148:return 384
break;
case 149:return 156
break;
case 150:return 301
break;
case 151:return 437
break;
case 152:return 231
break;
case 153:return 419
break;
case 154:return 132
break;
case 155:return 248
break;
case 156:return 'OPEN'
break;
case 157:return 420
break;
case 158:return 173
break;
case 159:return 121
break;
case 160:return 209
break;
case 161:return 277
break;
case 162:return 174
break;
case 163:return 280
break;
case 164:return 768
break;
case 165:return 93
break;
case 166:return 16
break;
case 167:return 373
break;
case 168:return 446
break;
case 169:return 681
break;
case 170:return 15
break;
case 171:return 418
break;
case 172:return 195
break;
case 173:return 'REDUCE'
break;
case 174:return 378
break;
case 175:return 315
break;
case 176:return 520
break;
case 177:return 685
break;
case 178:return 107
break;
case 179:return 405
break;
case 180:return 177
break;
case 181:return 294
break;
case 182:return 447
break;
case 183:return 690
break;
case 184:return 175
break;
case 185:return 175
break;
case 186:return 440
break;
case 187:return 238
break;
case 188:return 152
break;
case 189:return 769
break;
case 190:return 409
break;
case 191:return 89
break;
case 192:return 229
break;
case 193:return 148
break;
case 194:return 148
break;
case 195:return 413
break;
case 196:return 338
break;
case 197:return 421
break;
case 198:return 'STRATEGY'
break;
case 199:return 'STORE'
break;
case 200:return 281
break;
case 201:return 357
break;
case 202:return 357
break;
case 203:return 466
break;
case 204:return 361
break;
case 205:return 361
break;
case 206:return 193
break;
case 207:return 313
break;
case 208:return 'TIMEOUT'
break;
case 209:return 150
break;
case 210:return 196
break;
case 211:return 439
break;
case 212:return 439
break;
case 213:return 512
break;
case 214:return 298
break;
case 215:return 291
break;
case 216:return 164
break;
case 217:return 189
break;
case 218:return 98
break;
case 219:return 339
break;
case 220:return 412
break;
case 221:return 232
break;
case 222:return 151
break;
case 223:return 348
break;
case 224:return 136
break;
case 225:return 414
break;
case 226:return 312
break;
case 227:return 131
break;
case 228:return 443
break;
case 229:return 72
break;
case 230:return 439  /* Is this keyword required? */
break;
case 231:return 134
break;
case 232:return 134
break;
case 233:return 118
break;
case 234:return 139
break;
case 235:return 181
break;
case 236:return 321
break;
case 237:return 182
break;
case 238:return 135
break;
case 239:return 140
break;
case 240:return 330
break;
case 241:return 327
break;
case 242:return 329
break;
case 243:return 326
break;
case 244:return 324
break;
case 245:return 322
break;
case 246:return 323
break;
case 247:return 144
break;
case 248:return 143
break;
case 249:return 141
break;
case 250:return 325
break;
case 251:return 328
break;
case 252:return 142
break;
case 253:return 127
break;
case 254:return 328
break;
case 255:return 77
break;
case 256:return 78
break;
case 257:return 147
break;
case 258:return 428
break;
case 259:return 430
break;
case 260:return 304
break;
case 261:return 508
break;
case 262:return 510
break;
case 263:return 125
break;
case 264:return 119
break;
case 265:return 74
break;
case 266:return 337
break;
case 267:return 154
break;
case 268:return 767
break;
case 269:return 145
break;
case 270:return 183
break;
case 271:return 138
break;
case 272:return 126
break;
case 273:return 316
break;
case 274:return 4
break;
case 275:return 10
break;
case 276:return 'INVALID'
break;
}
},
rules: [/^(?:``([^\`])+``)/i,/^(?:\[\?\])/i,/^(?:@\[)/i,/^(?:ARRAY\[)/i,/^(?:\[([^\]])*?\])/i,/^(?:`([^\`])*?`)/i,/^(?:N(['](\\.|[^']|\\')*?['])+)/i,/^(?:X(['](\\.|[^']|\\')*?['])+)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:\|\|)/i,/^(?:\|)/i,/^(?:VALUE\s+OF\s+SEARCH\b)/i,/^(?:VALUE\s+OF\s+SELECT\b)/i,/^(?:ROW\s+OF\s+SELECT\b)/i,/^(?:COLUMN\s+OF\s+SELECT\b)/i,/^(?:MATRIX\s+OF\s+SELECT\b)/i,/^(?:INDEX\s+OF\s+SELECT\b)/i,/^(?:RECORDSET\s+OF\s+SELECT\b)/i,/^(?:TEXT\s+OF\s+SELECT\b)/i,/^(?:SELECT\b)/i,/^(?:ABSOLUTE\b)/i,/^(?:ACTION\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:AGGR\b)/i,/^(?:AGGREGATE\b)/i,/^(?:AGGREGATOR\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:APPLY\b)/i,/^(?:ARRAY\b)/i,/^(?:AS\b)/i,/^(?:ASSERT\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:AUTO(_)?INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BREAK\b)/i,/^(?:NOT\s+BETWEEN\b)/i,/^(?:NOT\s+LIKE\b)/i,/^(?:BY\b)/i,/^(?:~~\*)/i,/^(?:!~~\*)/i,/^(?:~~)/i,/^(?:!~~)/i,/^(?:ILIKE\b)/i,/^(?:NOT\s+ILIKE\b)/i,/^(?:CALL\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:CLASS\b)/i,/^(?:CLOSE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONTENT\b)/i,/^(?:CONTINUE\b)/i,/^(?:CONVERT\b)/i,/^(?:CORRESPONDING\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:CURSOR\b)/i,/^(?:DATABASE(S)?)/i,/^(?:DATEADD\b)/i,/^(?:DATEDIFF\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DELETED\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:ECHO\b)/i,/^(?:EDGE\b)/i,/^(?:END\b)/i,/^(?:ENUM\b)/i,/^(?:ELSE\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXEC\b)/i,/^(?:EXECUTE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FETCH\b)/i,/^(?:FIRST\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:FUNCTION\b)/i,/^(?:GLOB\b)/i,/^(?:GO\b)/i,/^(?:GRAPH\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INNER\b)/i,/^(?:INSTEAD\b)/i,/^(?:INSERT\b)/i,/^(?:INSERTED\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTERVAL\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LET\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCHED\b)/i,/^(?:MATRIX\b)/i,/^(?:RIGHT(\s+)?\()/i,/^(?:LEFT(\s+)?\()/i,/^(?:RIGHT\b)/i,/^(?:LEFT\b)/i,/^(?:MAX(\s+)?(?=\())/i,/^(?:MAX(\s+)?(?=(,|\))))/i,/^(?:MIN(\s+)?(?=\())/i,/^(?:MERGE\b)/i,/^(?:MINUS\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NEXT\b)/i,/^(?:NEW\b)/i,/^(?:NOCASE\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:OFF\b)/i,/^(?:ON\b)/i,/^(?:ONLY\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:OVER\b)/i,/^(?:PATH\b)/i,/^(?:PARTITION\b)/i,/^(?:PERCENT\b)/i,/^(?:PIVOT\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRINT\b)/i,/^(?:PRIOR\b)/i,/^(?:QUERY\b)/i,/^(?:READ\b)/i,/^(?:RECORDSET\b)/i,/^(?:REDUCE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELATIVE\b)/i,/^(?:REMOVE\b)/i,/^(?:RENAME\b)/i,/^(?:REPEAT\b)/i,/^(?:REPLACE\b)/i,/^(?:REQUIRE\b)/i,/^(?:RESTORE\b)/i,/^(?:RETURN\b)/i,/^(?:RETURNS\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROW\b)/i,/^(?:ROWS\b)/i,/^(?:SCHEMA(S)?)/i,/^(?:SEARCH\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:SOURCE\b)/i,/^(?:STRATEGY\b)/i,/^(?:STORE\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:TARGET\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:TEXTSTRING\b)/i,/^(?:THEN\b)/i,/^(?:TIMEOUT\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRIGGER\b)/i,/^(?:TRUE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UNPIVOT\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUE\b)/i,/^(?:VALUES\b)/i,/^(?:VERTEX\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WHILE\b)/i,/^(?:WITH\b)/i,/^(?:WORK\b)/i,/^(?:(\d*[.])?\d+[eE]\d+)/i,/^(?:(\d*[.])?\d+)/i,/^(?:->)/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:@)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\])/i,/^(?::-)/i,/^(?:\?-)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:~)/i,/^(?:[\u4E00-\u9FA5A-Za-z_][\u4E00-\u9FA5A-Za-z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = alasqlparser;
exports.Parser = alasqlparser.Parser;
exports.parse = function () { return alasqlparser.parse.apply(alasqlparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/**
   12prettyflag.js - prettify
   @todo move this functionality to plugin
*/

/**
 	Pretty flag - nice HTML output or standard text without any tags
	@type {boolean}
*/

alasql.prettyflag = false;

/**
	Pretty output of SQL functions
	@function
	@param {string} sql SQL statement
	@param {boolean} flag value
	@return {string} HTML or text string with pretty output 
*/

alasql.pretty = function(sql, flag) {
	var pf = alasql.prettyflag;
	alasql.prettyflag = !flag;
	var s = alasql.parse(sql).toString();
	alasql.prettyflag = pf;
	return s;
};

/*jshint unused:false*/
/*
    Utilities for Alasql.js

    @todo Review the list of utilities
    @todo Find more effective utilities
*/

/**
 Alasql utility functions
 @type {object}
 */
var utils = (alasql.utils = {});

/**
 Convert NaN to undefined
 @function
 @param {string} s JavaScript string to be modified
 @return {string} Covered expression

 @example

 123         => 123
 undefined   => undefined
 NaN         => undefined

 */
function n2u(s) {
	return '(y=' + s + ',y===y?y:undefined)';
}

/**
 Return undefined if s undefined
 @param {string} s JavaScript string to be modified
 @return {string} Covered expression

 @example

 123,a       => a
 undefined,a => undefined
 NaN,a       => undefined

 */
function und(s, r) {
	return '(y=' + s + ',typeof y=="undefined"?undefined:' + r + ')';
}

/**
 Return always true. Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()
 @function
 @return {boolean} Always true
 */
function returnTrue() {
	return true;
}

/**
 Return undefined. Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()
 @function
 @return {undefined} Always undefined
 */
function returnUndefined() {}

/**
 Escape string
 @function
 @param {string} s Source string
 @return {string} Escaped string
 @example

 Pit\er's => Pit\\er\'s

 */
// based on joliss/js-string-escape
var escapeq = (utils.escapeq = function(s) {

	return ('' + s).replace(/["'\\\n\r\u2028\u2029]/g, function(character) {
		// Escape all characters not included in SingleStringCharacters and
		// DoubleStringCharacters on
		// http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4
		switch (character) {
			case '"':
			case "'":
			case '\\':
				return '\\' + character;
			// Four possible LineTerminator characters need to be escaped:
			case '\n':
				return '\\n';
			case '\r':
				return '\\r';
			case '\u2028':
				return '\\u2028';
			case '\u2029':
				return '\\u2029';
		}
	});
});

/**
 Double quotes for SQL statements
 @param {string} s Source string
 @return {string} Escaped string

 @example

 Piter's => Piter''s

 */
var escapeqq = (utils.undoubleq = function(s) {
	return s.replace(/(\')/g, "''");
});

/**
 Replace double quotes with single quote
 @param {string} s Source string
 @return {string} Replaced string
 @example

 Piter''s => Piter's

 */
var doubleq = (utils.doubleq = function(s) {
	return s.replace(/(\'\')/g, "\\'");
});

/**
 Replace sigle quote to escaped single quote
 @param {string} s Source string
 @return {string} Replaced string

 @todo Chack this functions

 */
var doubleqq = (utils.doubleqq = function(s) {
	return s.replace(/\'/g, "'");
});

/**
 Cut BOM first character for UTF-8 files (for merging two files)
 @param {string} s Source string
 @return {string} Replaced string
 */

var cutbom = function(s) {
	if (s[0] === String.fromCharCode(65279)) {
		s = s.substr(1);
	}
	return s;
};

/**
 Get the global scope
 Inspired by System.global
 @return {object} The global scope
 */
utils.global = (function() {
	if (typeof self !== 'undefined') {
		return self;
	}
	if (typeof window !== 'undefined') {
		return window;
	}
	if (typeof global !== 'undefined') {
		return global;
	}
	return Function('return this')();
})();

/**
 Find out if a function is native to the enviroment
 @param {function} Function to check
 @return {boolean} True if function is native
 */
var isNativeFunction = (utils.isNativeFunction = function(fn) {
	return typeof fn === 'function' && !!~fn.toString().indexOf('[native code]');
});

/**
 Find out if code is running in a web worker enviroment
 @return {boolean} True if code is running in a web worker enviroment
 */
utils.isWebWorker = (function() {
	try {
		var importScripts = utils.global.importScripts;
		return utils.isNativeFunction(importScripts);
	} catch (e) {
		return false;
	}
})();

/**
 Find out if code is running in a node enviroment
 @return {boolean} True if code is running in a node enviroment
 */
utils.isNode = (function() {
	try {
		return utils.isNativeFunction(utils.global.process.reallyExit);
	} catch (e) {
		return false;
	}
})();

/**
 Find out if code is running in a browser enviroment
 @return {boolean} True if code is running in a browser enviroment
 */
utils.isBrowser = (function() {
	try {
		return utils.isNativeFunction(utils.global.location.reload);
	} catch (e) {
		return false;
	}
})();

/**
 Find out if code is running in a browser with a browserify setup
 @return {boolean} True if code is running in a browser with a browserify setup
 */
utils.isBrowserify = (function() {
	return utils.isBrowser && typeof process !== 'undefined' && process.browser;
})();

/**
 Find out if code is running in a browser with a requireJS setup
 @return {boolean} True if code is running in a browser with a requireJS setup
 */
utils.isRequireJS = (function() {
	return (
		utils.isBrowser && typeof require === 'function' && typeof require.specified === 'function'
	);
})();

/**
 Find out if code is running with Meteor in the enviroment
 @return {boolean} True if code is running with Meteor in the enviroment

 @todo Find out if this is the best way to do this
 */
utils.isMeteor = (function() {
	return typeof Meteor !== 'undefined' && Meteor.release;
})();

/**
 Find out if code is running on a Meteor client
 @return {boolean} True if code is running on a Meteor client
 */
utils.isMeteorClient = utils.isMeteorClient = (function() {
	return utils.isMeteor && Meteor.isClient;
})();

/**
 Find out if code is running on a Meteor server
 @return {boolean} True if code is running on a Meteor server
 */
utils.isMeteorServer = (function() {
	return utils.isMeteor && Meteor.isServer;
})();

/**
 Find out code is running in a cordovar enviroment
 @return {boolean} True if code is running in a web worker enviroment

 @todo Find out if this is the best way to do this
 */
utils.isCordova = (function() {
	return typeof cordova === 'object';
})();

utils.isReactNative = (function() {
	var isReact = false;
	//*not-for-browser/*
	try {
		if (typeof require('react-native') === 'object') {
			isReact = true;
		}
	} catch (e) {
		void 0;
	}
	//*/
	return isReact;
})();

utils.hasIndexedDB = (function() {
	return !!utils.global.indexedDB;
})();

utils.isArray = function(obj) {
	return '[object Array]' === Object.prototype.toString.call(obj);
};
/**
 Load text file from anywhere
 @param {string|object} path File path or HTML event
 @param {boolean} asy True - async call, false - sync call
 @param {function} success Success function
 @param {function} error Error function
 @return {string} Read data

 @todo Define Event type
 @todo Smaller if-else structures.
 */
var loadFile = (utils.loadFile = function(path, asy, success, error) {
	var data, fs;
	if (utils.isNode || utils.isMeteorServer) {
		//*not-for-browser/*
		fs = require('fs');

		// If path is empty, than read data from stdin (for Node)
		if (typeof path === 'undefined') {
			var buff = '';
			process.stdin.setEncoding('utf8');
			process.stdin.on('readable', function() {
				var chunk = process.stdin.read();
				if (chunk !== null) {
					buff += chunk.toString();
				}
			});
			process.stdin.on('end', function() {
				success(cutbom(buff));
			});
		} else {
			if (/^[a-z]+:\/\//i.test(path)) {
				var request = require('request');
				request(path, function(err, response, body) {
					if (err) {
						return error(err, null);
					}
					success(cutbom(body.toString()));
				});
			} else {
				//If async callthen call async
				if (asy) {
					fs.readFile(path, function(err, data) {
						if (err) {
							return error(err, null);
						}
						success(cutbom(data.toString()));
					});
				} else {
					// Call sync version
					try {
						data = fs.readFileSync(path);
					} catch (e) {
						return error(err, null);
					}
					success(cutbom(data.toString()));
				}
			}
		}
	} else if (utils.isReactNative) {
		// If ReactNative
		var RNFS = require('react-native-fs');
		RNFS.readFile(path, 'utf8')
			.then(function(contents) {
				success(cutbom(contents));
			})
			.catch(function(err) {
				return error(err, null);
			});
		//*/
	} else if (utils.isCordova) {
		/* If Cordova */
		utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			fileSystem.root.getFile(path, {create: false}, function(fileEntry) {
				fileEntry.file(function(file) {
					var fileReader = new FileReader();
					fileReader.onloadend = function(e) {
						success(cutbom(this.result));
					};
					fileReader.readAsText(file);
				});
			});
		});

		/** @todo Check eliminated code below */

	} else {
		/* For string */
		if (typeof path === 'string') {
			// For browser read from tag
			/*
                SELECT * FROM TXT('#one') -- read data from HTML element with id="one"
            */
			if (path.substr(0, 1) === '#' && typeof document !== 'undefined') {
				data = document.querySelector(path).textContent;
				success(data);
			} else {
				/*
                    Simply read file from HTTP request, like:
                    SELECT * FROM TXT('http://alasql.org/README.md');
                */
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if (xhr.readyState === 4) {
						if (xhr.status === 200) {
							if (success) {
								success(cutbom(xhr.responseText));
							}
						} else if (error) {
							return error(xhr);
						}
						// Todo: else...?
					}
				};
				xhr.open('GET', path, asy); // Async
				xhr.responseType = 'text';
				xhr.send();
			}
		} else if (path instanceof Event) {
			/*
                For browser read from files input element
                <input type="files" onchange="readFile(event)">
                <script>
                    function readFile(event) {
                        alasql('SELECT * FROM TXT(?)',[event])
                    }
                </script>
            */
			/** @type {array} List of files from <input> element */
			var files = path.target.files;
			/** type {object} */
			var reader = new FileReader();
			/** type {string} */
			var name = files[0].name;
			reader.onload = function(e) {
				var data = e.target.result;
				success(cutbom(data));
			};
			reader.readAsText(files[0]);
		}
	}
});

/**
 @function Load binary file from anywhere
 @param {string} path File path
 @param {boolean} asy True - async call, false - sync call
 @param {function} success Success function
 @param {function} error Error function
 @return 1 for Async, data - for sync version

 @todo merge functionality from loadFile and LoadBinaryFile
 */

var loadBinaryFile = (utils.loadBinaryFile = function(path, asy, success, error) {
	var fs;
	if (utils.isNode || utils.isMeteorServer) {
		//*not-for-browser/*
		fs = require('fs');

		if (/^[a-z]+:\/\//i.test(path)) {
			var request = require('request');
			request({url: path, encoding: null}, function(err, response, data) {
				if (err) {
					throw err;
				}
				var arr = [];
				for (var i = 0; i < data.length; ++i) {
					arr[i] = String.fromCharCode(data[i]);
				}
				success(arr.join(''));
			});
		} else {
			if (asy) {
				fs.readFile(path, function(err, data) {
					if (err) {
						throw err;
					}
					var arr = [];
					for (var i = 0; i < data.length; ++i) {
						arr[i] = String.fromCharCode(data[i]);
					}
					success(arr.join(''));
				});
			} else {
				var data = fs.readFileSync(path);
				var arr = [];
				for (var i = 0; i < data.length; ++i) {
					arr[i] = String.fromCharCode(data[i]);
				}
				success(arr.join(''));
			}
		}
	} else if (utils.isReactNative) {
		// If ReactNative
		//var RNFS = require('react-native-fs');
		var RNFetchBlob = require('react-native-fetch-blob').default;
		var dirs = RNFetchBlob.fs.dirs;
		//should use readStream instead if the file is large
		RNFetchBlob.fs.readFile(path, 'base64').then(function(data) {
			//RNFetchBlob.base64.decode(data) //need more test on excel
			success(data);
		});
		//*/
	} else {
		if (typeof path === 'string') {
			// For browser
			var xhr = new XMLHttpRequest();
			xhr.open('GET', path, asy); // Async
			xhr.responseType = 'arraybuffer';
			xhr.onload = function() {
				var data = new Uint8Array(xhr.response);
				var arr = [];
				for (var i = 0; i < data.length; ++i) {
					arr[i] = String.fromCharCode(data[i]);
				}
				success(arr.join(''));
			};
			// xhr.responseType = "blob";
			xhr.send();
		} else if (path instanceof Event) {

			var files = path.target.files;
			var reader = new FileReader();
			var name = files[0].name;
			reader.onload = function(e) {
				var data = e.target.result;
				success(data);
			};
			reader.readAsArrayBuffer(files[0]);
		} else if (path instanceof Blob) {
			success(path);
		}
	}
});

var removeFile = (utils.removeFile = function(path, cb) {
	if (utils.isNode) {
		//*not-for-browser/*
		var fs = require('fs');
		fs.remove(path, cb);
	} else if (utils.isCordova) {
		utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			fileSystem.root.getFile(
				path,
				{create: false},
				function(fileEntry) {
					fileEntry.remove(cb);
					cb && cb(); // jshint ignore:line
				},
				function() {
					cb && cb(); // jshint ignore:line
				}
			);
		});
	} else if (utils.isReactNative) {
		// If ReactNative
		var RNFS = require('react-native-fs');
		RNFS.unlink(path)
			.then(function() {
				cb && cb();
			})
			.catch(function(err) {
				throw err;
			});
		//*/
	} else {
		throw new Error('You can remove files only in Node.js and Apache Cordova');
	}
});

// Todo: check if it makes sense to support cordova and Meteor server
var deleteFile = (utils.deleteFile = function(path, cb) {
	//*not-for-browser/*
	if (utils.isNode) {
		var fs = require('fs');
		fs.unlink(path, cb);
	} else if (utils.isReactNative) {
		// If ReactNative
		var RNFS = require('react-native-fs');
		RNFS.unlink(path)
			.then(function() {
				cb && cb();
			})
			.catch(function(err) {
				throw err;
			});
	}
	//*/
});

utils.autoExtFilename = function(filename, ext, config) {
	config = config || {};
	if (
		typeof filename !== 'string' ||
		filename.match(/^[A-z]+:\/\/|\n|\..{2,4}$/) ||
		config.autoExt === 0 ||
		config.autoExt === false
	) {
		return filename;
	}
	return filename + '.' + ext;
};

var fileExists = (utils.fileExists = function(path, cb) {
	if (utils.isNode) {
		//*not-for-browser/*
		var fs = require('fs');
		fs.exists(path, cb);
	} else if (utils.isCordova) {
		utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
			fileSystem.root.getFile(
				path,
				{create: false},
				function(fileEntry) {
					cb(true);
				},
				function() {
					cb(false);
				}
			);
		});
	} else if (utils.isReactNative) {
		// If ReactNative
		var RNFS = require('react-native-fs');
		RNFS.exists(path)
			.then(function(yes) {
				cb && cb(yes);
			})
			.catch(function(err) {
				throw err;
			});
		//*/
	} else {
		// TODO Cordova, etc.
		throw new Error('You can use exists() only in Node.js or Apach Cordova');
	}
});

/**
 Save text file from anywhere
 @param {string} path File path
 @param {array} data Data object
 @param {function} cb Callback
 @param {object=} opts
 */

var saveFile = (utils.saveFile = function(path, data, cb, opts) {
	var res = 1;
	if (path === undefined) {
		//
		// Return data into result variable
		// like: alasql('SELECT * INTO TXT() FROM ?',[data]);
		//
		res = data;
		if (cb) {
			res = cb(res);
		}
	} else {
		if (utils.isNode) {
			//*not-for-browser/*
			var fs = require('fs');
			data = fs.writeFileSync(path, data);
			if (cb) {
				res = cb(res);
			}
		} else if (utils.isReactNative) {
			var RNFS = require('react-native-fs');
			RNFS.writeFile(path, data)
				.then(function(success) {
					//, 'utf8'
					if (cb) res = cb(res);
				})
				.catch(function(err) {
					console.error(err.message);
				});
		} else if (utils.isCordova) {
			utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
				//                alasql.utils.removeFile(path,function(){
				fileSystem.root.getFile(path, {create: true}, function(fileEntry) {
					fileEntry.createWriter(function(fileWriter) {
						fileWriter.onwriteend = function() {
							if (cb) {
								res = cb(res);
							}
						};
						fileWriter.write(data);
					});
				});
			});
			//*/

			//                     });
			//                });
			//            });
		} else {
			if (isIE() === 9) {
				// Solution was taken from
				// http://megatuto.com/formation-JAVASCRIPT.php?JAVASCRIPT_Example=Javascript+Save+CSV+file+in+IE+8/IE+9+without+using+window.open()+Categorie+javascript+internet-explorer-8&category=&article=7993
				//				var URI = 'data:text/plain;charset=utf-8,';

				// Prepare data
				var ndata = data.replace(/\r\n/g, '&#A;&#D;');
				ndata = ndata.replace(/\n/g, '&#D;');
				ndata = ndata.replace(/\t/g, '&#9;');
				var testlink = utils.global.open('about:blank', '_blank');
				testlink.document.write(ndata); //fileData has contents for the file
				testlink.document.close();
				testlink.document.execCommand('SaveAs', false, path);
				testlink.close();
			} else {
				var opt = {
					disableAutoBom: false,
				};
				alasql.utils.extend(opt, opts);
				var blob = new Blob([data], {type: 'text/plain;charset=utf-8'});
				saveAs(blob, path, opt.disableAutoBom);
				if (cb) {
					res = cb(res);
				}
			}
		}
	}

	return res;
});

/**
 @function Is this IE9
 @return {boolean} True for IE9 and false for other browsers

 For IE9 compatibility issues
 */
function isIE() {
	var myNav = navigator.userAgent.toLowerCase();
	return myNav.indexOf('msie') !== -1 ? parseInt(myNav.split('msie')[1]) : false;
}

/**
 @function Hash a string to signed integer
 @param {string} source string
 @return {integer} hash number
 */

// FNV-1a inspired hashing
var hash = (utils.hash = function(str) {
	var hash = 0x811c9dc5,
		i = str.length;
	while (i) {
		hash ^= str.charCodeAt(--i);
		hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
	}
	return hash;
});

/**
 Union arrays
 @function
 @param {array} a
 @param {array} b
 @return {array}
 */
var arrayUnion = (utils.arrayUnion = function(a, b) {
	var r = b.slice(0);
	a.forEach(function(i) {
		if (r.indexOf(i) < 0) {
			r.push(i);
		}
	});
	return r;
});

/**
 Array Difference
 */
var arrayDiff = (utils.arrayDiff = function(a, b) {
	return a.filter(function(i) {
		return b.indexOf(i) < 0;
	});
});

/**
 Arrays deep intersect (with records)
 */
var arrayIntersect = (utils.arrayIntersect = function(a, b) {
	var r = [];
	a.forEach(function(ai) {
		var found = false;

		b.forEach(function(bi) {
			found = found || ai === bi;
		});

		if (found) {
			r.push(ai);
		}
	});
	return r;
});

/**
 Arrays deep union (with records)
 */
var arrayUnionDeep = (utils.arrayUnionDeep = function(a, b) {
	var r = b.slice(0);
	a.forEach(function(ai) {
		var found = false;

		r.forEach(function(ri) {
			//            found = found || equalDeep(ai, ri, true);
			found = found || deepEqual(ai, ri);
		});

		if (!found) {
			r.push(ai);
		}
	});
	return r;
});

/**
 Arrays deep union (with records)
 */
var arrayExceptDeep = (utils.arrayExceptDeep = function(a, b) {
	var r = [];
	a.forEach(function(ai) {
		var found = false;

		b.forEach(function(bi) {
			//            found = found || equalDeep(ai, bi, true);
			found = found || deepEqual(ai, bi);
		});

		if (!found) {
			r.push(ai);
		}
	});
	return r;
});

/**
 Arrays deep intersect (with records)
 */
var arrayIntersectDeep = (utils.arrayIntersectDeep = function(a, b) {
	var r = [];
	a.forEach(function(ai) {
		var found = false;

		b.forEach(function(bi) {
			//            found = found || equalDeep(ai, bi, true);
			found = found || deepEqual(ai, bi, true);
		});

		if (found) {
			r.push(ai);
		}
	});
	return r;
});

/**
 Deep clone objects
 */
var cloneDeep = (utils.cloneDeep = function cloneDeep(obj) {
	if (null === obj || typeof obj !== 'object') {
		return obj;
	}

	if (obj instanceof Date) {
		return new Date(obj);
	}

	var temp = obj.constructor(); // changed

	for (var key in obj) {
		if (obj.hasOwnProperty(key)) {
			temp[key] = cloneDeep(obj[key]);
		}
	}
	return temp;
});

/**
 Check equality of objects
 */

/**
 Compare two objects in deep
 */
var deepEqual = (utils.deepEqual = function(x, y) {
	if (x === y) {
		return true;
	}

	if (typeof x === 'object' && null !== x && (typeof y === 'object' && null !== y)) {
		if (Object.keys(x).length !== Object.keys(y).length) {
			return false;
		}
		for (var prop in x) {
			if (!deepEqual(x[prop], y[prop])) {
				return false;
			}
		}
		return true;
	}

	return false;
});
/**
 Array with distinct records
 @param {array} data
 @return {array}
 */
var distinctArray = (utils.distinctArray = function(data) {
	var uniq = {};
	// TODO: Speedup, because Object.keys is slow
	for (var i = 0, ilen = data.length; i < ilen; i++) {
		var uix;
		if (typeof data[i] === 'object') {
			uix = Object.keys(data[i])
				.sort()
				.map(function(k) {
					return k + '`' + data[i][k];
				})
				.join('`');
		} else {
			uix = data[i];
		}
		uniq[uix] = data[i];
	}
	var res = [];
	for (var key in uniq) {
		res.push(uniq[key]);
	}
	return res;
});

/**
 Extend object a with properties of b
 @function
 @param {object} a
 @param {object} b
 @return {object}
 */
var extend = (utils.extend = function extend(a, b) {
	a = a || {};
	for (var key in b) {
		if (b.hasOwnProperty(key)) {
			a[key] = b[key];
		}
	}
	return a;
});

/**
 Flat array by first row
 */
var flatArray = (utils.flatArray = function(a) {

	if (!a || 0 === a.length) {
		return [];
	}

	// For recordsets
	if (typeof a === 'object' && a instanceof alasql.Recordset) {
		return a.data.map(function(ai) {
			return ai[a.columns[0].columnid];
		});
	}
	// Else for other arrays
	var key = Object.keys(a[0])[0];
	if (key === undefined) {
		return [];
	}
	return a.map(function(ai) {
		return ai[key];
	});
});

/**
 Convert array of objects to array of arrays
 */
var arrayOfArrays = (utils.arrayOfArrays = function(a) {
	return a.map(function(aa) {
		var ar = [];
		for (var key in aa) {
			ar.push(aa[key]);
		}
		return ar;
	});
});

if (!Array.isArray) {
	Array.isArray = function(arg) {
		return Object.prototype.toString.call(arg) === '[object Array]';
	};
}

/**
 Excel:convert number to Excel column, like 1 => 'A'
 @param {integer} i Column number, starting with 0
 @return {string} Column name, starting with 'A'
 */

var xlsnc = (utils.xlsnc = function(i) {
	var addr = String.fromCharCode(65 + (i % 26));
	if (i >= 26) {
		i = ((i / 26) | 0) - 1;
		addr = String.fromCharCode(65 + (i % 26)) + addr;
		if (i > 26) {
			i = ((i / 26) | 0) - 1;
			addr = String.fromCharCode(65 + (i % 26)) + addr;
		}
	}
	return addr;
});

/**
 Excel:conver Excel column name to number
 @param {string} s Column number, like 'A' or 'BE'
 @return {string} Column name, starting with 0
 */
var xlscn = (utils.xlscn = function(s) {
	var n = s.charCodeAt(0) - 65;
	if (s.length > 1) {
		n = (n + 1) * 26 + s.charCodeAt(1) - 65;

		if (s.length > 2) {
			n = (n + 1) * 26 + s.charCodeAt(2) - 65;
		}
	}
	return n;
});

var domEmptyChildren = (utils.domEmptyChildren = function(container) {
	var len = container.childNodes.length;
	while (len--) {
		container.removeChild(container.lastChild);
	}
});

/**
 SQL LIKE emulation
 @parameter {string} pattern Search pattern
 @parameter {string} value Searched value
 @parameter {string} escape Escape character (optional)
 @return {boolean} If value LIKE pattern ESCAPE escape
 */

var like = (utils.like = function(pattern, value, escape) {
	// Verify escape character
	if (!escape) escape = '';

	var i = 0;
	var s = '^';

	while (i < pattern.length) {
		var c = pattern[i],
			c1 = '';
		if (i < pattern.length - 1) c1 = pattern[i + 1];

		if (c === escape) {
			s += '\\' + c1;
			i++;
		} else if (c === '[' && c1 === '^') {
			s += '[^';
			i++;
		} else if (c === '[' || c === ']') {
			s += c;
		} else if (c === '%') {
			s += '.*';
		} else if (c === '_') {
			s += '.';
		} else if ('/.*+?|(){}'.indexOf(c) > -1) {
			s += '\\' + c;
		} else {
			s += c;
		}
		i++;
	}

	s += '$';
	//    if(value == undefined) return false;

	return ('' + (value || '')).toUpperCase().search(RegExp(s.toUpperCase())) > -1;
});

utils.glob = function(value, pattern) {
	var i = 0;
	var s = '^';

	while (i < pattern.length) {
		var c = pattern[i],
			c1 = '';
		if (i < pattern.length - 1) c1 = pattern[i + 1];

		if (c === '[' && c1 === '^') {
			s += '[^';
			i++;
		} else if (c === '[' || c === ']') {
			s += c;
		} else if (c === '*') {
			s += '.*';
		} else if (c === '?') {
			s += '.';
		} else if ('/.*+?|(){}'.indexOf(c) > -1) {
			s += '\\' + c;
		} else {
			s += c;
		}
		i++;
	}

	s += '$';
	return ('' + (value || '')).toUpperCase().search(RegExp(s.toUpperCase())) > -1;
};

/**
 Get path of alasql.js
 @todo Rewrite and simplify the code. Review, is this function is required separately
 */
utils.findAlaSQLPath = function() {
	/** type {string} Path to alasql library and plugins */

	if (utils.isWebWorker) {
		return '';
		/** @todo Check how to get path in worker */
	} else if (utils.isMeteorClient) {
		return '/packages/dist/';
	} else if (utils.isMeteorServer) {
		return 'assets/packages/dist/';
	} else if (utils.isNode) {
		return __dirname;
	} else if (utils.isBrowser) {
		var sc = document.getElementsByTagName('script');

		for (var i = 0; i < sc.length; i++) {
			if (sc[i].src.substr(-16).toLowerCase() === 'alasql-worker.js') {
				return sc[i].src.substr(0, sc[i].src.length - 16);
			} else if (sc[i].src.substr(-20).toLowerCase() === 'alasql-worker.min.js') {
				return sc[i].src.substr(0, sc[i].src.length - 20);
			} else if (sc[i].src.substr(-9).toLowerCase() === 'alasql.js') {
				return sc[i].src.substr(0, sc[i].src.length - 9);
			} else if (sc[i].src.substr(-13).toLowerCase() === 'alasql.min.js') {
				return sc[i].src.substr(0, sc[i].src.length - 13);
			}
		}
	}
	return '';
};

var getXLSX = function() {
	var XLSX = alasql.private.externalXlsxLib;

	if (XLSX) {
		return XLSX;
	}

	if (utils.isNode || utils.isBrowserify || utils.isMeteorServer) {
		//*not-for-browser/*
		XLSX = require('xlsx') || null;
		//*/
	} else {
		XLSX = utils.global.XLSX || null;
	}

	if (null === XLSX) {
		throw new Error('Please include the xlsx.js library');
	}

	return XLSX;
};

// set AlaSQl path
alasql.path = alasql.utils.findAlaSQLPath();

/**
 	Strip all comments.
 	@function
 	@param {string} str
 	@return {string}
 	Based om the https://github.com/lehni/uncomment.js/blob/master/uncomment.js
 	I just replaced JavaScript's '//' to SQL's '--' and remove other stuff

 	@todo Fixed [aaa/*bbb] for column names
 	@todo Bug if -- comments in the last line
	@todo Check if it possible to model it with Jison parser
	@todo Remove unused code
 */

/* global alasql */

alasql.utils.uncomment = function(str) {
	// Add some padding so we can always look ahead and behind by two chars
	str = ('__' + str + '__').split('');
	var quote = false,
		quoteSign,
		// regularExpression = false,
		// characterClass = false,
		blockComment = false,
		lineComment = false;
	// preserveComment = false;

	for (var i = 0, l = str.length; i < l; i++) {

		// When checking for quote escaping, we also need to check that the
		// escape sign itself is not escaped, as otherwise '\\' would cause
		// the wrong impression of an unclosed string:
		var unescaped = str[i - 1] !== '\\' || str[i - 2] === '\\';

		if (quote) {
			if (str[i] === quoteSign && unescaped) {
				quote = false;
			}

		} else if (blockComment) {
			// Is the block comment closing?
			if (str[i] === '*' && str[i + 1] === '/') {
				// if (!preserveComment)
				str[i] = str[i + 1] = '';
				blockComment /* = preserveComment*/ = false;
				// Increase by 1 to skip closing '/', as it would be mistaken
				// for a regexp otherwise
				i++;
			} else {
				//if (!preserveComment) {
				str[i] = '';
			}
		} else if (lineComment) {
			// One-line comments end with the line-break
			if (str[i + 1] === '\n' || str[i + 1] === '\r') {
				lineComment = false;
			}
			str[i] = '';
		} else {
			if (str[i] === '"' || str[i] === "'") {
				quote = true;
				quoteSign = str[i];
			} else if (str[i] === '[' && str[i - 1] !== '@') {
				quote = true;
				quoteSign = ']';
				// } else if (str[i] === '-' &&  str[i + 1] === '-') {
				// 	str[i] = '';
				// 	lineComment = true;
			} else if (str[i] === '/' && str[i + 1] === '*') {
				// Do not filter out conditional comments /*@ ... */
				// and comments marked as protected /*! ... */
				//					preserveComment = /[@!]/.test(str[i + 2]);
				//					if (!preserveComment)
				str[i] = '';
				blockComment = true;

			}
		}
	}
	// Remove padding again.
	str = str.join('').slice(2, -2);

	return str;
};

/**
	Database class for Alasql.js
*/

// Initial parameters

/**
	Jison parser
*/
alasql.parser = alasqlparser;

alasql.parser.parseError = function(str, hash) {
	throw new Error('Have you used a reserved keyword without `escaping` it?\n' + str);
};

/**
 	Jison parser
 	@param {string} sql SQL statement
 	@return {object} AST (Abstract Syntax Tree)

 	@todo Create class AST
 	@todo Add other parsers

 	@example
 	alasql.parse = function(sql) {
		// My own parser here
 	}
 */
alasql.parse = function(sql) {
	return alasqlparser.parse(alasql.utils.uncomment(sql));
};

/**
 	List of engines of external databases
 	@type {object}
 	@todo Create collection type
 */
alasql.engines = {};

/**
 	List of databases
 	@type {object}
 */
alasql.databases = {};

/**
	Number of databases
	@type {number}
*/
alasql.databasenum = 0;

/**
 	Alasql options object
 */
alasql.options = {};
alasql.options.errorlog = false; // Log or throw error
alasql.options.valueof = false; // Use valueof in orderfn
alasql.options.dropifnotexists = false; // DROP database in any case
alasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types
// Another value is 'javascript'
alasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case
alasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag
alasql.options.logprompt = true; // Print SQL at log

alasql.options.progress = false; // Callback for async queries progress

// Default modifier
// values: RECORDSET, VALUE, ROW, COLUMN, MATRIX, TEXTSTRING, INDEX
alasql.options.modifier = undefined;
// How many rows to lookup to define columns
alasql.options.columnlookup = 10;
// Create vertex if not found
alasql.options.autovertex = true;

// Use dbo as current database (for partial T-SQL comaptibility)
alasql.options.usedbo = true;

// AUTOCOMMIT ON | OFF
alasql.options.autocommit = true;

// Use cache
alasql.options.cache = true;

// Compatibility flags
alasql.options.tsql = true;

alasql.options.mysql = true;

alasql.options.postgres = true;

alasql.options.oracle = true;

alasql.options.sqlite = true;

alasql.options.orientdb = true;

// for SET NOCOUNT OFF
alasql.options.nocount = false;

// Check for NaN and convert it to undefined
alasql.options.nan = false;

alasql.options.joinstar = 'overwrite'; // Option for SELECT * FROM a,b

//alasql.options.worker = false;

// Variables
alasql.vars = {};

alasql.declares = {};

alasql.prompthistory = [];

alasql.plugins = {}; // If plugin already loaded

alasql.from = {}; // FROM functions

alasql.into = {}; // INTO functions

alasql.fn = {};

alasql.aggr = {};

alasql.busy = 0;

// Cache
alasql.MAXSQLCACHESIZE = 10000;
alasql.DEFAULTDATABASEID = 'alasql';

/* WebWorker */
alasql.lastid = 0;

alasql.buffer = {};

alasql.private = {
	externalXlsxLib: null,
};

alasql.setXLSX = function(XLSX) {
	alasql.private.externalXlsxLib = XLSX;
};

/**
  Select current database
  @param {string} databaseid Selected database identificator
 */
alasql.use = function(databaseid) {
	if (!databaseid) {
		databaseid = alasql.DEFAULTDATABASEID;
	}
	if (alasql.useid === databaseid) {
		return;
	}
	alasql.useid = databaseid;
	var db = alasql.databases[alasql.useid];
	alasql.tables = db.tables;
	//	alasql.fn = db.fn;
	db.resetSqlCache();
	if (alasql.options.usedbo) {
		alasql.databases.dbo = db; // Operator???
	}
};

alasql.autoval = function(tablename, colname, getNext, databaseid) {
	var db = databaseid ? alasql.databases[databaseid] : alasql.databases[alasql.useid];

	if (!db.tables[tablename]) {
		throw new Error('Tablename not found: ' + tablename);
	}

	if (!db.tables[tablename].identities[colname]) {
		throw new Error('Colname not found: ' + colname);
	}

	if (getNext) {
		return db.tables[tablename].identities[colname].value || null;
	}

	return (
		db.tables[tablename].identities[colname].value -
			db.tables[tablename].identities[colname].step || null
	);
};

/**
 Run single SQL statement on current database
 */
alasql.exec = function(sql, params, cb, scope) {
	// Avoid setting params if not needed even with callback
	if (typeof params === 'function') {
		scope = cb;
		cb = params;
		params = {};
	}

	delete alasql.error;
	params = params || {};
	if (alasql.options.errorlog) {
		try {
			return alasql.dexec(alasql.useid, sql, params, cb, scope);
		} catch (err) {
			alasql.error = err;
			if (cb) {
				cb(null, alasql.error);
			}
		}
	} else {
		return alasql.dexec(alasql.useid, sql, params, cb, scope);
	}
};

/**
 Run SQL statement on specific database
 */
alasql.dexec = function(databaseid, sql, params, cb, scope) {
	var db = alasql.databases[databaseid];
	//	if(db.databaseid != databaseid) console.trace('got!');

	var hh;
	// Create hash
	if (alasql.options.cache) {
		hh = hash(sql);
		var statement = db.sqlCache[hh];
		// If database structure was not changed since last time return cache
		if (statement && db.dbversion === statement.dbversion) {
			return statement(params, cb);
		}
	}

	// Create AST
	var ast = alasql.parse(sql);
	if (!ast.statements) {
		return;
	}
	if (0 === ast.statements.length) {
		return 0;
	} else if (1 === ast.statements.length) {
		if (ast.statements[0].compile) {
			// Compile and Execute
			var statement = ast.statements[0].compile(databaseid, params);
			if (!statement) {
				return;
			}
			statement.sql = sql;
			statement.dbversion = db.dbversion;

			if (alasql.options.cache) {
				// Secure sqlCache size
				if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
					db.resetSqlCache();
				}
				db.sqlCacheSize++;
				db.sqlCache[hh] = statement;
			}
			var res = (alasql.res = statement(params, cb, scope));
			return res;
		} else {

			alasql.precompile(ast.statements[0], alasql.useid, params);
			var res = (alasql.res = ast.statements[0].execute(databaseid, params, cb, scope));
			return res;
		}
	} else {
		// Multiple statements
		if (cb) {
			alasql.adrun(databaseid, ast, params, cb, scope);
		} else {
			return alasql.drun(databaseid, ast, params, cb, scope);
		}
	}
};

/**
  Run multiple statements and return array of results sync
 */
alasql.drun = function(databaseid, ast, params, cb, scope) {
	var useid = alasql.useid;

	if (useid !== databaseid) {
		alasql.use(databaseid);
	}

	var res = [];
	for (var i = 0, ilen = ast.statements.length; i < ilen; i++) {
		if (ast.statements[i]) {
			if (ast.statements[i].compile) {
				var statement = ast.statements[i].compile(alasql.useid);
				res.push((alasql.res = statement(params, null, scope)));
			} else {
				alasql.precompile(ast.statements[i], alasql.useid, params);
				res.push((alasql.res = ast.statements[i].execute(alasql.useid, params)));
			}
		}
	}
	if (useid !== databaseid) {
		alasql.use(useid);
	}

	if (cb) {
		cb(res);
	}

	alasql.res = res;

	return res;
};

/**
  Run multiple statements and return array of results async
 */
alasql.adrun = function(databaseid, ast, params, cb, scope) {
	var idx = 0;
	var noqueries = ast.statements.length;
	if (alasql.options.progress !== false) {
		alasql.options.progress(noqueries, idx++);
	}

	//	alasql.busy++;
	var useid = alasql.useid;
	if (useid !== databaseid) {
		alasql.use(databaseid);
	}
	var res = [];

	function adrunone(data) {
		if (data !== undefined) {
			res.push(data);
		}
		var astatement = ast.statements.shift();
		if (!astatement) {
			if (useid !== databaseid) {
				alasql.use(useid);
			}
			cb(res);
			//			alasql.busy--;
			//			if(alasql.busy<0) alasql.busy = 0;
		} else {
			if (astatement.compile) {
				var statement = astatement.compile(alasql.useid);
				statement(params, adrunone, scope);
				if (alasql.options.progress !== false) {
					alasql.options.progress(noqueries, idx++);
				}
			} else {
				alasql.precompile(ast.statements[0], alasql.useid, params);
				astatement.execute(alasql.useid, params, adrunone);
				if (alasql.options.progress !== false) {
					alasql.options.progress(noqueries, idx++);
				}
			}
		}
	}

	adrunone(); /** @todo Check, why data is empty here */
};

/**
 Compile statement to JavaScript function
 @param {string} sql SQL statement
 @param {string} databaseid Database identificator
 @return {functions} Compiled statement functions
*/
alasql.compile = function(sql, databaseid) {
	databaseid = databaseid || alasql.useid;

	var ast = alasql.parse(sql); // Create AST

	if (1 === ast.statements.length) {
		var statement = ast.statements[0].compile(databaseid);
		statement.promise = function(params) {
			return new Promise(function(resolve, reject) {
				statement(params, function(data, err) {
					if (err) {
						reject(err);
					} else {
						resolve(data);
					}
				});
			});
		};

		return statement;

	} else {
		throw new Error('Cannot compile, because number of statements in SQL is not equal to 1');
	}
};

/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Main Database class

/**
    @class Database 
 */

var Database = (alasql.Database = function(databaseid) {
	var self = this;

	//		self.prototype = this;

	if (self === alasql) {
		if (databaseid) {
			//			if(alasql.databases[databaseid]) {
			self = alasql.databases[databaseid];
			//			} else {
			alasql.databases[databaseid] = self;
			//			}
			if (!self) {
				throw new Error('Database "' + databaseid + '" not found');
			}
		} else {
			// Create new database (or get alasql?)
			self = alasql.databases.alasql;
			// For SQL Server examples, USE tempdb
			if (alasql.options.tsql) {
				alasql.databases.tempdb = alasql.databases.alasql;
			}
			//			self = new Database(databaseid); // to call without new
		}
	}
	if (!databaseid) {
		databaseid = 'db' + alasql.databasenum++; // Random name
	}

	// Step 1
	self.databaseid = databaseid;
	alasql.databases[databaseid] = self;
	self.dbversion = 0;

	//Steps 2-5
	self.tables = {};
	self.views = {};
	self.triggers = {};
	self.indices = {};

	// Step 6: Objects storage
	self.objects = {};
	self.counter = 0;

	self.resetSqlCache();
	return self;
});

/**
    Reset SQL statements cache
 */

Database.prototype.resetSqlCache = function() {
	this.sqlCache = {}; // Cache for compiled SQL statements
	this.sqlCacheSize = 0;
};

// Main SQL function

/**
    Run SQL statement on database
    @param {string} sql SQL statement
    @param [object] params Parameters
    @param {function} cb callback
 */

Database.prototype.exec = function(sql, params, cb) {
	return alasql.dexec(this.databaseid, sql, params, cb);
};

Database.prototype.autoval = function(tablename, colname, getNext) {
	return alasql.autoval(tablename, colname, getNext, this.databaseid);
};

// Aliases like MS SQL

/*
//
// Transactio class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

Database.prototype.transaction = function(cb) {
	var tx = new alasql.Transaction(this.databaseid);
	var res = cb(tx);
	return res;
};

// Transaction class (for WebSQL compatibility)

/** 
 Transaction class
 @class Transaction
 */

var Transaction = (alasql.Transaction = function(databaseid) {
	this.transactionid = Date.now();
	this.databaseid = databaseid;
	this.commited = false;
	this.dbversion = alasql.databases[databaseid].dbversion;
	//	this.bank = cloneDeep(alasql.databases[databaseid]);
	this.bank = JSON.stringify(alasql.databases[databaseid]);
	// TODO CLone Tables with insertfns

	return this;
});

// Main class

// Commit

/**
 Commit transaction
 */
Transaction.prototype.commit = function() {
	this.commited = true;
	alasql.databases[this.databaseid].dbversion = Date.now();
	delete this.bank;
};

// Rollback
/**
 Rollback transaction
 */
Transaction.prototype.rollback = function() {
	if (!this.commited) {
		alasql.databases[this.databaseid] = JSON.parse(this.bank);
		// alasql.databases[this.databaseid].tables = this.bank;
		// alasql.databases[this.databaseid].dbversion = this.dbversion;
		delete this.bank;
	} else {
		throw new Error('Transaction already commited');
	}
};

// Transactions stub

/**
 Execute SQL statement
 @param {string} sql SQL statement
 @param {object} params Parameters
 @param {function} cb Callback function 
 @return result
 */
Transaction.prototype.exec = function(sql, params, cb) {

	return alasql.dexec(this.databaseid, sql, params, cb);
};

Transaction.prototype.executeSQL = Transaction.prototype.exec;

/*
//
// Table class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Table = (alasql.Table = function(params) {
	// Step 1: Data array
	this.data = [];

	// Step 2: Columns
	this.columns = [];
	this.xcolumns = {};

	// Step 3: indices
	this.inddefs = {};
	this.indices = {};
	this.uniqs = {};
	this.uniqdefs = {};

	// Step 4: identities
	this.identities = {};

	// Step 5: checkfn...
	this.checks = [];
	this.checkfns = []; // For restore... to be done...

	// Step 6: INSERT/DELETE/UPDATE

	// Step 7: Triggers...
	// Create trigger hubs
	this.beforeinsert = {};
	this.afterinsert = {};
	this.insteadofinsert = {};

	this.beforedelete = {};
	this.afterdelete = {};
	this.insteadofdelete = {};

	this.beforeupdate = {};
	this.afterupdate = {};
	this.insteadofupdate = {};

	// Done
	extend(this, params);
});

Table.prototype.indexColumns = function() {
	var self = this;
	self.xcolumns = {};
	self.columns.forEach(function(col) {
		self.xcolumns[col.columnid] = col;
	});
};

/*
//
// View class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var View = (alasql.View = function(params) {
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.query = [];

	extend(this, params);
});

/*
//
// Query class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class

/**
 @class Query Main query class
 */
var Query = (alasql.Query = function(params) {
	this.alasql = alasql;

	// Columns
	this.columns = [];
	this.xcolumns = {};
	this.selectGroup = [];
	this.groupColumns = {};
	// Data array
	extend(this, params);
});

/**
 @class Recordset data object
 */
var Recordset = (alasql.Recordset = function(params) {
	// Data array
	extend(this, params);
});

/*
//
// Parser helper for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

var yy = (alasqlparser.yy = alasql.yy = {});

// Utility
yy.extend = extend;
// Option for case sensitive
yy.casesensitive = alasql.options.casesensitive;

// Base class for all yy classes
var Base = (yy.Base = function(params) {
	return yy.extend(this, params);
});

Base.prototype.toString = function() {};
Base.prototype.toType = function() {};
Base.prototype.toJS = function() {};

Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {};

Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {};

/*
//
// Statements class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Statements container
yy.Statements = function(params) {
	return yy.extend(this, params);
};

yy.Statements.prototype.toString = function() {
	return this.statements
		.map(function(st) {
			return st.toString();
		})
		.join('; ');
};

// Compile array of statements into single statement
yy.Statements.prototype.compile = function(db) {
	var statements = this.statements.map(function(st) {
		return st.compile(db);
	});
	if (statements.length === 1) {
		return statements[0];
	} else {
		return function(params, cb) {
			var res = statements.map(function(st) {
				return st(params);
			});
			if (cb) {
				cb(res);
			}
			return res;
		};
	}
};

/* global alasql */
/* global yy */
/*
//
// SEARCH for Alasql.js
// Date: 04.05.2015
// (c) 2015, Andrey Gershun
//
*/

function doSearch(databaseid, params, cb) {
	var res;
	var stope = {};
	var fromdata;
	var selectors = cloneDeep(this.selectors);

	function processSelector(selectors, sidx, value) {
		//		var val;

		var val, // temp values use many places
			nest, // temp value used many places
			r, // temp value used many places
			sel = selectors[sidx];

		//		if(!alasql.srch[sel.srchid]) {
		//			throw new Error('Selector "'+sel.srchid+'" not found');
		//		};

		var SECURITY_BREAK = 100000;

		if (sel.selid) {
			// TODO Process Selector
			if (sel.selid === 'PATH') {
				var queue = [{node: value, stack: []}];
				var visited = {};
				//var path = [];
				var objects = alasql.databases[alasql.useid].objects;
				while (queue.length > 0) {
					var q = queue.shift();
					var node = q.node;
					var stack = q.stack;
					var r = processSelector(sel.args, 0, node);
					if (r.length > 0) {
						if (sidx + 1 + 1 > selectors.length) {
							return stack;
						} else {
							var rv = [];
							if (stack && stack.length > 0) {
								stack.forEach(function(stv) {
									rv = rv.concat(processSelector(selectors, sidx + 1, stv));
								});
							}
							return rv;
							//							return processSelector(selectors,sidx+1,stack);
						}
					} else {
						if (typeof visited[node.$id] !== 'undefined') {
							continue;
						} else {

							visited[node.$id] = true;
							if (node.$out && node.$out.length > 0) {
								node.$out.forEach(function(edgeid) {
									var edge = objects[edgeid];
									var stack2 = stack.concat(edge);
									stack2.push(objects[edge.$out[0]]);
									queue.push({
										node: objects[edge.$out[0]],
										stack: stack2,
									});
								});
							}
						}
					}
				}
				// Else return fail
				return [];
			}
			if (sel.selid === 'NOT') {
				var nest = processSelector(sel.args, 0, value);

				if (nest.length > 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return [value];
					} else {
						return processSelector(selectors, sidx + 1, value);
					}
				}
			} else if (sel.selid === 'DISTINCT') {
				var nest;
				if (typeof sel.args === 'undefined' || sel.args.length === 0) {
					nest = distinctArray(value);
				} else {
					nest = processSelector(sel.args, 0, value);
				}
				if (nest.length === 0) {
					return [];
				} else {
					var res = distinctArray(nest);
					if (sidx + 1 + 1 > selectors.length) {
						return res;
					} else {
						return processSelector(selectors, sidx + 1, res);
					}
				}
			} else if (sel.selid === 'AND') {
				var res = true;
				sel.args.forEach(function(se) {
					res = res && processSelector(se, 0, value).length > 0;
				});
				if (!res) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return [value];
					} else {
						return processSelector(selectors, sidx + 1, value);
					}
				}
			} else if (sel.selid === 'OR') {
				var res = false;
				sel.args.forEach(function(se) {
					res = res || processSelector(se, 0, value).length > 0;
				});
				if (!res) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return [value];
					} else {
						return processSelector(selectors, sidx + 1, value);
					}
				}
			} else if (sel.selid === 'ALL') {
				var nest = processSelector(sel.args[0], 0, value);
				if (nest.length === 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return nest;
					} else {
						return processSelector(selectors, sidx + 1, nest);
					}
				}
			} else if (sel.selid === 'ANY') {
				var nest = processSelector(sel.args[0], 0, value);

				if (nest.length === 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return [nest[0]];
					} else {
						return processSelector(selectors, sidx + 1, [nest[0]]);
					}
				}
			} else if (sel.selid === 'UNIONALL') {
				var nest = [];
				sel.args.forEach(function(se) {
					nest = nest.concat(processSelector(se, 0, value));
				});
				if (nest.length === 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return nest;
					} else {
						return processSelector(selectors, sidx + 1, nest);
					}
				}
			} else if (sel.selid === 'UNION') {
				var nest = [];
				sel.args.forEach(function(se) {
					nest = nest.concat(processSelector(se, 0, value));
				});
				var nest = distinctArray(nest);
				if (nest.length === 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return nest;
					} else {
						return processSelector(selectors, sidx + 1, nest);
					}
				}
			} else if (sel.selid === 'IF') {
				var nest = processSelector(sel.args, 0, value);

				if (nest.length === 0) {
					return [];
				} else {
					if (sidx + 1 + 1 > selectors.length) {
						return [value];
					} else {
						return processSelector(selectors, sidx + 1, value);
					}
				}
			} else if (sel.selid === 'REPEAT') {

				var lvar,
					lmax,
					lmin = sel.args[0].value;
				if (!sel.args[1]) {
					lmax = lmin; // Add security break
				} else {
					lmax = sel.args[1].value;
				}
				if (sel.args[2]) {
					lvar = sel.args[2].variable;
				}
				//var lsel = sel.sels;

				var retval = [];

				if (lmin === 0) {
					if (sidx + 1 + 1 > selectors.length) {
						retval = [value];
					} else {
						if (lvar) {
							alasql.vars[lvar] = 0;
						}
						retval = retval.concat(processSelector(selectors, sidx + 1, value));
					}
				}

				// var nests = processSelector(sel.sels,0,value).slice();
				if (lmax > 0) {
					var nests = [{value: value, lvl: 1}];

					var i = 0;
					while (nests.length > 0) {
						var nest = nests[0];

						nests.shift();
						if (nest.lvl <= lmax) {
							if (lvar) {
								alasql.vars[lvar] = nest.lvl;
							}

							var nest1 = processSelector(sel.sels, 0, nest.value);

							nest1.forEach(function(n) {
								nests.push({value: n, lvl: nest.lvl + 1});
							});
							if (nest.lvl >= lmin) {
								if (sidx + 1 + 1 > selectors.length) {
									retval = retval.concat(nest1);
									//return nests;
								} else {
									nest1.forEach(function(n) {
										retval = retval.concat(
											processSelector(selectors, sidx + 1, n)
										);
									});
								}
							}
						}
						// Security brake
						i++;
						if (i > SECURITY_BREAK) {
							throw new Error('Security brake. Number of iterations = ' + i);
						}
					}
				}
				return retval;
			} else if (sel.selid === 'OF') {
				if (sidx + 1 + 1 > selectors.length) {
					return [value];
				} else {
					var r1 = [];
					Object.keys(value).forEach(function(keyv) {
						alasql.vars[sel.args[0].variable] = keyv;
						r1 = r1.concat(processSelector(selectors, sidx + 1, value[keyv]));
					});
					return r1;
				}
			} else if (sel.selid === 'TO') {

				var oldv = alasql.vars[sel.args[0]];
				var newv = [];
				if (oldv !== undefined) {

					newv = oldv.slice(0);

				} else {
					newv = [];
				}
				newv.push(value);

				if (sidx + 1 + 1 > selectors.length) {
					return [value];
				} else {
					alasql.vars[sel.args[0]] = newv;
					var r1 = processSelector(selectors, sidx + 1, value);

					alasql.vars[sel.args[0]] = oldv;
					return r1;
				}

			} else if (sel.selid === 'ARRAY') {
				var nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					val = nest;
				} else {
					return [];
				}
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'SUM') {
				var nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					var val = nest.reduce(function(sum, current) {
						return sum + current;
					}, 0);
				} else {
					return [];
				}
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'AVG') {
				nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					val =
						nest.reduce(function(sum, current) {
							return sum + current;
						}, 0) / nest.length;
				} else {
					return [];
				}
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'COUNT') {
				nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					val = nest.length;
				} else {
					return [];
				}
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'FIRST') {
				nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					val = nest[0];
				} else {
					return [];
				}

				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'LAST') {
				nest = processSelector(sel.args, 0, value);
				if (nest.length > 0) {
					val = nest[nest.length - 1];
				} else {
					return [];
				}

				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'MIN') {
				nest = processSelector(sel.args, 0, value);
				if (nest.length === 0) {
					return [];
				}
				var val = nest.reduce(function(min, current) {
					return Math.min(min, current);
				}, Infinity);
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'MAX') {
				var nest = processSelector(sel.args, 0, value);
				if (nest.length === 0) {
					return [];
				}
				var val = nest.reduce(function(max, current) {
					return Math.max(max, current);
				}, -Infinity);
				if (sidx + 1 + 1 > selectors.length) {
					return [val];
				} else {
					return processSelector(selectors, sidx + 1, val);
				}
			} else if (sel.selid === 'PLUS') {
				var retval = [];
				//				retval = retval.concat(processSelector(selectors,sidx+1,n))
				var nests = processSelector(sel.args, 0, value).slice();
				if (sidx + 1 + 1 > selectors.length) {
					retval = retval.concat(nests);
				} else {
					nests.forEach(function(n) {
						retval = retval.concat(processSelector(selectors, sidx + 1, n));
					});
				}

				var i = 0;
				while (nests.length > 0) {
					//					nest = nests[0];
					//					nests.shift();
					var nest = nests.shift();

					nest = processSelector(sel.args, 0, nest);

					nests = nests.concat(nest);

					if (sidx + 1 + 1 > selectors.length) {
						retval = retval.concat(nest);
						//return retval;
					} else {
						nest.forEach(function(n) {

							var rn = processSelector(selectors, sidx + 1, n);

							retval = retval.concat(rn);
						});
					}

					// Security brake
					i++;
					if (i > SECURITY_BREAK) {
						throw new Error('Security brake. Number of iterations = ' + i);
					}
				}
				return retval;

			} else if (sel.selid === 'STAR') {
				var retval = [];
				retval = processSelector(selectors, sidx + 1, value);
				var nests = processSelector(sel.args, 0, value).slice();
				if (sidx + 1 + 1 > selectors.length) {
					retval = retval.concat(nests);
					//return nests;
				} else {
					nests.forEach(function(n) {
						retval = retval.concat(processSelector(selectors, sidx + 1, n));
					});
				}
				var i = 0;
				while (nests.length > 0) {
					var nest = nests[0];
					nests.shift();

					nest = processSelector(sel.args, 0, nest);

					nests = nests.concat(nest);

					if (sidx + 1 + 1 <= selectors.length) {
						nest.forEach(function(n) {
							retval = retval.concat(processSelector(selectors, sidx + 1, n));
						});
					}

					// Security brake
					i++;
					if (i > SECURITY_BREAK) {
						throw new Error('Loop brake. Number of iterations = ' + i);
					}
				}

				return retval;
			} else if (sel.selid === 'QUESTION') {
				var retval = [];
				retval = retval.concat(processSelector(selectors, sidx + 1, value));
				var nest = processSelector(sel.args, 0, value);
				if (sidx + 1 + 1 <= selectors.length) {
					nest.forEach(function(n) {
						retval = retval.concat(processSelector(selectors, sidx + 1, n));
					});
				}
				return retval;
			} else if (sel.selid === 'WITH') {
				var nest = processSelector(sel.args, 0, value);

				if (nest.length === 0) {
					return [];
				} else {

					var r = {status: 1, values: nest};
				}
			} else if (sel.selid === 'ROOT') {
				if (sidx + 1 + 1 > selectors.length) {
					return [value];
				} else {
					return processSelector(selectors, sidx + 1, fromdata);
				}
			} else {
				throw new Error('Wrong selector ' + sel.selid);
			}
		} else if (sel.srchid) {
			var r = alasql.srch[sel.srchid.toUpperCase()](value, sel.args, stope, params);

		} else {
			throw new Error('Selector not found');
		}

		if (typeof r === 'undefined') {
			r = {status: 1, values: [value]};
		}

		var res = [];
		if (r.status === 1) {
			var arr = r.values;

			if (sidx + 1 + 1 > selectors.length) {
				//			if(sidx+1+1 > selectors.length) {
				res = arr;

			} else {
				for (var i = 0; i < r.values.length; i++) {
					res = res.concat(processSelector(selectors, sidx + 1, arr[i]));
				}
			}
		}
		return res;
	}

	if (selectors !== undefined && selectors.length > 0) {

		if (
			selectors &&
			selectors[0] &&
			selectors[0].srchid === 'PROP' &&
			selectors[0].args &&
			selectors[0].args[0]
		) {

			if (selectors[0].args[0].toUpperCase() === 'XML') {
				stope.mode = 'XML';
				selectors.shift();
			} else if (selectors[0].args[0].toUpperCase() === 'HTML') {
				stope.mode = 'HTML';
				selectors.shift();
			} else if (selectors[0].args[0].toUpperCase() === 'JSON') {
				stope.mode = 'JSON';
				selectors.shift();
			}
		}
		if (selectors.length > 0 && selectors[0].srchid === 'VALUE') {
			stope.value = true;
			selectors.shift();
		}
	}

	if (this.from instanceof yy.Column) {
		var dbid = this.from.databaseid || databaseid;
		fromdata = alasql.databases[dbid].tables[this.from.columnid].data;
		//selectors.unshift({srchid:'CHILD'});
	} else if (this.from instanceof yy.FuncValue && alasql.from[this.from.funcid.toUpperCase()]) {
		var args = this.from.args.map(function(arg) {
			var as = arg.toJS();

			var fn = new Function('params,alasql', 'var y;return ' + as).bind(this);
			return fn(params, alasql);
		});

		fromdata = alasql.from[this.from.funcid.toUpperCase()].apply(this, args);

	} else if (typeof this.from === 'undefined') {
		fromdata = alasql.databases[databaseid].objects;
	} else {
		var fromfn = new Function('params,alasql', 'var y;return ' + this.from.toJS());
		fromdata = fromfn(params, alasql);
		// Check for Mogo Collections
		if (
			typeof Mongo === 'object' &&
			typeof Mongo.Collection !== 'object' &&
			fromdata instanceof Mongo.Collection
		) {
			fromdata = fromdata.find().fetch();
		}

		//		if(typeof fromdata == 'object' && Array.isArray(fromdata)) {
		//			selectors.unshift({srchid:'CHILD'});
		//		}
	}

	// If source data is array than first step is to run over array
	//	var selidx = 0;
	//	var selvalue = fromdata;

	if (selectors !== undefined && selectors.length > 0) {
		// Init variables for TO() selectors

		if (false) {
			selectors.forEach(function(selector) {
				if (selector.srchid === 'TO') {
					//* @todo move to TO selector
					alasql.vars[selector.args[0]] = [];
					// TODO - process nested selectors
				}
			});
		}

		res = processSelector(selectors, 0, fromdata);
	} else {
		res = fromdata;
	}

	if (this.into) {
		var a1, a2;
		if (typeof this.into.args[0] !== 'undefined') {
			a1 = new Function('params,alasql', 'var y;return ' + this.into.args[0].toJS())(
				params,
				alasql
			);
		}
		if (typeof this.into.args[1] !== 'undefined') {
			a2 = new Function('params,alasql', 'var y;return ' + this.into.args[1].toJS())(
				params,
				alasql
			);
		}
		res = alasql.into[this.into.funcid.toUpperCase()](a1, a2, res, [], cb);
	} else {
		if (stope.value && res.length > 0) {
			res = res[0];
		}
		if (cb) {
			res = cb(res);
		}
	}
	return res;
}

/**	
	Search class
	@class
	@example
	SEARCH SUM(/a) FROM ? -- search over parameter object
*/

yy.Search = function(params) {
	return yy.extend(this, params);
};

yy.Search.prototype.toString = function() {
	var s = 'SEARCH' + ' ';
	if (this.selectors) {
		s += this.selectors.toString();
	}
	if (this.from) {
		s += 'FROM' + ' ' + this.from.toString();
	}

	return s;
};

yy.Search.prototype.toJS = function(context) {

	var s = 'this.queriesfn[' + (this.queriesidx - 1) + '](this.params,null,' + context + ')';
	// var s = '';
	return s;
};

yy.Search.prototype.compile = function(databaseid) {
	var dbid = databaseid;
	var self = this;

	var statement = function(params, cb) {

		var res;
		doSearch.bind(self)(dbid, params, function(data) {

			res = modify(statement.query, data);

			if (cb) {
				res = cb(res);
			}
		});

		//		if(cb) res = cb(res);
		return res;
	};
	statement.query = {};
	return statement;
};

// List of search functions
alasql.srch = {};

alasql.srch.PROP = function(val, args, stope) {

	if (stope.mode === 'XML') {
		var arr = [];
		val.children.forEach(function(v) {
			if (v.name.toUpperCase() === args[0].toUpperCase()) {
				arr.push(v);
			}
		});
		if (arr.length > 0) {
			return {status: 1, values: arr};
		} else {
			return {status: -1, values: []};
		}
	} else {
		if (
			typeof val !== 'object' ||
			val === null ||
			typeof args !== 'object' ||
			typeof val[args[0]] === 'undefined'
		) {
			return {status: -1, values: []};
		} else {
			return {status: 1, values: [val[args[0]]]};
		}
	}
};

alasql.srch.APROP = function(val, args) {
	if (
		typeof val !== 'object' ||
		val === null ||
		typeof args !== 'object' ||
		typeof val[args[0]] === 'undefined'
	) {
		return {status: 1, values: [undefined]};
	} else {
		return {status: 1, values: [val[args[0]]]};
	}
};

// Test expression
alasql.srch.EQ = function(val, args, stope, params) {
	var exprs = args[0].toJS('x', '');
	var exprfn = new Function('x,alasql,params', 'return ' + exprs);
	if (val === exprfn(val, alasql, params)) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

// Test expression
alasql.srch.LIKE = function(val, args, stope, params) {
	var exprs = args[0].toJS('x', '');
	var exprfn = new Function('x,alasql,params', 'return ' + exprs);
	if (
		val.toUpperCase().match(
			new RegExp(
				'^' +
					exprfn(val, alasql, params)
						.toUpperCase()
						.replace(/%/g, '.*')
						.replace(/\?|_/g, '.') +
					'$'
			),
			'g'
		)
	) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.ATTR = function(val, args, stope) {
	if (stope.mode === 'XML') {
		if (typeof args === 'undefined') {
			return {status: 1, values: [val.attributes]};
		} else {
			if (
				typeof val === 'object' &&
				typeof val.attributes === 'object' &&
				typeof val.attributes[args[0]] !== 'undefined'
			) {
				return {status: 1, values: [val.attributes[args[0]]]};
			} else {
				return {status: -1, values: []};
			}
		}
	} else {
		throw new Error('ATTR is not using in usual mode');
	}
};

alasql.srch.CONTENT = function(val, args, stope) {
	if (stope.mode === 'XML') {
		return {status: 1, values: [val.content]};
	} else {
		throw new Error('ATTR is not using in usual mode');
	}
};

alasql.srch.SHARP = function(val, args) {
	var obj = alasql.databases[alasql.useid].objects[args[0]];
	if (typeof val !== 'undefined' && val === obj) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.PARENT = function(/*val,args,stope*/) {
	// TODO: implement
	console.error('PARENT not implemented', arguments);

	return {status: -1, values: []};
};

alasql.srch.CHILD = function(val, args, stope) {

	if (typeof val === 'object') {
		if (Array.isArray(val)) {
			return {status: 1, values: val};
		} else {
			if (stope.mode === 'XML') {
				return {
					status: 1,
					values: Object.keys(val.children).map(function(key) {
						return val.children[key];
					}),
				};
			} else {
				return {
					status: 1,
					values: Object.keys(val).map(function(key) {
						return val[key];
					}),
				};
			}
		}
	} else {
		// If primitive value
		return {status: 1, values: []};
	}
};

// Return all keys
alasql.srch.KEYS = function(val) {
	if (typeof val === 'object' && val !== null) {
		return {status: 1, values: Object.keys(val)};
	} else {
		// If primitive value
		return {status: 1, values: []};
	}
};

// Test expression
alasql.srch.WHERE = function(val, args, stope, params) {
	var exprs = args[0].toJS('x', '');
	var exprfn = new Function('x,alasql,params', 'return ' + exprs);
	if (exprfn(val, alasql, params)) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.NAME = function(val, args) {
	if (val.name === args[0]) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.CLASS = function(val, args) {

	// Please avoid `===` here
	if (val.$class == args) {
		// jshint ignore:line
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.VERTEX = function(val) {
	if (val.$node === 'VERTEX') {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.INSTANCEOF = function(val, args) {
	if (val instanceof alasql.fn[args[0]]) {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.EDGE = function(val) {
	if (val.$node === 'EDGE') {
		return {status: 1, values: [val]};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.EX = function(val, args, stope, params) {
	var exprs = args[0].toJS('x', '');
	var exprfn = new Function('x,alasql,params', 'return ' + exprs);
	return {status: 1, values: [exprfn(val, alasql, params)]};
};

// Transform expression
alasql.srch.RETURN = function(val, args, stope, params) {
	var res = {};
	if (args && args.length > 0) {
		args.forEach(function(arg) {
			var exprs = arg.toJS('x', '');
			var exprfn = new Function('x,alasql,params', 'return ' + exprs);
			if (typeof arg.as === 'undefined') {
				arg.as = arg.toString();
			}
			res[arg.as] = exprfn(val, alasql, params);
		});
	}
	return {status: 1, values: [res]};
};

// Transform expression
alasql.srch.REF = function(val) {
	return {status: 1, values: [alasql.databases[alasql.useid].objects[val]]};
};

// Transform expression
alasql.srch.OUT = function(val) {
	if (val.$out && val.$out.length > 0) {
		var res = val.$out.map(function(v) {
			return alasql.databases[alasql.useid].objects[v];
		});
		return {status: 1, values: res};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.OUTOUT = function(val) {
	if (val.$out && val.$out.length > 0) {
		var res = [];
		val.$out.forEach(function(v) {
			var av = alasql.databases[alasql.useid].objects[v];
			if (av && av.$out && av.$out.length > 0) {
				av.$out.forEach(function(vv) {
					res = res.concat(alasql.databases[alasql.useid].objects[vv]);
				});
			}
		});
		return {status: 1, values: res};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.IN = function(val) {
	if (val.$in && val.$in.length > 0) {
		var res = val.$in.map(function(v) {
			return alasql.databases[alasql.useid].objects[v];
		});
		return {status: 1, values: res};
	} else {
		return {status: -1, values: []};
	}
};

alasql.srch.ININ = function(val) {
	if (val.$in && val.$in.length > 0) {
		var res = [];
		val.$in.forEach(function(v) {
			var av = alasql.databases[alasql.useid].objects[v];
			if (av && av.$in && av.$in.length > 0) {
				av.$in.forEach(function(vv) {
					res = res.concat(alasql.databases[alasql.useid].objects[vv]);
				});
			}
		});
		return {status: 1, values: res};
	} else {
		return {status: -1, values: []};
	}
};

// Transform expression
alasql.srch.AS = function(val, args) {
	alasql.vars[args[0]] = val;
	return {status: 1, values: [val]};
};

// Transform expression
alasql.srch.AT = function(val, args) {
	var v = alasql.vars[args[0]];
	return {status: 1, values: [v]};
};

// Transform expression
alasql.srch.CLONEDEEP = function(val) {
	// TODO something wrong
	var z = cloneDeep(val);
	return {status: 1, values: [z]};
};

// // Transform expression
// alasql.srch.DELETE = function(val,args) {

// };

// Transform expression
alasql.srch.SET = function(val, args, stope, params) {

	var s = args
		.map(function(st) {

			if (st.method === '@') {
				return "alasql.vars['" + st.variable + "']=" + st.expression.toJS('x', '');
			} else if (st.method === '$') {
				return "params['" + st.variable + "']=" + st.expression.toJS('x', '');
			} else {
				return "x['" + st.column.columnid + "']=" + st.expression.toJS('x', '');
			}
		})
		.join(';');
	var setfn = new Function('x,params,alasql', s);

	setfn(val, params, alasql);

	return {status: 1, values: [val]};
};

alasql.srch.ROW = function(val, args, stope, params) {
	var s = 'var y;return [';

	s += args
		.map(function(arg) {
			return arg.toJS('x', '');
		})
		.join(',');
	s += ']';
	var setfn = new Function('x,params,alasql', s);
	var rv = setfn(val, params, alasql);

	return {status: 1, values: [rv]};
};

alasql.srch.D3 = function(val) {
	if (val.$node !== 'VERTEX' && val.$node === 'EDGE') {
		val.source = val.$in[0];
		val.target = val.$out[0];
	}

	return {status: 1, values: [val]};
};

var compileSearchOrder = function(order) {
	if (order) {

		if (
			order &&
			order.length === 1 &&
			order[0].expression &&
			typeof order[0].expression === 'function'
		) {

			var func = order[0].expression;

			return function(a, b) {
				var ra = func(a),
					rb = func(b);
				if (ra > rb) {
					return 1;
				}
				if (ra === rb) {
					return 0;
				}
				return -1;
			};
		}

		var s = '';
		var sk = '';
		order.forEach(function(ord) {

			// Date conversion
			var dg = '';

			if (ord.expression instanceof yy.NumValue) {
				ord.expression = self.columns[ord.expression.value - 1];
			}

			if (ord.expression instanceof yy.Column) {
				var columnid = ord.expression.columnid;

				if (alasql.options.valueof) {
					dg = '.valueOf()'; // TODO Check
				}
				// COLLATE NOCASE
				if (ord.nocase) {
					dg += '.toUpperCase()';
				}

				if (columnid === '_') {
					s +=
						'if(a' +
						dg +
						(ord.direction === 'ASC' ? '>' : '<') +
						'b' +
						dg +
						')return 1;';
					s += 'if(a' + dg + '==b' + dg + '){';
				} else {
					s +=
						"if((a['" +
						columnid +
						"']||'')" +
						dg +
						(ord.direction === 'ASC' ? '>' : '<') +
						"(b['" +
						columnid +
						"']||'')" +
						dg +
						')return 1;';
					s +=
						"if((a['" +
						columnid +
						"']||'')" +
						dg +
						"==(b['" +
						columnid +
						"']||'')" +
						dg +
						'){';
				}
			} else {
				dg = '.valueOf()';
				// COLLATE NOCASE
				if (ord.nocase) {
					dg += '.toUpperCase()';
				}
				s +=
					'if((' +
					ord.toJS('a', '') +
					"||'')" +
					dg +
					(ord.direction === 'ASC' ? '>(' : '<(') +
					ord.toJS('b', '') +
					"||'')" +
					dg +
					')return 1;';
				s +=
					'if((' +
					ord.toJS('a', '') +
					"||'')" +
					dg +
					'==(' +
					ord.toJS('b', '') +
					"||'')" +
					dg +
					'){';
			}

			// TODO Add date comparision
			// s += 'if(a[\''+columnid+"']"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\''+columnid+"']"+dg+')return 1;';
			// s += 'if(a[\''+columnid+"']"+dg+'==b[\''+columnid+"']"+dg+'){';
			//			}
			sk += '}';
		});
		s += 'return 0;';
		s += sk + 'return -1';

		return new Function('a,b', s);
	}
};

alasql.srch.ORDERBY = function(val, args /*,stope*/) {

	var res = val.sort(compileSearchOrder(args));
	return {status: 1, values: res};
};

// Main query procedure
function queryfn(query, oldscope, cb, A, B) {
	var aaa = query.sources.length;

	var ms;
	query.sourceslen = query.sources.length;
	var slen = query.sourceslen;
	query.query = query; // TODO Remove to prevent memory leaks
	query.A = A;
	query.B = B;
	query.cb = cb;
	query.oldscope = oldscope;

	// Run all subqueries before main statement
	if (query.queriesfn) {
		query.sourceslen += query.queriesfn.length;
		slen += query.queriesfn.length;

		query.queriesdata = [];

		query.queriesfn.forEach(function(q, idx) {
			//			if(query.explain) ms = Date.now();

			//			var res = flatArray(q(query.params,null,queryfn2,(-idx-1),query));

			//			var res = flatArray(queryfn(q.query,null,queryfn2,(-idx-1),query));

			q.query.params = query.params;
			//			query.queriesdata[idx] =

			//	if(false) {
			//			queryfn(q.query,query.oldscope,queryfn2,(-idx-1),query);
			//	} else {
			queryfn2([], -idx - 1, query);
			//	}

			//			query.explaination.push({explid: query.explid++, description:'Query '+idx,ms:Date.now()-ms});
			//			query.queriesdata[idx] = res;
			//			return res;
		});

	}

	var scope;
	if (!oldscope) scope = {};
	else scope = cloneDeep(oldscope);
	query.scope = scope;

	// First - refresh data sources

	var result;
	query.sources.forEach(function(source, idx) {
		//		source.data = query.database.tables[source.tableid].data;

		source.query = query;
		var rs = source.datafn(query, query.params, queryfn2, idx, alasql);

		if (typeof rs !== 'undefined') {
			// TODO - this is a hack: check if result is array - check all cases and
			// make it more logical
			if ((query.intofn || query.intoallfn) && Array.isArray(rs)) rs = rs.length;
			result = rs;
		}
		//
		// Ugly hack to use in query.wherefn and source.srcwherefns functions
		// constructions like this.queriesdata['test'].
		// I can elimite it with source.srcwherefn.bind(this)()
		// but it may be slow.
		//
		source.queriesdata = query.queriesdata;
	});
	if (query.sources.length == 0 || 0 === slen) result = queryfn3(query);

	return result;
}

function queryfn2(data, idx, query) {

	//console.trace();

	if (idx >= 0) {
		var source = query.sources[idx];
		source.data = data;
		if (typeof source.data == 'function') {
			source.getfn = source.data;
			source.dontcache = source.getfn.dontcache;

			//			var prevsource = query.sources[h-1];
			if (
				source.joinmode == 'OUTER' ||
				source.joinmode == 'RIGHT' ||
				source.joinmode == 'ANTI'
			) {
				source.dontcache = false;
			}
			source.data = {};
		}
	} else {
		// subqueries

		query.queriesdata[-idx - 1] = flatArray(data);

	}

	query.sourceslen--;
	if (query.sourceslen > 0) return;

	return queryfn3(query);
}

function queryfn3(query) {
	var scope = query.scope,
		jlen;

	// Preindexation of data sources
	//	if(!oldscope) {
	preIndex(query);
	//	}

	// query.sources.forEach(function(source) {

	// });

	// Prepare variables
	query.data = [];
	query.xgroups = {};
	query.groups = [];

	// Level of Joins
	var h = 0;

	// Start walking over data

	doJoin(query, scope, h);

	// If groupping, then filter groups with HAVING function

	if (query.groupfn) {
		query.data = [];
		if (0 === query.groups.length) {
			var g = {};
			if (query.selectGroup.length > 0) {

				query.selectGroup.forEach(function(sg) {
					if (sg.aggregatorid == 'COUNT' || sg.aggregatorid == 'SUM') {
						g[sg.nick] = 0;
					} else {
						g[sg.nick] = undefined;
					}
				});
			}
			query.groups = [g];

		}

		// ******

		if (query.aggrKeys.length > 0) {
			var gfns = '';
			query.aggrKeys.forEach(function(col) {
				gfns +=
					"g['" +
					col.nick +
					"']=alasql.aggr['" +
					col.funcid +
					"'](undefined,g['" +
					col.nick +
					"'],3);";
				//				gfns += 'return g[\''+col.nick+'\];';
			});

			var gfn = new Function('g,params,alasql', 'var y;' + gfns);
		}

		//					return "'"+colas+'\':alasql.aggr[\''+col.funcid+'\']('+colexp+',undefined,(acc={}),1),'
		//					+'\'__REDUCE__'+colas+'\':acc,';

		// *******

		// 	debugger;
		// if(false && (query.groups.length == 1) && (Object.keys(query.groups[0]).length == 0)) {

		// } else {
		for (var i = 0, ilen = query.groups.length; i < ilen; i++) {
			var g = query.groups[i];

			if (gfn) gfn(g, query.params, alasql);

			if (!query.havingfn || query.havingfn(g, query.params, alasql)) {

				var d = query.selectgfn(g, query.params, alasql);
				query.data.push(d);
			}
		}
		// }

		//			query.groups = query.groups.filter();
	}
	// Remove distinct values
	doDistinct(query);

	// UNION / UNION ALL
	if (query.unionallfn) {
		// TODO Simplify this part of program
		var ud, nd;
		if (query.corresponding) {
			if (!query.unionallfn.query.modifier) query.unionallfn.query.modifier = undefined;
			ud = query.unionallfn(query.params);
		} else {
			if (!query.unionallfn.query.modifier) query.unionallfn.query.modifier = 'RECORDSET';
			nd = query.unionallfn(query.params);
			ud = [];
			ilen = nd.data.length;
			for (var i = 0; i < ilen; i++) {
				var r = {};
				for (var j = Math.min(query.columns.length, nd.columns.length) - 1; 0 <= j; j--) {
					r[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];
				}
				ud.push(r);
			}
		}
		query.data = query.data.concat(ud);
	} else if (query.unionfn) {
		if (query.corresponding) {
			if (!query.unionfn.query.modifier) query.unionfn.query.modifier = 'ARRAY';
			ud = query.unionfn(query.params);
		} else {
			if (!query.unionfn.query.modifier) query.unionfn.query.modifier = 'RECORDSET';
			nd = query.unionfn(query.params);
			ud = [];
			ilen = nd.data.length;
			for (var i = 0; i < ilen; i++) {
				r = {};
				jlen = Math.min(query.columns.length, nd.columns.length);
				for (var j = 0; j < jlen; j++) {
					r[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];
				}
				ud.push(r);
			}
		}

		query.data = arrayUnionDeep(query.data, ud);
	} else if (query.exceptfn) {
		if (query.corresponding) {
			if (!query.exceptfn.query.modifier) query.exceptfn.query.modifier = 'ARRAY';
			var ud = query.exceptfn(query.params);
		} else {
			if (!query.exceptfn.query.modifier) query.exceptfn.query.modifier = 'RECORDSET';
			var nd = query.exceptfn(query.params);
			var ud = [];
			for (var i = 0, ilen = nd.data.length; i < ilen; i++) {
				var r = {};
				for (var j = Math.min(query.columns.length, nd.columns.length) - 1; 0 <= j; j--) {
					r[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];
				}
				ud.push(r);
			}
		}

		query.data = arrayExceptDeep(query.data, ud);
	} else if (query.intersectfn) {
		if (query.corresponding) {
			if (!query.intersectfn.query.modifier) query.intersectfn.query.modifier = undefined;
			ud = query.intersectfn(query.params);
		} else {
			if (!query.intersectfn.query.modifier) query.intersectfn.query.modifier = 'RECORDSET';
			nd = query.intersectfn(query.params);
			ud = [];
			ilen = nd.data.length;
			for (i = 0; i < ilen; i++) {
				r = {};
				jlen = Math.min(query.columns.length, nd.columns.length);
				for (j = 0; j < jlen; j++) {
					r[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];
				}
				ud.push(r);
			}
		}

		query.data = arrayIntersectDeep(query.data, ud);
	}

	// Ordering
	if (query.orderfn) {
		if (query.explain) var ms = Date.now();
		query.data = query.data.sort(query.orderfn);
		if (query.explain) {
			query.explaination.push({
				explid: query.explid++,
				description: 'QUERY BY',
				ms: Date.now() - ms,
			});
		}
	}

	// Reduce to limit and offset
	doLimit(query);

	// Remove Angular.js artifacts and other unnecessary columns
	// Issue #25

	// TODO: Check what artefacts rest from Angular.js
	if (typeof angular != 'undefined') {
		query.removeKeys.push('$$hashKey');
	}

	if (query.removeKeys.length > 0) {
		var removeKeys = query.removeKeys;

		// Remove from data
		jlen = removeKeys.length;
		if (jlen > 0) {
			ilen = query.data.length;
			for (i = 0; i < ilen; i++) {
				for (j = 0; j < jlen; j++) {
					delete query.data[i][removeKeys[j]];
				}
			}
		}

		// Remove from columns list
		if (query.columns.length > 0) {
			query.columns = query.columns.filter(function(column) {
				var found = false;
				removeKeys.forEach(function(key) {
					if (column.columnid == key) found = true;
				});
				return !found;
			});
		}
	}

	if (typeof query.removeLikeKeys != 'undefined' && query.removeLikeKeys.length > 0) {
		var removeLikeKeys = query.removeLikeKeys;

		// Remove unused columns
		// SELECT * REMOVE COLUMNS LIKE "%b"
		for (var i = 0, ilen = query.data.length; i < ilen; i++) {
			r = query.data[i];
			for (var k in r) {
				for (j = 0; j < query.removeLikeKeys.length; j++) {
					if (alasql.utils.like(query.removeLikeKeys[j], k)) {
						//					if(k.match(query.removeLikeKeys[j])) {
						delete r[k];
					}
				}
			}
		}

		if (query.columns.length > 0) {
			query.columns = query.columns.filter(function(column) {
				var found = false;
				removeLikeKeys.forEach(function(key) {
					//					if(column.columnid.match(key)) found = true;
					if (alasql.utils.like(key, column.columnid)) {
						found = true;
					}
				});
				return !found;
			});
		}
	}

	if (query.pivotfn) query.pivotfn();
	if (query.unpivotfn) query.unpivotfn();

	if (query.intoallfn) {

		//		var res = query.intoallfn(query.columns,query.cb,query.A, query.B, alasql);
		var res = query.intoallfn(query.columns, query.cb, query.params, query.alasql);

		//		if(query.cb) res = query.cb(res,query.A, query.B);

		//		debugger;
		return res;
	} else if (query.intofn) {
		ilen = query.data.length;
		for (i = 0; i < ilen; i++) {
			query.intofn(query.data[i], i, query.params, query.alasql);
		}

		if (query.cb) query.cb(query.data.length, query.A, query.B);
		return query.data.length;
	} else {

		res = query.data;
		if (query.cb) res = query.cb(query.data, query.A, query.B);
		return res;
	}
}

// Limiting
function doLimit(query) {

	if (query.limit) {
		var offset = 0;
		if (query.offset) {
			offset = query.offset | 0 || 0;
			offset = offset < 0 ? 0 : offset;
		}
		var limit;
		if (query.percent) {
			limit = (((query.data.length * query.limit) / 100) | 0) + offset;
		} else {
			limit = (query.limit | 0) + offset;
		}
		query.data = query.data.slice(offset, limit);
	}
}

// Distinct
function doDistinct(query) {
	if (query.distinct) {
		var uniq = {};
		// TODO: Speedup, because Object.keys is slow**
		// TODO: Problem with DISTINCT on objects
		var keys = Object.keys(query.data[0] || []);
		for (var i = 0, ilen = query.data.length; i < ilen; i++) {
			var uix = keys
				.map(function(k) {
					return query.data[i][k];
				})
				.join('`');
			uniq[uix] = query.data[i];
		}
		query.data = [];
		for (var key in uniq) {
			query.data.push(uniq[key]);
		}
	}
}

// Optimization: preliminary indexation of joins
var preIndex = function(query) {

	// Loop over all sources
	// Todo: make this loop smaller and more graspable
	for (var k = 0, klen = query.sources.length; k < klen; k++) {
		var source = query.sources[k];
		delete source.ix;
		// If there is indexation rule

		if (k > 0 && source.optimization == 'ix' && source.onleftfn && source.onrightfn) {
			// If there is no table.indices - create it
			if (source.databaseid && alasql.databases[source.databaseid].tables[source.tableid]) {
				if (!alasql.databases[source.databaseid].tables[source.tableid].indices)
					query.database.tables[source.tableid].indices = {};
				// Check if index already exists
				var ixx =
					alasql.databases[source.databaseid].tables[source.tableid].indices[
						hash(source.onrightfns + '`' + source.srcwherefns)
					];
				if (!alasql.databases[source.databaseid].tables[source.tableid].dirty && ixx) {
					source.ix = ixx;
				}
			}

			if (!source.ix) {
				source.ix = {};
				// Walking over source data
				var scope = {};
				var i = 0;
				var ilen = source.data.length;
				var dataw;
				//				while(source.getfn i<ilen) {

				while (
					(dataw = source.data[i]) ||
					(source.getfn && (dataw = source.getfn(i))) ||
					i < ilen
				) {
					if (source.getfn && !source.dontcache) source.data[i] = dataw;
					//					scope[tableid] = dataw;

					//				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					// Prepare scope for indexation
					scope[source.alias || source.tableid] = dataw;

					// Check if it apply to where function
					if (source.srcwherefn(scope, query.params, alasql)) {
						// Create index entry for each address
						var addr = source.onrightfn(scope, query.params, alasql);
						var group = source.ix[addr];
						if (!group) {
							group = source.ix[addr] = [];
						}
						group.push(dataw);
					}
					i++;
				}

				if (
					source.databaseid &&
					alasql.databases[source.databaseid].tables[source.tableid]
				) {
					// Save index to original table
					alasql.databases[source.databaseid].tables[source.tableid].indices[
						hash(source.onrightfns + '`' + source.srcwherefns)
					] = source.ix;
				}
			}

			// Optimization for WHERE column = expression
		} else if (source.wxleftfn) {
			if (!alasql.databases[source.databaseid].engineid) {
				// Check if index exists
				ixx =
					alasql.databases[source.databaseid].tables[source.tableid].indices[
						hash(source.wxleftfns + '`')
					];
			}
			if (!alasql.databases[source.databaseid].tables[source.tableid].dirty && ixx) {
				// Use old index if exists
				source.ix = ixx;
				// Reduce data (apply filter)
				source.data = source.ix[source.wxrightfn(null, query.params, alasql)];
			} else {
				// Create new index
				source.ix = {};
				// Prepare scope
				scope = {};
				// Walking on each source line
				i = 0;
				ilen = source.data.length;
				dataw;
				//				while(source.getfn i<ilen) {

				while (
					(dataw = source.data[i]) ||
					(source.getfn && (dataw = source.getfn(i))) ||
					i < ilen
				) {
					if (source.getfn && !source.dontcache) source.data[i] = dataw;
					//					for(var i=0, ilen=source.data.length; i<ilen; i++) {
					scope[source.alias || source.tableid] = source.data[i];
					// Create index entry
					addr = source.wxleftfn(scope, query.params, alasql);
					group = source.ix[addr];
					if (!group) {
						group = source.ix[addr] = [];
					}
					group.push(source.data[i]);
					i++;
				}
				//					query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;
				if (!alasql.databases[source.databaseid].engineid) {
					alasql.databases[source.databaseid].tables[source.tableid].indices[
						hash(source.wxleftfns + '`')
					] = source.ix;
				}
			}
			// Apply where filter to reduces rows
			if (source.srcwherefns) {
				if (source.data) {
					scope = {};
					source.data = source.data.filter(function(r) {
						scope[source.alias] = r;
						return source.srcwherefn(scope, query.params, alasql);
					});
				} else {
					source.data = [];
				}
			}
			//			}
			// If there is no any optimization than apply srcwhere filter
		} else if (source.srcwherefns && !source.dontcache) {
			if (source.data) {
				var scope = {};
				// TODO!!!!! Data as Function

				source.data = source.data.filter(function(r) {
					scope[source.alias] = r;

					return source.srcwherefn(scope, query.params, alasql);
				});

				scope = {};
				i = 0;
				ilen = source.data.length;
				//var dataw;
				var res = [];
				//				while(source.getfn i<ilen) {

				while (
					(dataw = source.data[i]) ||
					(source.getfn && (dataw = source.getfn(i))) ||
					i < ilen
				) {
					if (source.getfn && !source.dontcache) source.data[i] = dataw;
					scope[source.alias] = dataw;
					if (source.srcwherefn(scope, query.params, alasql)) res.push(dataw);
					i++;
				}
				source.data = res;
			} else {
				source.data = [];
			}
		}
		// Change this to another place (this is a wrong)
		if (source.databaseid && alasql.databases[source.databaseid].tables[source.tableid]) {
			//query.database.tables[source.tableid].dirty = false;
		} else {
			// this is a subquery?
		}
	}
};

//
// Join all lines over sources
//

function doJoin(query, scope, h) {

	// Check, if this is a last join?
	if (h >= query.sources.length) {
		// Todo: check if this runs once too many

		// Then apply where and select

		if (query.wherefn(scope, query.params, alasql)) {

			//			var res = query.selectfn(scope, query.params, alasql);

			// If there is a GROUP BY then pipe to groupping function
			if (query.groupfn) {
				query.groupfn(scope, query.params, alasql);
			} else {
				//				query.qwerty = 999;

				query.data.push(query.selectfn(scope, query.params, alasql));
			}
		}
	} else if (query.sources[h].applyselect) {

		var source = query.sources[h];
		source.applyselect(
			query.params,
			function(data) {
				if (data.length > 0) {

					for (var i = 0; i < data.length; i++) {
						scope[source.alias] = data[i];
						doJoin(query, scope, h + 1);
					}
				} else {
					if (source.applymode == 'OUTER') {
						scope[source.alias] = {};
						doJoin(query, scope, h + 1);
					}
				}
			},
			scope
		);

	} else {
		// STEP 1

		var source = query.sources[h];
		var nextsource = query.sources[h + 1];

		//		if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "RIGHT"
		//			|| source.joinmode == "OUTER" || source.joinmode == "SEMI") {
		// Todo: check if this is smart
		if (true) {
			//source.joinmode != "ANTI") {

			var tableid = source.alias || source.tableid;
			var pass = false; // For LEFT JOIN
			var data = source.data;
			var opt = false;

			// Reduce data for looping if there is optimization hint
			if (!source.getfn || (source.getfn && !source.dontcache)) {
				if (
					source.joinmode != 'RIGHT' &&
					source.joinmode != 'OUTER' &&
					source.joinmode != 'ANTI' &&
					source.optimization == 'ix'
				) {
					data = source.ix[source.onleftfn(scope, query.params, alasql)] || [];
					opt = true;

				}
			}

			// Main cycle
			var i = 0;
			if (typeof data == 'undefined') {
				throw new Error('Data source number ' + h + ' in undefined');
			}
			var ilen = data.length;
			var dataw;

			while (
				(dataw = data[i]) ||
				(!opt && (source.getfn && (dataw = source.getfn(i)))) ||
				i < ilen
			) {
				if (!opt && source.getfn && !source.dontcache) data[i] = dataw;

				scope[tableid] = dataw;
				// Reduce with ON and USING clause
				if (
					!source.onleftfn ||
					source.onleftfn(scope, query.params, alasql) ==
						source.onrightfn(scope, query.params, alasql)
				) {
					// For all non-standard JOINs like a-b=0
					if (source.onmiddlefn(scope, query.params, alasql)) {
						// Recursively call new join
						//						if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "OUTER" || source.joinmode == "RIGHT" ) {
						if (source.joinmode != 'SEMI' && source.joinmode != 'ANTI') {

							doJoin(query, scope, h + 1);
						}

						// if(source.data[i].f = 200) debugger;

						//						if(source.joinmode == "RIGHT" || source.joinmode == "ANTI" || source.joinmode == "OUTER") {
						if (source.joinmode != 'LEFT' && source.joinmode != 'INNER') {
							dataw._rightjoin = true;
						}

						// for LEFT JOIN
						pass = true;
					}
				}
				i++;
			}

			// Additional join for LEFT JOINS
			if (
				(source.joinmode == 'LEFT' ||
					source.joinmode == 'OUTER' ||
					source.joinmode == 'SEMI') &&
				!pass
			) {
				// Clear the scope after the loop
				scope[tableid] = {};
				doJoin(query, scope, h + 1);
			}
		}

		// When there is no records
		//		if(data.length == 0 && query.groupfn) {
		//			scope[tableid] = undefined;
		//			doJoin(query,scope,h+1);
		//		}

		// STEP 2

		if (h == 0) {
			for (var nh = h + 1; nh < query.sources.length; nh++) {
				if (
					nextsource.joinmode == 'OUTER' ||
					nextsource.joinmode == 'RIGHT' ||
					nextsource.joinmode == 'ANTI'
				) {
					scope[source.alias] = {};

					var j = 0;
					var jlen = nextsource.data.length;
					var dataw;

					while (
						(dataw = nextsource.data[j]) ||
						(nextsource.getfn && (dataw = nextsource.getfn(j))) ||
						j < jlen
					) {
						if (nextsource.getfn && !nextsource.dontcache) {
							nextsource.data[j] = dataw;
						}

						if (dataw._rightjoin) {
							delete dataw._rightjoin;
						} else {
							//						delete dataw._rightjoin;

							scope[nextsource.alias] = dataw;
							doJoin(query, scope, nh + 1);
						}
						j++;
					}
					//				debugger;
				} else {

				}
				source = query.sources[nh];
				nextsource = query.sources[nh + 1];
			}
		}

		scope[tableid] = undefined;

	}
}

function swapSources(query, h) {
	var source = query.sources[h];
	var nextsource = query.sources[h + 1];

	var onleftfn = source.onleftfn;
	var onleftfns = source.onleftfns;
	var onrightfn = source.onrightfn;
	var onrightfns = source.onrightfns;
	var optimization = source.optimization;

	source.onleftfn = nextsource.onrightfn;
	source.onleftfns = nextsource.onrightfns;
	source.onrightfn = nextsource.onleftfn;
	source.onrightfns = nextsource.onleftfns;
	source.optimization = nextsource.optimization;

	nextsource.onleftfn = onleftfn;
	nextsource.onleftfns = onleftfns;
	nextsource.onrightfn = onrightfn;
	nextsource.onrightfns = onrightfns;
	nextsource.optimization = optimization;

	query.sources[h] = nextsource;
	query.sources[h + 1] = source;
}

/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

//
// Main part of SELECT procedure
//

/* global yy */

yy.Select = function(params) {
	return yy.extend(this, params);
};
yy.Select.prototype.toString = function() {
	var s;
	s = '';
	if (this.explain) {
		s += 'EXPLAIN ';
	}
	s += 'SELECT ';
	if (this.modifier) {
		s += this.modifier + ' ';
	}
	if (this.distinct) {
		s += 'DISTINCT ';
	}
	if (this.top) {
		s += 'TOP ' + this.top.value + ' ';
		if (this.percent) {
			s += 'PERCENT ';
		}
	}
	s += this.columns
		.map(function(col) {
			var s;
			s = col.toString(true);
			if (typeof col.as !== 'undefined') {
				s += ' AS ' + col.as;
			}
			return s;
		})
		.join(', ');
	if (this.from) {
		s +=
			' FROM ' +
			this.from
				.map(function(f) {
					var ss;
					ss = f.toString();
					if (f.as) {
						ss += ' AS ' + f.as;
					}
					return ss;
				})
				.join(',');
	}
	if (this.joins) {
		s += this.joins
			.map(function(jn) {
				var ss;
				ss = ' ';
				if (jn.joinmode) {
					ss += jn.joinmode + ' ';
				}
				if (jn.table) {
					ss += 'JOIN ' + jn.table.toString(!!jn.as);
				} else if (jn.select) {
					ss += 'JOIN (' + jn.select.toString() + ')';
				} else if (jn instanceof alasql.yy.Apply) {
					ss += jn.toString();
				} else {
					throw new Error('Wrong type in JOIN mode');
				}
				if (jn.as) {
					ss += ' AS ' + jn.as;
				}
				if (jn.using) {
					ss += ' USING ' + jn.using.toString();
				}
				if (jn.on) {
					ss += ' ON ' + jn.on.toString();
				}
				return ss;
			})
			.join('');
	}
	if (this.where) {
		s += ' WHERE ' + this.where.toString();
	}
	if (this.group && this.group.length > 0) {
		s +=
			' GROUP BY ' +
			this.group
				.map(function(grp) {
					return grp.toString();
				})
				.join(', ');
	}
	if (this.having) {
		s += ' HAVING ' + this.having.toString();
	}
	if (this.order && this.order.length > 0) {
		s +=
			' ORDER BY ' +
			this.order
				.map(function(ord) {
					return ord.toString();
				})
				.join(', ');
	}
	if (this.limit) {
		s += ' LIMIT ' + this.limit.value;
	}
	if (this.offset) {
		s += ' OFFSET ' + this.offset.value;
	}
	if (this.union) {
		s += ' UNION ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.union.toString();
	}
	if (this.unionall) {
		s +=
			' UNION ALL ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.unionall.toString();
	}
	if (this.except) {
		s += ' EXCEPT ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.except.toString();
	}
	if (this.intersect) {
		s +=
			' INTERSECT ' +
			(this.corresponding ? 'CORRESPONDING ' : '') +
			this.intersect.toString();
	}
	return s;
};

/**
 Select statement in expression
 */
yy.Select.prototype.toJS = function(context) {

	//	if(this.expression.reduced) return 'true';
	//	return this.expression.toJS(context, tableid, defcols);

	//	var s = 'this.queriesdata['+(this.queriesidx-1)+'][0]';

	var s =
		'alasql.utils.flatArray(this.queriesfn[' +
		(this.queriesidx - 1) +
		'](this.params,null,' +
		context +
		'))[0]';

	return s;
};

// Compile SELECT statement
yy.Select.prototype.compile = function(databaseid, params) {
	var db = alasql.databases[databaseid];
	// Create variable for query
	var query = new Query();

	// Array with columns to be removed
	query.removeKeys = [];
	query.aggrKeys = [];

	query.explain = this.explain; // Explain
	query.explaination = [];
	query.explid = 1;

	query.modifier = this.modifier;

	query.database = db;
	// 0. Precompile whereexists
	this.compileWhereExists(query);

	// 0. Precompile queries for IN, NOT IN, ANY and ALL operators
	this.compileQueries(query);

	query.defcols = this.compileDefCols(query, databaseid);

	// 1. Compile FROM clause
	query.fromfn = this.compileFrom(query);

	// 2. Compile JOIN clauses
	if (this.joins) {
		this.compileJoins(query);
	}

	// todo?: 3. Compile SELECT clause

	// For ROWNUM()
	query.rownums = [];

	this.compileSelectGroup0(query);

	if (this.group || query.selectGroup.length > 0) {
		query.selectgfns = this.compileSelectGroup1(query);
	} else {
		query.selectfns = this.compileSelect1(query, params);
	}

	// Remove columns clause
	this.compileRemoveColumns(query);

	// 5. Optimize WHERE and JOINS
	if (this.where) {
		this.compileWhereJoins(query);
	}

	// 4. Compile WHERE clause
	query.wherefn = this.compileWhere(query);

	// 6. Compile GROUP BY
	if (this.group || query.selectGroup.length > 0) {
		query.groupfn = this.compileGroup(query);
	}

	// 6. Compile HAVING
	if (this.having) {
		query.havingfn = this.compileHaving(query);
	}

	// 8. Compile ORDER BY clause
	if (this.order) {
		query.orderfn = this.compileOrder(query);
	}

	if (this.group || query.selectGroup.length > 0) {
		query.selectgfn = this.compileSelectGroup2(query);
	} else {
		query.selectfn = this.compileSelect2(query);
	}

	// 7. Compile DISTINCT, LIMIT and OFFSET
	query.distinct = this.distinct;

	// 9. Compile PIVOT clause
	if (this.pivot) query.pivotfn = this.compilePivot(query);
	if (this.unpivot) query.pivotfn = this.compileUnpivot(query);

	// 10. Compile TOP/LIMIT/OFFSET/FETCH clause
	if (this.top) {
		query.limit = this.top.value;
	} else if (this.limit) {
		query.limit = this.limit.value;
		if (this.offset) {
			query.offset = this.offset.value;
		}
	}

	query.percent = this.percent;

	// 9. Compile ordering function for UNION and UNIONALL
	query.corresponding = this.corresponding; // If CORRESPONDING flag exists
	if (this.union) {
		query.unionfn = this.union.compile(databaseid);
		if (this.union.order) {
			query.orderfn = this.union.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if (this.unionall) {
		query.unionallfn = this.unionall.compile(databaseid);
		if (this.unionall.order) {
			query.orderfn = this.unionall.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if (this.except) {
		query.exceptfn = this.except.compile(databaseid);
		if (this.except.order) {
			query.orderfn = this.except.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if (this.intersect) {
		query.intersectfn = this.intersect.compile(databaseid);
		if (this.intersect.order) {
			query.intersectfn = this.intersect.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	}

	// SELECT INTO
	if (this.into) {
		if (this.into instanceof yy.Table) {
			//
			// Save into the table in database
			//
			if (
				alasql.options.autocommit &&
				alasql.databases[this.into.databaseid || databaseid].engineid
			) {
				// For external database when AUTOCOMMIT is ONs
				query.intoallfns =
					'return alasql.engines["' +
					alasql.databases[this.into.databaseid || databaseid].engineid +
					'"]' +
					'.intoTable("' +
					(this.into.databaseid || databaseid) +
					'","' +
					this.into.tableid +
					'",this.data, columns, cb);';
			} else {
				// Into AlaSQL tables
				query.intofns =
					"alasql.databases['" +
					(this.into.databaseid || databaseid) +
					"'].tables" +
					"['" +
					this.into.tableid +
					"'].data.push(r);";
			}
		} else if (this.into instanceof yy.VarValue) {
			//
			// Save into local variable
			// SELECT * INTO @VAR1 FROM ?
			//
			query.intoallfns =
				'alasql.vars["' +
				this.into.variable +
				'"]=this.data;res=this.data.length;if(cb)res=cb(res);return res;';
		} else if (this.into instanceof yy.FuncValue) {
			//
			// If this is INTO() function, then call it
			// with one or two parameters
			//
			var qs = "return alasql.into['" + this.into.funcid.toUpperCase() + "'](";
			if (this.into.args && this.into.args.length > 0) {
				qs += this.into.args[0].toJS() + ',';
				if (this.into.args.length > 1) {
					qs += this.into.args[1].toJS() + ',';
				} else {
					qs += 'undefined,';
				}
			} else {
				qs += 'undefined, undefined,';
			}
			query.intoallfns = qs + 'this.data,columns,cb)';

		} else if (this.into instanceof yy.ParamValue) {
			//
			// Save data into parameters array
			// like alasql('SELECT * INTO ? FROM ?',[outdata,srcdata]);
			//
			query.intofns = "params['" + this.into.param + "'].push(r)";
		}

		if (query.intofns) {
			// Create intofn function

			query.intofn = new Function('r,i,params,alasql', 'var y;' + query.intofns);
		} else if (query.intoallfns) {
			// Create intoallfn function

			query.intoallfn = new Function('columns,cb,params,alasql', 'var y;' + query.intoallfns);
		}
	}

	// Now, compile all togeather into one function with query object in scope
	var statement = function(params, cb, oldscope) {
		query.params = params;
		// Note the callback function has the data and error reversed due to existing code in promiseExec which has the
		// err and data swapped.  This trickles down into alasql.exec and further. Rather than risk breaking the whole thing,
		// the (data, err) standard is maintained here.
		var res1 = queryfn(query, oldscope, function(res, err) {
			if (err) {
				return cb(err, null);
			}
			if (query.rownums.length > 0) {
				for (var i = 0, ilen = res.length; i < ilen; i++) {
					for (var j = 0, jlen = query.rownums.length; j < jlen; j++) {
						res[i][query.rownums[j]] = i + 1;
					}
				}
			}

			var res2 = modify(query, res);

			if (cb) {
				cb(res2);
			}

			return res2;
		});

		//		if(typeof res1 != 'undefined') res1 =  modify(query,res1);

		return res1;
	};

	//	statement.dbversion = ;

	statement.query = query;
	return statement;
};

/**
 Modify res according modifier
 @function
 @param {object} query Query object
 @param res {object|number|string|boolean} res Data to be converted
 */
function modify(query, res) {
	// jshint ignore:line

	/* If source is a primitive value then return it */
	if (
		typeof res === 'undefined' ||
		typeof res === 'number' ||
		typeof res === 'string' ||
		typeof res === 'boolean'
	) {
		return res;
	}

	var modifier = query.modifier || alasql.options.modifier;
	var columns = query.columns;
	if (typeof columns === 'undefined' || columns.length == 0) {
		// Try to create columns
		if (res.length > 0) {
			var allcol = {};
			for (var i = Math.min(res.length, alasql.options.columnlookup || 10) - 1; 0 <= i; i--) {
				for (var key in res[i]) {
					allcol[key] = true;
				}
			}

			columns = Object.keys(allcol).map(function(columnid) {
				return {columnid: columnid};
			});
		} else {
			// Cannot recognize columns
			columns = [];
		}
	}

	if (modifier === 'VALUE') {

		if (res.length > 0) {
			var key;
			if (columns && columns.length > 0) {
				key = columns[0].columnid;
			} else {
				key = Object.keys(res[0])[0];
			}
			res = res[0][key];
		} else {
			res = undefined;
		}
	} else if (modifier === 'ROW') {
		if (res.length > 0) {
			var key;
			var a = [];
			for (var key in res[0]) {
				a.push(res[0][key]);
			}
			res = a;
		} else {
			res = undefined;
		}
	} else if (modifier === 'COLUMN') {
		var ar = [];
		if (res.length > 0) {
			var key;
			if (columns && columns.length > 0) {
				key = columns[0].columnid;
			} else {
				key = Object.keys(res[0])[0];
			}

			for (var i = 0, ilen = res.length; i < ilen; i++) {
				ar.push(res[i][key]);
			}
		}
		res = ar;
	} else if (modifier === 'MATRIX') {
		// Returns square matrix of rows
		var ar = [];
		for (var i = 0; i < res.length; i++) {
			var a = [];
			var r = res[i];
			for (var j = 0; j < columns.length; j++) {
				a.push(r[columns[j].columnid]);
			}
			ar.push(a);
		}
		res = ar;
	} else if (modifier === 'INDEX') {
		var ar = {};
		var key, val;
		if (columns && columns.length > 0) {
			key = columns[0].columnid;
			val = columns[1].columnid;
		} else {
			var okeys = Object.keys(res[0]);
			key = okeys[0];
			val = okeys[1];
		}
		for (var i = 0, ilen = res.length; i < ilen; i++) {
			ar[res[i][key]] = res[i][val];
		}
		res = ar;
		//		res = arrayOfArrays(res);
	} else if (modifier === 'RECORDSET') {
		res = new alasql.Recordset({columns: columns, data: res});
		//		res = arrayOfArrays(res);
	} else if (modifier === 'TEXTSTRING') {
		var key;
		if (columns && columns.length > 0) {
			key = columns[0].columnid;
		} else {
			key = Object.keys(res[0])[0];
		}

		for (var i = 0, ilen = res.length; i < ilen; i++) {
			res[i] = res[i][key];
		}
		res = res.join('\n');
		//		res = arrayOfArrays(res);
	}
	return res;
}

yy.Select.prototype.execute = function(databaseid, params, cb) {
	return this.compile(databaseid)(params, cb);
	//	throw new Error('Insert statement is should be compiled')
};

/*
//
// EXISTS and other subqueries functions  functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExistsValue = function(params) {
	return yy.extend(this, params);
};
yy.ExistsValue.prototype.toString = function() {
	return 'EXISTS(' + this.value.toString() + ')';
};

yy.ExistsValue.prototype.toType = function() {
	return 'boolean';
};

yy.ExistsValue.prototype.toJS = function(context, tableid, defcols) {

	return 'this.existsfn[' + this.existsidx + '](params,null,' + context + ').data.length';
};

yy.Select.prototype.compileWhereExists = function(query) {
	if (!this.exists) return;
	query.existsfn = this.exists.map(function(ex) {
		var nq = ex.compile(query.database.databaseid);

		//		 if(!nq.query.modifier) nq.query.modifier = 'RECORDSET';
		nq.query.modifier = 'RECORDSET';
		return nq;
	});
};

yy.Select.prototype.compileQueries = function(query) {
	if (!this.queries) return;
	query.queriesfn = this.queries.map(function(q) {
		var nq = q.compile(query.database.databaseid);

		//	if(!nq.query) nq.query = {};
		nq.query.modifier = 'RECORDSET';
		//		 if(!nq.query.modifier) nq.query.modifier = 'RECORDSET';
		return nq;
	});
};

//
// Prepare subqueries and exists
//
alasql.precompile = function(statement, databaseid, params) {

	if (!statement) return;
	statement.params = params;
	if (statement.queries) {

		statement.queriesfn = statement.queries.map(function(q) {
			var nq = q.compile(databaseid || statement.database.databaseid);

			//			 nq.query.modifier = undefined;
			//			 if(!nq.query.modifier) nq.query.modifier = 'RECORDSET';
			nq.query.modifier = 'RECORDSET';
			return nq;
		});
	}
	if (statement.exists) {

		statement.existsfn = statement.exists.map(function(ex) {
			var nq = ex.compile(databaseid || statement.database.databaseid);

			//			 if(!nq.query.modifier) nq.query.modifier = 'RECORDSET';
			//			 if(!nq.query.modifier) nq.query.modifier = 'ARRAY';
			nq.query.modifier = 'RECORDSET';
			return nq;
		});
	}
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global yy, alasql, Mongo, returnTrue */

yy.Select.prototype.compileFrom = function(query) {

	var self = this;
	query.sources = [];
	//	var tableid = this.from[0].tableid;
	//	var as = '';
	//	if(self.from[0].as) as = this.from[0].as;

	query.aliases = {};
	if (!self.from) return;

	self.from.forEach(function(tq) {

		var ps = '';

		var alias = tq.as || tq.tableid;

		if (tq instanceof yy.Table) {

			query.aliases[alias] = {
				tableid: tq.tableid,
				databaseid: tq.databaseid || query.database.databaseid,
				type: 'table',
			};
		} else if (tq instanceof yy.Select) {
			query.aliases[alias] = {type: 'subquery'};
		} else if (tq instanceof yy.Search) {
			query.aliases[alias] = {type: 'subsearch'};
		} else if (tq instanceof yy.ParamValue) {
			query.aliases[alias] = {type: 'paramvalue'};
		} else if (tq instanceof yy.FuncValue) {
			query.aliases[alias] = {type: 'funcvalue'};
		} else if (tq instanceof yy.VarValue) {
			query.aliases[alias] = {type: 'varvalue'};
		} else if (tq instanceof yy.FromData) {
			query.aliases[alias] = {type: 'fromdata'};
		} else if (tq instanceof yy.Json) {
			query.aliases[alias] = {type: 'json'};
		} else if (tq.inserted) {
			query.aliases[alias] = {type: 'inserted'};
		} else {
			throw new Error('Wrong table at FROM');
		}

		var source = {
			alias: alias,
			databaseid: tq.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: 'INNER',
			onmiddlefn: returnTrue,
			srcwherefns: '', // for optimization
			srcwherefn: returnTrue,
			//			columns: []
		};

		if (tq instanceof yy.Table) {
			// Get columns from table
			source.columns = alasql.databases[source.databaseid].tables[source.tableid].columns;

			if (
				alasql.options.autocommit &&
				alasql.databases[source.databaseid].engineid &&
				!alasql.databases[source.databaseid].tables[source.tableid].view
			) {

				// TODO -- make view for external engine
				source.datafn = function(query, params, cb, idx, alasql) {
					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid,
						source.tableid,
						cb,
						idx,
						query
					);
				};
			} else if (alasql.databases[source.databaseid].tables[source.tableid].view) {
				source.datafn = function(query, params, cb, idx, alasql) {
					var res = alasql.databases[source.databaseid].tables[source.tableid].select(
						params
					);
					if (cb) res = cb(res, idx, query);
					return res;
				};
			} else {

				source.datafn = function(query, params, cb, idx, alasql) {
					/*

*/
					var res = alasql.databases[source.databaseid].tables[source.tableid].data;

					if (cb) res = cb(res, idx, query);

					return res;
					//				return alasql.databases[source.databaseid].tables[source.tableid].data;
				};
			}
		} else if (tq instanceof yy.Select) {
			source.subquery = tq.compile(query.database.databaseid);
			if (typeof source.subquery.query.modifier === 'undefined') {
				source.subquery.query.modifier = 'RECORDSET'; // Subqueries always return recordsets
			}
			source.columns = source.subquery.query.columns;

			//			tq.columns;

			source.datafn = function(query, params, cb, idx, alasql) {
				//				return source.subquery(query.params, cb, idx, query);
				var res;
				source.subquery(query.params, function(data) {
					res = data.data;
					if (cb) res = cb(res, idx, query);
					return res;
					//					return data.data;
				});

				return res;
			};
		} else if (tq instanceof yy.Search) {
			source.subsearch = tq;
			source.columns = [];

			source.datafn = function(query, params, cb, idx, alasql) {
				//				return source.subquery(query.params, cb, idx, query);
				var res;
				source.subsearch.execute(query.database.databaseid, query.params, function(data) {
					res = data;
					if (cb) res = cb(res, idx, query);
					return res;
					//					return data.data;
				});

				return res;
			};
		} else if (tq instanceof yy.ParamValue) {
			ps = "var res = alasql.prepareFromData(params['" + tq.param + "']";

			if (tq.array) ps += ',true';
			ps += ');if(cb)res=cb(res,idx,query);return res';
			source.datafn = new Function('query,params,cb,idx,alasql', ps);
		} else if (tq.inserted) {
			ps = 'var res = alasql.prepareFromData(alasql.inserted';
			if (tq.array) ps += ',true';
			ps += ');if(cb)res=cb(res,idx,query);return res';
			source.datafn = new Function('query,params,cb,idx,alasql', ps);
		} else if (tq instanceof yy.Json) {
			ps = 'var res = alasql.prepareFromData(' + tq.toJS();

			if (tq.array) ps += ',true';
			ps += ');if(cb)res=cb(res,idx,query);return res';
			source.datafn = new Function('query,params,cb,idx,alasql', ps);
		} else if (tq instanceof yy.VarValue) {
			ps = "var res = alasql.prepareFromData(alasql.vars['" + tq.variable + "']";

			if (tq.array) ps += ',true';
			ps += ');if(cb)res=cb(res,idx,query);return res';
			source.datafn = new Function('query,params,cb,idx,alasql', ps);
		} else if (tq instanceof yy.FuncValue) {
			ps = "var res=alasql.from['" + tq.funcid.toUpperCase() + "'](";

			if (tq.args && tq.args.length > 0) {
				if (tq.args[0]) {
					ps += tq.args[0].toJS('query.oldscope') + ',';
				} else {
					ps += 'null,';
				}
				if (tq.args[1]) {
					ps += tq.args[1].toJS('query.oldscope') + ',';
				} else {
					ps += 'null,';
				}
			} else {
				ps += 'null,null,';
			}
			ps += 'cb,idx,query';
			ps += ');/*if(cb)res=cb(res,idx,query);*/return res';

			source.datafn = new Function('query, params, cb, idx, alasql', ps);
		} else if (tq instanceof yy.FromData) {
			source.datafn = function(query, params, cb, idx, alasql) {
				var res = tq.data;
				if (cb) res = cb(res, idx, query);
				return res;
			};
		} else {
			throw new Error('Wrong table at FROM');
		}
		//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
		query.sources.push(source);
	});
	// TODO Add joins
	query.defaultTableid = query.sources[0].alias;

};

alasql.prepareFromData = function(data, array) {

	var i, ilen;
	var res = data;
	if (typeof data === 'string') {
		res = data.split(/\r?\n/);
		if (array) {
			for (i = 0, ilen = res.length; i < ilen; i++) {
				res[i] = [res[i]];
			}
		}
	} else if (array) {
		res = [];
		for (i = 0, ilen = data.length; i < ilen; i++) {
			res.push([data[i]]);
		}

	} else if (typeof data === 'object' && !Array.isArray(data)) {
		//	} else if(typeof data == 'object' && !(typeof data.length == 'undefined')) {
		if (
			typeof Mongo !== 'undefined' &&
			typeof Mongo.Collection !== 'undefined' &&
			data instanceof Mongo.Collection
		) {
			res = data.find().fetch();
		} else {
			res = [];
			for (var key in data) {
				if (data.hasOwnProperty(key)) res.push([key, data[key]]);
			}
		}

	}

	return res;
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT Compile functions

/* global yy, alasql, returnTrue, arrayIntersect */

// Compile JOIN caluese
yy.Select.prototype.compileJoins = function(query) {

	//	debugger;
	var self = this;

	this.joins.forEach(function(jn) {
		// Test CROSS-JOIN
		var tq, ps, source;
		if (jn.joinmode === 'CROSS') {
			if (jn.using || jn.on) {
				throw new Error('CROSS JOIN cannot have USING or ON clauses');
			} else {
				jn.joinmode = 'INNER';
			}
		}

		if (jn instanceof yy.Apply) {

			source = {
				alias: jn.as,
				applymode: jn.applymode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
				columns: [], // TODO check this
			};
			source.applyselect = jn.select.compile(query.database.databaseid);
			source.columns = source.applyselect.query.columns;

			source.datafn = function(query, params, cb, idx, alasql) {
				var res;
				if (cb) res = cb(res, idx, query);
				return res;
			};

			query.sources.push(source);

			return;
		}

		if (jn.table) {
			tq = jn.table;
			source = {
				alias: jn.as || tq.tableid,
				databaseid: tq.databaseid || query.database.databaseid,
				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
				columns: [],
			};
			//

			if (!alasql.databases[source.databaseid].tables[source.tableid]) {
				throw new Error(
					"Table '" +
						source.tableid +
						"' is not exists in database '" +
						source.databaseid +
						"'"
				);
			}

			source.columns = alasql.databases[source.databaseid].tables[source.tableid].columns;

			// source.data = query.database.tables[source.tableid].data;
			if (alasql.options.autocommit && alasql.databases[source.databaseid].engineid) {

				source.datafn = function(query, params, cb, idx, alasql) {

					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid,
						source.tableid,
						cb,
						idx,
						query
					);
				};
			} else if (alasql.databases[source.databaseid].tables[source.tableid].view) {
				source.datafn = function(query, params, cb, idx, alasql) {
					var res = alasql.databases[source.databaseid].tables[source.tableid].select(
						params
					);
					if (cb) res = cb(res, idx, query);
					return res;
				};
			} else {
				source.datafn = function(query, params, cb, idx, alasql) {
					var res = alasql.databases[source.databaseid].tables[source.tableid].data;
					if (cb) res = cb(res, idx, query);
					return res;
				};
			}

			//		var alias = jn.as || tq.tableid;
			//		if(tq) {
			query.aliases[source.alias] = {
				tableid: tq.tableid,
				databaseid: tq.databaseid || query.database.databaseid,
			};
			//		}
		} else if (jn.select) {
			tq = jn.select;
			source = {
				alias: jn.as,
				//				databaseid: jn.databaseid || query.database.databaseid,
				//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
				columns: [],
			};

			source.subquery = tq.compile(query.database.databaseid);
			if (typeof source.subquery.query.modifier === 'undefined') {
				source.subquery.query.modifier = 'RECORDSET'; // Subqueries always return recordsets
			}
			source.columns = source.subquery.query.columns;

			//			if(jn instanceof yy.Apply) {
			source.datafn = function(query, params, cb, idx, alasql) {
				//					return cb(null,idx,alasql);
				return source.subquery(query.params, null, cb, idx).data;
			};
			// } else {
			// 	source.datafn = function(query, params, cb, idx, alasql) {
			// 		return source.subquery(query.params, null, cb, idx);
			// 	}
			// }
			query.aliases[source.alias] = {type: 'subquery'};
		} else if (jn.param) {
			source = {
				alias: jn.as,
				//				databaseid: jn.databaseid || query.database.databaseid,
				//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
			};
			// source.data = ;
			var jnparam = jn.param.param;

			ps = "var res=alasql.prepareFromData(params['" + jnparam + "']";
			if (jn.array) ps += ',true';
			ps += ');if(cb)res=cb(res, idx, query);return res';

			source.datafn = new Function('query,params,cb,idx, alasql', ps);
			query.aliases[source.alias] = {type: 'paramvalue'};
		} else if (jn.variable) {
			source = {
				alias: jn.as,
				//				databaseid: jn.databaseid || query.database.databaseid,
				//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
			};
			// source.data = ;
			//			var jnparam = jn.param.param;

			ps = "var res=alasql.prepareFromData(alasql.vars['" + jn.variable + "']";
			if (jn.array) ps += ',true';
			ps += ');if(cb)res=cb(res, idx, query);return res';

			source.datafn = new Function('query,params,cb,idx, alasql', ps);
			query.aliases[source.alias] = {type: 'varvalue'};
		} else if (jn.func) {
			source = {
				alias: jn.as,
				//				databaseid: jn.databaseid || query.database.databaseid,
				//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '', // for optimization
				srcwherefn: returnTrue,
			};
			// source.data = ;

			var s = "var res=alasql.from['" + jn.func.funcid.toUpperCase() + "'](";

			var args = jn.func.args;
			if (args && args.length > 0) {
				if (args[0]) {
					s += args[0].toJS('query.oldscope') + ',';
				} else {
					s += 'null,';
				}
				if (args[1]) {
					s += args[1].toJS('query.oldscope') + ',';
				} else {
					s += 'null,';
				}
			} else {
				s += 'null,null,';
			}
			s += 'cb,idx,query';
			s += ');/*if(cb)res=cb(res,idx,query);*/return res';

			source.datafn = new Function('query, params, cb, idx, alasql', s);

			query.aliases[source.alias] = {type: 'funcvalue'};
		}

		var alias = source.alias;

		// Test NATURAL-JOIN
		if (jn.natural) {
			if (jn.using || jn.on) {
				throw new Error('NATURAL JOIN cannot have USING or ON clauses');
			} else {
				//				source.joinmode == "INNER";
				if (query.sources.length > 0) {
					var prevSource = query.sources[query.sources.length - 1];
					var prevTable =
						alasql.databases[prevSource.databaseid].tables[prevSource.tableid];
					var table = alasql.databases[source.databaseid].tables[source.tableid];

					if (prevTable && table) {
						var c1 = prevTable.columns.map(function(col) {
							return col.columnid;
						});
						var c2 = table.columns.map(function(col) {
							return col.columnid;
						});
						jn.using = arrayIntersect(c1, c2).map(function(colid) {
							return {columnid: colid};
						});

					} else {
						throw new Error(
							'In this version of Alasql NATURAL JOIN ' +
								'works for tables with predefined columns only'
						);
					}
				}
			}
		}

		if (jn.using) {
			prevSource = query.sources[query.sources.length - 1];

			source.onleftfns = jn.using
				.map(function(col) {

					return (
						"p['" +
						(prevSource.alias || prevSource.tableid) +
						"']['" +
						col.columnid +
						"']"
					);
				})
				.join('+"`"+');

			source.onleftfn = new Function('p,params,alasql', 'var y;return ' + source.onleftfns);

			source.onrightfns = jn.using
				.map(function(col) {
					return "p['" + (source.alias || source.tableid) + "']['" + col.columnid + "']";
				})
				.join('+"`"+');
			source.onrightfn = new Function('p,params,alasql', 'var y;return ' + source.onrightfns);
			source.optimization = 'ix';

		} else if (jn.on) {

			if (jn.on instanceof yy.Op && jn.on.op === '=' && !jn.on.allsome) {

				source.optimization = 'ix';

				var lefts = '';
				var rights = '';
				var middles = '';
				var middlef = false;
				// Test right and left sides
				var ls = jn.on.left.toJS('p', query.defaultTableid, query.defcols);
				var rs = jn.on.right.toJS('p', query.defaultTableid, query.defcols);

				if (
					ls.indexOf("p['" + alias + "']") > -1 &&
					!(rs.indexOf("p['" + alias + "']") > -1)
				) {
					if (
						(ls.match(/p\['.*?'\]/g) || []).every(function(s) {
							return s === "p['" + alias + "']";
						})
					) {
						rights = ls;
					} else {
						middlef = true;
					}
				} else if (
					!(ls.indexOf("p['" + alias + "']") > -1) &&
					rs.indexOf("p['" + alias + "']") > -1
				) {
					if (
						(rs.match(/p\['.*?'\]/g) || []).every(function(s) {
							return s === "p['" + alias + "']";
						})
					) {
						lefts = ls;
					} else {
						middlef = true;
					}
				} else {
					middlef = true;
				}

				if (
					rs.indexOf("p['" + alias + "']") > -1 &&
					!(ls.indexOf("p['" + alias + "']") > -1)
				) {
					if (
						(rs.match(/p\['.*?'\]/g) || []).every(function(s) {
							return s === "p['" + alias + "']";
						})
					) {
						rights = rs;
					} else {
						middlef = true;
					}
				} else if (
					!(rs.indexOf("p['" + alias + "']") > -1) &&
					ls.indexOf("p['" + alias + "']") > -1
				) {
					if (
						(ls.match(/p\['.*?'\]/g) || []).every(function(s) {
							return s === "p['" + alias + "']";
						})
					) {
						lefts = rs;
					} else {
						middlef = true;
					}
				} else {
					middlef = true;
				}

				if (middlef) {
					//					middles = jn.on.toJS('p',query.defaultTableid);
					//				} else {
					rights = '';
					lefts = '';
					middles = jn.on.toJS('p', query.defaultTableid, query.defcols);
					source.optimization = 'no';
					// What to here?
				}

				source.onleftfns = lefts;
				source.onrightfns = rights;
				source.onmiddlefns = middles || 'true';

				source.onleftfn = new Function(
					'p,params,alasql',
					'var y;return ' + source.onleftfns
				);
				source.onrightfn = new Function(
					'p,params,alasql',
					'var y;return ' + source.onrightfns
				);
				source.onmiddlefn = new Function(
					'p,params,alasql',
					'var y;return ' + source.onmiddlefns
				);

				//			} else if(jn.on instanceof yy.Op && jn.on.op == 'AND') {

			} else {

				source.optimization = 'no';
				//				source.onleftfn = returnTrue;
				//				source.onleftfns = "true";
				source.onmiddlefns = jn.on.toJS('p', query.defaultTableid, query.defcols);
				source.onmiddlefn = new Function(
					'p,params,alasql',
					'var y;return ' + jn.on.toJS('p', query.defaultTableid, query.defcols)
				);
			}

			// Optimization function
		}

		//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;

		// TODO SubQueries

		query.sources.push(source);
	});

};

yy.Select.prototype.compileWhere = function(query) {
	if (this.where) {
		if (typeof this.where == 'function') {
			return this.where;
		} else {
			var s = this.where.toJS('p', query.defaultTableid, query.defcols);
			query.wherefns = s;

			return new Function('p,params,alasql', 'var y;return ' + s);
		}
	} else
		return function() {
			return true;
		};
};

yy.Select.prototype.compileWhereJoins = function(query) {
	return;

	// TODO Fix Where optimization

	optimizeWhereJoin(query, this.where.expression);

	//for sources compile wherefs
	query.sources.forEach(function(source) {
		if (source.srcwherefns) {
			source.srcwherefn = new Function(
				'p,params,alasql',
				'var y;return ' + source.srcwherefns
			);
		}
		if (source.wxleftfns) {
			source.wxleftfn = new Function('p,params,alasql', 'var y;return ' + source.wxleftfns);
		}
		if (source.wxrightfns) {
			source.wxrightfn = new Function('p,params,alasql', 'var y;return ' + source.wxrightfns);
		}

	});
};

function optimizeWhereJoin(query, ast) {
	if (!ast) return false;
	if (!(ast instanceof yy.Op)) return;
	if (ast.op != '=' && ast.op != 'AND') return;
	if (ast.allsome) return;

	var s = ast.toJS('p', query.defaultTableid, query.defcols);
	var fsrc = [];
	query.sources.forEach(function(source, idx) {
		// Optimization allowed only for tables only
		if (source.tableid) {
			// This is a good place to remove all unnecessary optimizations
			if (s.indexOf("p['" + source.alias + "']") > -1) fsrc.push(source);
		}
	});

	//	if(fsrc.length < query.sources.length) return;

	if (fsrc.length == 0) {

		return;
	} else if (fsrc.length == 1) {
		if (
			!(s.match(/p\[\'.*?\'\]/g) || []).every(function(s) {
				return s == "p['" + fsrc[0].alias + "']";
			})
		) {
			return;
			// This is means, that we have column from parent query
			// So we return without optimization
		}

		var src = fsrc[0]; // optmiization source
		src.srcwherefns = src.srcwherefns ? src.srcwherefns + '&&' + s : s;

		if (ast instanceof yy.Op && (ast.op == '=' && !ast.allsome)) {
			if (ast.left instanceof yy.Column) {
				var ls = ast.left.toJS('p', query.defaultTableid, query.defcols);
				var rs = ast.right.toJS('p', query.defaultTableid, query.defcols);
				if (rs.indexOf("p['" + fsrc[0].alias + "']") == -1) {
					fsrc[0].wxleftfns = ls;
					fsrc[0].wxrightfns = rs;
				}
			}
			if (ast.right instanceof yy.Column) {
				var ls = ast.left.toJS('p', query.defaultTableid, query.defcols);
				var rs = ast.right.toJS('p', query.defaultTableid, query.defcols);
				if (ls.indexOf("p['" + fsrc[0].alias + "']") == -1) {
					fsrc[0].wxleftfns = rs;
					fsrc[0].wxrightfns = ls;
				}
			}
		}
		ast.reduced = true; // To do not duplicate wherefn and srcwherefn
		return;
	} else {
		if ((ast.op = 'AND')) {
			optimizeWhereJoin(query, ast.left);
			optimizeWhereJoin(query, ast.right);
		}
	}
}

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/**
 Compile group of statements
 */
yy.Select.prototype.compileGroup = function(query) {

	if (query.sources.length > 0) {
		var tableid = query.sources[0].alias;
	} else {
		// If SELECT contains group aggregators without source tables
		var tableid = '';
	}
	var defcols = query.defcols;

	var allgroup = [[]];
	if (this.group) {
		allgroup = decartes(this.group, query);
	}

	// Prepare groups
	//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];

	// Union all arrays to get a maximum
	var allgroups = [];
	allgroup.forEach(function(a) {
		allgroups = arrayUnion(allgroups, a);
	});

	query.allgroups = allgroups;

	query.ingroup = [];

	// Create negative array

	var s = '';
	//	s+= query.selectfns;
	allgroup.forEach(function(agroup) {
		// Start of group function
		s += 'var g=this.xgroups[';

		//	var gcols = this.group.map(function(col){return col.columnid}); // Group fields with r
		// Array with group columns from record
		var rg = agroup.map(function(col2) {
			var columnid = col2.split('\t')[0];
			var coljs = col2.split('\t')[1];
			// Check, if aggregator exists but GROUP BY is not exists
			if (columnid === '') {
				return '1'; // Create fictive groupping column for fictive GROUP BY
			}
			//			else return "r['"+columnid+"']";
			query.ingroup.push(columnid);

			return coljs;
		});

		if (rg.length === 0) {
			rg = ["''"];
		}

		s += rg.join('+"`"+');
		s += '];if(!g) {this.groups.push((g=this.xgroups[';
		s += rg.join('+"`"+');
		s += '] = {';
		//		s += ']=r';
		s += agroup
			.map(function(col2) {
				var columnid = col2.split('\t')[0];
				var coljs = col2.split('\t')[1];

				if (columnid === '') {
					return '';
				}
				return "'" + columnid + "':" + coljs + ',';
			})
			.join('');

		var neggroup = arrayDiff(allgroups, agroup);

		s += neggroup
			.map(function(col2) {
				var columnid = col2.split('\t')[0];
				//	var coljs = col2.split('\t')[1]
				return "'" + columnid + "':null,";
			})
			.join('');

		var aft = '',
			aft2 = '';

		if (typeof query.groupStar !== 'undefined') {
			aft2 +=
				"for(var f in p['" +
				query.groupStar +
				"']) {g[f]=p['" +
				query.groupStar +
				"'][f];};";
		}

		/*
		 */
		//		s += self.columns.map(function(col){

		s += query.selectGroup
			.map(function(col) {

				var colexp = col.expression.toJS('p', tableid, defcols);
				var colas = col.nick;
				// if(typeof colas == 'undefined') {
				// 	if(col instanceof yy.Column) colas = col.columnid;
				// 	else colas = col.toString();
				// };
				if (col instanceof yy.AggrValue) {
					if (col.distinct) {
						aft +=
							",g['$$_VALUES_" +
							colas +
							"']={},g['$$_VALUES_" +
							colas +
							"'][" +
							colexp +
							']=true';
					}
					if (col.aggregatorid === 'SUM') {
						return "'" + colas + "':(" + colexp + ')||0,';
					} else if (
						col.aggregatorid === 'MIN' ||
						col.aggregatorid === 'MAX' ||
						col.aggregatorid === 'FIRST' ||
						col.aggregatorid === 'LAST'
						//					|| col.aggregatorid == 'AVG'
						//							) { return "'"+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJS();
					) {
						return "'" + colas + "':" + colexp + ','; //f.field.arguments[0].toJS();
					} else if (col.aggregatorid === 'ARRAY') {
						return "'" + colas + "':[" + colexp + '],';
					} else if (col.aggregatorid === 'COUNT') {
						if (col.expression.columnid === '*') {
							return "'" + colas + "':1,";
						} else {
							//						return "'"+colas+'\':(typeof '+colexp+' != "undefined")?1:0,';
							//					} else {
							return "'" + colas + "':(typeof " + colexp + ' != "undefined")?1:0,';
						}

						//				else if(col.aggregatorid == 'MIN') { return "'"+col.as+'\':r[\''+col.as+'\'],'; }
						//				else if(col.aggregatorid == 'MAX') { return "'"+col.as+'\':r[\''+col.as+'\'],'; }
					} else if (col.aggregatorid === 'AVG') {
						query.removeKeys.push('_SUM_' + colas);
						query.removeKeys.push('_COUNT_' + colas);

						return (
							'' +
							"'" +
							colas +
							"':" +
							colexp +
							",'_SUM_" +
							colas +
							"':(" +
							colexp +
							")||0,'_COUNT_" +
							colas +
							"':(typeof " +
							colexp +
							' != "undefined")?1:0,'
						);
					} else if (col.aggregatorid === 'AGGR') {
						aft += ",g['" + colas + "']=" + col.expression.toJS('g', -1);
						return '';
					} else if (col.aggregatorid === 'REDUCE') {
						//					query.removeKeys.push('_REDUCE_'+colas);
						query.aggrKeys.push(col);

						//					return "'"+colas+'\':alasql.aggr[\''+col.funcid+'\']('+colexp+',undefined,(acc={}),1),'
						//					+'\'__REDUCE__'+colas+'\':acc,';
						return (
							"'" +
							colas +
							"':alasql.aggr['" +
							col.funcid +
							"'](" +
							colexp +
							',undefined,1),'
						);
					}
					return '';
				}

				return '';
			})
			.join('');

		s += '}' + aft + ',g));' + aft2 + '} else {';

		/*
	// var neggroup = arrayDiff(allgroups,agroup);

	// s += neggroup.map(function(columnid){
	// 	return "g['"+columnid+"']=null;";
	// }).join('');
*/

		//		s += self.columns.map(function(col){
		s += query.selectGroup
			.map(function(col) {
				var colas = col.nick;

				var colexp = col.expression.toJS('p', tableid, defcols);

				if (col instanceof yy.AggrValue) {
					var pre = '',
						post = '';
					if (col.distinct) {
						var pre =
							'if(typeof ' +
							colexp +
							'!="undefined" && (!g[\'$$_VALUES_' +
							colas +
							"'][" +
							colexp +
							'])) \
				 		 {';
						var post = "g['$$_VALUES_" + colas + "'][" + colexp + ']=true;}';
					}
					if (col.aggregatorid === 'SUM') {
						return pre + "g['" + colas + "']+=(" + colexp + '||0);' + post; //f.field.arguments[0].toJS();
					} else if (col.aggregatorid === 'COUNT') {

						if (col.expression.columnid === '*') {
							return pre + "g['" + colas + "']++;" + post;
						} else {
							return (
								pre +
								'if(typeof ' +
								colexp +
								'!="undefined") g[\'' +
								colas +
								"']++;" +
								post
							);
						}
					} else if (col.aggregatorid === 'ARRAY') {
						return pre + "g['" + colas + "'].push(" + colexp + ');' + post;
					} else if (col.aggregatorid === 'MIN') {
						return (
							pre +
							"g['" +
							colas +
							"']=Math.min(g['" +
							colas +
							"']," +
							colexp +
							');' +
							post
						);
					} else if (col.aggregatorid === 'MAX') {
						return (
							pre +
							"g['" +
							colas +
							"']=Math.max(g['" +
							colas +
							"']," +
							colexp +
							');' +
							post
						);
					} else if (col.aggregatorid === 'FIRST') {
						return '';
					} else if (col.aggregatorid === 'LAST') {
						return pre + "g['" + colas + "']=" + colexp + ';' + post;
					} else if (col.aggregatorid === 'AVG') {
						return (
							'' +
							pre +
							"g['_SUM_" +
							colas +
							"']+=(y=" +
							colexp +
							')||0;' +
							"g['_COUNT_" +
							colas +
							'\']+=(typeof y!="undefined")?1:0;' +
							"g['" +
							colas +
							"']=g['_SUM_" +
							colas +
							"']/g['_COUNT_" +
							colas +
							"'];" +
							post
						);
						//					 }
						//			else if(col.aggregatorid == 'AVG') { srg.push(colas+':0'); }
					} else if (col.aggregatorid === 'AGGR') {
						return (
							'' +
							pre +
							"g['" +
							colas +
							"']=" +
							col.expression.toJS('g', -1) +
							';' +
							post
						);
					} else if (col.aggregatorid === 'REDUCE') {
						return (
							'' +
							pre +
							"g['" +
							colas +
							"']=alasql.aggr." +
							col.funcid +
							'(' +
							colexp +
							",g['" +
							colas +
							"'],2);" +
							post
						);
					}

					return '';
				}

				return '';
			})
			.join('');

		//		s += selectFields.map(function(f){

		//			if(f.constructor.name == 'LiteralValue') return '';
		//			if (f.field instanceof SQLParser.nodes.FunctionValue
		//				&& (f.field.name.toUpperCase() == 'SUM' || f.field.name.toUpperCase() == 'COUNT')) {
		//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJS('rec','')+';'; //f.field.arguments[0].toJS();
		//				return 'group.'+f.name.value+'+='+f.field.arguments[0].toJS('rec','')+';'; //f.field.arguments[0].toJS();
		//				return 'group.'+f.name.value+'+=rec.'+f.name.value+';'; //f.field.arguments[0].toJS();
		//			};
		//			return '';
		//		}).join('');

		//		s += '	group.amt += rec.emplid;';
		//		s += 'group.count++;';
		s += '}';
	});

	return new Function('p,params,alasql', 'var y;' + s);
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// yy.Select.prototype.compileSources = function(query) {

// };

function compileSelectStar(query, aliases, joinstar) {
	var sp = '',
		ss = [],
		columnIds = {};

	aliases.forEach(function(alias) {

		//	if(!alias) {
		//		sp += 'for(var k1 in p) var w=p[k1];for(var k2 in w){r[k2]=w[k2]};';
		//	} else 	{

		// TODO move this out of this function
		query.ixsources = {};
		query.sources.forEach(function(source) {
			query.ixsources[source.alias] = source;
		});

		// Fixed
		var columns;
		if (query.ixsources[alias]) {
			var columns = query.ixsources[alias].columns;
		}

		//		if(columns.length == 0 && query.aliases[alias].tableid) {
		//			var columns = alasql.databases[query.aliases[alias].databaseid].tables[query.aliases[alias].tableid].columns;
		//		};

		// Check if this is a Table or other
		if (joinstar && alasql.options.joinstar == 'json') {
			sp += "r['" + alias + "']={};";
		}

		if (columns && columns.length > 0) {
			columns.forEach(function(tcol) {
				if (joinstar && alasql.options.joinstar == 'underscore') {
					ss.push(
						"'" +
							alias +
							'_' +
							tcol.columnid +
							"':p['" +
							alias +
							"']['" +
							tcol.columnid +
							"']"
					);
				} else if (joinstar && alasql.options.joinstar == 'json') {
					//				ss.push('\''+alias+'_'+tcol.columnid+'\':p[\''+alias+'\'][\''+tcol.columnid+'\']');
					sp +=
						"r['" +
						alias +
						"']['" +
						tcol.columnid +
						"']=p['" +
						alias +
						"']['" +
						tcol.columnid +
						"'];";
				} else {
					var value = "p['" + alias + "']['" + tcol.columnid + "']";
					if (!columnIds[tcol.columnid]) {
						var key = "'" + tcol.columnid + "':";
						ss.push(key + value);
						columnIds[tcol.columnid] = {
							id: ss.length - 1,
							value: value,
							key: key,
						};
					} else {
						var newValue =
							value +
							' !== undefined ? ' +
							value +
							' : ' +
							columnIds[tcol.columnid].value;
						ss[columnIds[tcol.columnid].id] = columnIds[tcol.columnid].key + newValue;
						columnIds[tcol.columnid].value = newValue;
					}
				}

				query.selectColumns[escapeq(tcol.columnid)] = true;

				var coldef = {
					columnid: tcol.columnid,
					dbtypeid: tcol.dbtypeid,
					dbsize: tcol.dbsize,
					dbprecision: tcol.dbprecision,
					dbenum: tcol.dbenum,
				};
				query.columns.push(coldef);
				query.xcolumns[coldef.columnid] = coldef;
			});

		} else {

			// if column not exist, then copy all
			sp += 'var w=p["' + alias + '"];for(var k in w){r[k]=w[k]};';

			query.dirtyColumns = true;
		}
		//	}

	});

	return {s: ss.join(','), sp: sp};
}

yy.Select.prototype.compileSelect1 = function(query, params) {
	var self = this;
	query.columns = [];
	query.xcolumns = {};
	query.selectColumns = {};
	query.dirtyColumns = false;
	var s = 'var r={';
	var sp = '';
	var ss = [];

	this.columns.forEach(function(col) {

		if (col instanceof yy.Column) {
			if (col.columnid === '*') {
				if (col.func) {
					sp +=
						"r=params['" +
						col.param +
						"'](p['" +
						query.sources[0].alias +
						"'],p,params,alasql);";
				} else if (col.tableid) {
					//Copy all
					var ret = compileSelectStar(query, [col.tableid], false);
					if (ret.s) {
						ss = ss.concat(ret.s);
					}
					sp += ret.sp;
				} else {

					var ret = compileSelectStar(query, Object.keys(query.aliases), true); //query.aliases[alias].tableid);
					if (ret.s) {
						ss = ss.concat(ret.s);
					}
					sp += ret.sp;

					// TODO Remove these lines
					// In case of no information
					// sp += 'for(var k1 in p){var w=p[k1];'+
					// 			'for(k2 in w) {r[k2]=w[k2]}}'
				}
			} else {
				// If field, otherwise - expression
				var tbid = col.tableid;

				var dbid =
					col.databaseid || query.sources[0].databaseid || query.database.databaseid;
				if (!tbid) tbid = query.defcols[col.columnid];
				if (!tbid) tbid = query.defaultTableid;
				if (col.columnid !== '_') {
					if (
						false &&
						tbid &&
						!query.defcols['.'][col.tableid] &&
						!query.defcols[col.columnid]
					) {
						ss.push(
							"'" +
								escapeq(col.as || col.columnid) +
								"':p['" +
								query.defaultTableid +
								"']['" +
								col.tableid +
								"']['" +
								col.columnid +
								"']"
						);
					} else {
						// workaround for multisheet xlsx export with custom COLUMNS
						var isMultisheetParam =
							params &&
							params.length > 1 &&
							Array.isArray(params[0]) &&
							params[0].length >= 1 &&
							params[0][0].hasOwnProperty('sheetid');
						if (isMultisheetParam) {
							sp =
								'var r={};var w=p["' +
								tbid +
								'"];' +
								'var cols=[' +
								self.columns
									.map(function(col) {
										return "'" + col.columnid + "'";
									})
									.join(',') +
								'];var colas=[' +
								self.columns
									.map(function(col) {
										return "'" + (col.as || col.columnid) + "'";
									})
									.join(',') +
								'];' +
								"for (var i=0;i<Object.keys(p['" +
								tbid +
								"']).length;i++)" +
								' for(var k=0;k<cols.length;k++){if (!r.hasOwnProperty(i)) r[i]={}; r[i][colas[k]]=w[i][cols[k]];}';
						} else {
							ss.push(
								"'" +
									escapeq(col.as || col.columnid) +
									"':p['" +
									tbid +
									"']['" +
									col.columnid +
									"']"
							);
						}
					}
				} else {
					ss.push("'" + escapeq(col.as || col.columnid) + "':p['" + tbid + "']");
				}
				query.selectColumns[escapeq(col.as || col.columnid)] = true;

				if (query.aliases[tbid] && query.aliases[tbid].type === 'table') {
					if (!alasql.databases[dbid].tables[query.aliases[tbid].tableid]) {

						throw new Error("Table '" + tbid + "' does not exist in database");
					}
					var columns =
						alasql.databases[dbid].tables[query.aliases[tbid].tableid].columns;
					var xcolumns =
						alasql.databases[dbid].tables[query.aliases[tbid].tableid].xcolumns;

					if (xcolumns && columns.length > 0) {

						var tcol = xcolumns[col.columnid];

						if (undefined === tcol) {
							throw new Error('Column does not exist: ' + col.columnid);
						}

						var coldef = {
							columnid: col.as || col.columnid,
							dbtypeid: tcol.dbtypeid,
							dbsize: tcol.dbsize,
							dbpecision: tcol.dbprecision,
							dbenum: tcol.dbenum,
						};

						query.columns.push(coldef);
						query.xcolumns[coldef.columnid] = coldef;
					} else {
						var coldef = {
							columnid: col.as || col.columnid,
							//							dbtypeid:tcol.dbtypeid,
							//							dbsize:tcol.dbsize,
							//							dbpecision:tcol.dbprecision,
							//							dbenum: tcol.dbenum,
						};

						query.columns.push(coldef);
						query.xcolumns[coldef.columnid] = coldef;

						query.dirtyColumns = true;
					}
				} else {
					var coldef = {
						columnid: col.as || col.columnid,
						//							dbtypeid:tcol.dbtypeid,
						//							dbsize:tcol.dbsize,
						//							dbpecision:tcol.dbprecision,
						//							dbenum: tcol.dbenum,
					};

					query.columns.push(coldef);
					query.xcolumns[coldef.columnid] = coldef;
					// This is a subquery?
					// throw new Error('There is now such table \''+col.tableid+'\'');
				}
			}
		} else if (col instanceof yy.AggrValue) {
			if (!self.group) {
				//				self.group=[new yy.Column({columnid:'q',as:'q'	})];
				self.group = [''];
			}
			if (!col.as) {
				col.as = escapeq(col.toString());
			}

			if (
				col.aggregatorid === 'SUM' ||
				col.aggregatorid === 'MAX' ||
				col.aggregatorid === 'MIN' ||
				col.aggregatorid === 'FIRST' ||
				col.aggregatorid === 'LAST' ||
				col.aggregatorid === 'AVG' ||
				col.aggregatorid === 'ARRAY' ||
				col.aggregatorid === 'REDUCE'
			) {
				ss.push(
					"'" +
						escapeq(col.as) +
						"':" +
						n2u(col.expression.toJS('p', query.defaultTableid, query.defcols))
				);
			} else if (col.aggregatorid === 'COUNT') {
				ss.push("'" + escapeq(col.as) + "':1");
				// Nothing
			}
			// todo: confirm that no default action must be implemented

			//			query.selectColumns[col.aggregatorid+'('+escapeq(col.expression.toString())+')'] = thtd;

			var coldef = {
				columnid: col.as || col.columnid || col.toString(),
				//							dbtypeid:tcol.dbtypeid,
				//							dbsize:tcol.dbsize,
				//							dbpecision:tcol.dbprecision,
				//							dbenum: tcol.dbenum,
			};

			query.columns.push(coldef);
			query.xcolumns[coldef.columnid] = coldef;

			//			else if (col.aggregatorid == 'MAX') {
			//				ss.push((col.as || col.columnid)+':'+col.toJS("p.",query.defaultTableid))
			//			} else if (col.aggregatorid == 'MIN') {
			//				ss.push((col.as || col.columnid)+':'+col.toJS("p.",query.defaultTableid))
			//			}
		} else {

			ss.push(
				"'" +
					escapeq(col.as || col.columnid || col.toString()) +
					"':" +
					n2u(col.toJS('p', query.defaultTableid, query.defcols))
			);
			//			ss.push('\''+escapeq(col.toString())+'\':'+col.toJS("p",query.defaultTableid));
			//if(col instanceof yy.Expression) {
			query.selectColumns[escapeq(col.as || col.columnid || col.toString())] = true;

			var coldef = {
				columnid: col.as || col.columnid || col.toString(),
				//							dbtypeid:tcol.dbtypeid,
				//							dbsize:tcol.dbsize,
				//							dbpecision:tcol.dbprecision,
				//							dbenum: tcol.dbenum,
			};

			query.columns.push(coldef);
			query.xcolumns[coldef.columnid] = coldef;
		}
	});
	s += ss.join(',') + '};' + sp;
	return s;

};
yy.Select.prototype.compileSelect2 = function(query) {
	var s = query.selectfns;
	if (this.orderColumns && this.orderColumns.length > 0) {
		this.orderColumns.forEach(function(v, idx) {
			var key = '$$$' + idx;
			if (v instanceof yy.Column && query.xcolumns[v.columnid]) {
				s += "r['" + key + "']=r['" + v.columnid + "'];";
			} else {
				s += "r['" + key + "']=" + v.toJS('p', query.defaultTableid, query.defcols) + ';';
			}
			query.removeKeys.push(key);
		});
	}

	return new Function('p,params,alasql', 'var y;' + s + 'return r');
};

yy.Select.prototype.compileSelectGroup0 = function(query) {
	var self = this;
	self.columns.forEach(function(col, idx) {
		if (!(col instanceof yy.Column && col.columnid === '*')) {
			var colas;
			//  = col.as;
			if (col instanceof yy.Column) {
				colas = escapeq(col.columnid);
			} else {
				colas = escapeq(col.toString(true));

			}
			for (var i = 0; i < idx; i++) {
				if (colas === self.columns[i].nick) {
					colas = self.columns[i].nick + ':' + idx;
					break;
				}
			}
			// }
			col.nick = colas;
			if (
				col.funcid &&
				(col.funcid.toUpperCase() === 'ROWNUM' || col.funcid.toUpperCase() === 'ROW_NUMBER')
			) {
				query.rownums.push(col.as);
			}

			// }
		} else {
			query.groupStar = col.tableid || 'default';
		}
	});

	this.columns.forEach(function(col) {
		if (col.findAggregator) {
			col.findAggregator(query);
		}
	});

	if (this.having) {
		if (this.having.findAggregator) {
			this.having.findAggregator(query);
		}
	}
};

yy.Select.prototype.compileSelectGroup1 = function(query) {
	var self = this;
	var s = 'var r = {};';

	self.columns.forEach(function(col) {

		if (col instanceof yy.Column && col.columnid === '*') {
			//			s += 'for(var k in g){r[k]=g[k]};';
			//			s += 'for(var k in this.query.groupColumns){r[k]=g[this.query.groupColumns[k]]};';

			s += 'for(var k in g) {r[k]=g[k]};';
			return '';

		} else {
			// var colas = col.as;
			var colas = col.as;
			if (colas === undefined) {
				if (col instanceof yy.Column) {
					colas = escapeq(col.columnid);
				} else {
					colas = col.nick;
				}
			}
			query.groupColumns[colas] = col.nick;

			//			if(col.as) {
			s += "r['" + colas + "']=";
			//			// } else {
			//			// 	s += 'r[\''+escapeq()+'\']=';
			//			// };
			//			// s += ';';

			s += n2u(col.toJS('g', '')) + ';';

			for (var i = 0; i < query.removeKeys.length; i++) {
				// THis part should be intellectual
				if (query.removeKeys[i] === colas) {
					query.removeKeys.splice(i, 1);
					break;
				}
			}
		}
	});
	// return new Function('g,params,alasql',s+'return r');
	return s;
};

yy.Select.prototype.compileSelectGroup2 = function(query) {
	var self = this;
	var s = query.selectgfns;
	self.columns.forEach(function(col) {

		if (query.ingroup.indexOf(col.nick) > -1) {
			s += "r['" + (col.as || col.nick) + "']=g['" + col.nick + "'];";
		}
	});

	if (this.orderColumns && this.orderColumns.length > 0) {
		this.orderColumns.forEach(function(v, idx) {

			var key = '$$$' + idx;

			if (v instanceof yy.Column && query.groupColumns[v.columnid]) {
				s += "r['" + key + "']=r['" + v.columnid + "'];";
			} else {
				s += "r['" + key + "']=" + v.toJS('g', '') + ';';
			}
			query.removeKeys.push(key);
		});
	}

	return new Function('g,params,alasql', 'var y;' + s + 'return r');
};

// SELECY * REMOVE [COLUMNS] col-list, LIKE ''
yy.Select.prototype.compileRemoveColumns = function(query) {
	var self = this;
	if (typeof this.removecolumns !== 'undefined') {
		query.removeKeys = query.removeKeys.concat(
			this.removecolumns
				.filter(function(column) {
					return typeof column.like === 'undefined';
				})
				.map(function(column) {
					return column.columnid;
				})
		);

		query.removeLikeKeys = this.removecolumns
			.filter(function(column) {
				return typeof column.like !== 'undefined';
			})
			.map(function(column) {
				//				return new RegExp((column.like.value||'').replace(/\%/g,'.*').replace(/\?|_/g,'.'),'g');
				return column.like.value;
			});
	}
};

/* global yy */

yy.Select.prototype.compileHaving = function(query) {
	if (this.having) {
		var s = this.having.toJS('g', -1);
		query.havingfns = s;

		return new Function('g,params,alasql', 'var y;return ' + s);
	}

	return function() {
		return true;
	};
};

yy.Select.prototype.compileOrder = function(query) {
	var self = this;
	self.orderColumns = [];
	if (this.order) {

		if (
			this.order &&
			this.order.length == 1 &&
			this.order[0].expression &&
			typeof this.order[0].expression == 'function'
		) {

			var func = this.order[0].expression;

			return function(a, b) {
				var ra = func(a),
					rb = func(b);
				if (ra > rb) return 1;
				if (ra == rb) return 0;
				return -1;
			};
		}

		var s = '';
		var sk = '';
		this.order.forEach(function(ord, idx) {

			if (ord.expression instanceof yy.NumValue) {
				var v = self.columns[ord.expression.value - 1];
			} else {
				var v = ord.expression;
			}
			self.orderColumns.push(v);

			var key = '$$$' + idx;

			// Date conversion
			var dg = '';
			//if(alasql.options.valueof)
			if (ord.expression instanceof yy.Column) {
				var columnid = ord.expression.columnid;
				if (query.xcolumns[columnid]) {
					var dbtypeid = query.xcolumns[columnid].dbtypeid;
					if (dbtypeid == 'DATE' || dbtypeid == 'DATETIME' || dbtypeid == 'DATETIME2')
						dg = '.valueOf()';
					// TODO Add other types mapping
				} else {
					if (alasql.options.valueof) dg = '.valueOf()'; // TODO Check
				}
				//				dg = '.valueOf()';
			}
			// COLLATE NOCASE
			if (ord.nocase) dg += '.toUpperCase()';
			s +=
				"if((a['" +
				key +
				"']||'')" +
				dg +
				(ord.direction == 'ASC' ? '>' : '<') +
				"(b['" +
				key +
				"']||'')" +
				dg +
				')return 1;';
			s += "if((a['" + key + "']||'')" + dg + "==(b['" + key + "']||'')" + dg + '){';

			/*
if(false) {			

			if(ord.expression instanceof yy.NumValue) {
				ord.expression = self.columns[ord.expression.value-1];

				ord.expression = new yy.Column({columnid:ord.expression.nick});
			};

			if(ord.expression instanceof yy.Column) {
				var columnid = ord.expression.columnid; 
				if(query.xcolumns[columnid]) {
					var dbtypeid = query.xcolumns[columnid].dbtypeid;
					if( dbtypeid == 'DATE' || dbtypeid == 'DATETIME' || dbtypeid == 'DATETIME2') dg = '.valueOf()';
					// TODO Add other types mapping
				} else {
					if(alasql.options.valueof) dg = '.valueOf()'; // TODO Check
				}
				// COLLATE NOCASE
				if(ord.nocase) dg += '.toUpperCase()';

				s += 'if((a[\''+columnid+"']||'')"+dg+(ord.direction == 'ASC'?'>':'<')+'(b[\''+columnid+"']||'')"+dg+')return 1;';
				s += 'if((a[\''+columnid+"']||'')"+dg+'==(b[\''+columnid+"']||'')"+dg+'){';

			} else {
				dg = '.valueOf()';
				// COLLATE NOCASE
				if(ord.nocase) dg += '.toUpperCase()';
				s += 'if(('+ord.toJS('a','')+"||'')"+dg+(ord.direction == 'ASC'?'>(':'<(')+ord.toJS('b','')+"||'')"+dg+')return 1;';
				s += 'if(('+ord.toJS('a','')+"||'')"+dg+'==('+ord.toJS('b','')+"||'')"+dg+'){';
			}			

			// TODO Add date comparision

}
*/
			sk += '}';
		});
		s += 'return 0;';
		s += sk + 'return -1';
		query.orderfns = s;

		return new Function('a,b', 'var y;' + s);
	}
};

// Pivot functions
/**
	Compile Pivot functions
	@param {object} query Source query
	@return {function} Pivoting functions
*/
yy.Select.prototype.compilePivot = function(query) {
	var self = this;
	/** @type {string} Main pivoting column */

	var columnid = self.pivot.columnid;
	var aggr = self.pivot.expr.aggregatorid;
	var inlist = self.pivot.inlist;

	var exprcolid = null;

	if (self.pivot.expr.expression.hasOwnProperty('columnid')) {
		exprcolid = self.pivot.expr.expression.columnid;
	} else {
		exprcolid = self.pivot.expr.expression.expression.columnid;
	}

	if (null == exprcolid) {
		throw 'columnid not found';
	}

	if (inlist) {
		inlist = inlist.map(function(l) {
			return l.expr.columnid;
		});
	}

	// Function for PIVOT post production
	return function() {
		var query = this;
		var cols = query.columns
			.filter(function(col) {
				return col.columnid != columnid && col.columnid != exprcolid;
			})
			.map(function(col) {
				return col.columnid;
			});

		var newcols = [];
		var gnewcols = {};
		var gr = {};
		var ga = {};
		var data = [];
		query.data.forEach(function(d) {
			if (!inlist || inlist.indexOf(d[columnid]) > -1) {
				var gx = cols
					.map(function(colid) {
						return d[colid];
					})
					.join('`');
				var g = gr[gx];
				if (!g) {
					g = {};
					gr[gx] = g;
					data.push(g);
					cols.forEach(function(colid) {
						g[colid] = d[colid];
					});
				}

				if (!ga[gx]) {
					ga[gx] = {};
				}

				if (ga[gx][d[columnid]]) {
					ga[gx][d[columnid]]++;
				} else {
					ga[gx][d[columnid]] = 1;
				}

				if (!gnewcols[d[columnid]]) {
					gnewcols[d[columnid]] = true;
					newcols.push(d[columnid]);
				}

				if (aggr == 'SUM' || aggr == 'AVG') {
					if (typeof g[d[columnid]] == 'undefined') g[d[columnid]] = 0;
					g[d[columnid]] += +d[exprcolid];
				} else if (aggr == 'COUNT') {
					if (typeof g[d[columnid]] == 'undefined') g[d[columnid]] = 0;
					g[d[columnid]]++;
				} else if (aggr == 'MIN') {
					if (typeof g[d[columnid]] == 'undefined') g[d[columnid]] = d[exprcolid];
					if (d[exprcolid] < g[d[columnid]]) g[d[columnid]] = d[exprcolid];
				} else if (aggr == 'MAX') {
					if (typeof g[d[columnid]] == 'undefined') g[d[columnid]] = d[exprcolid];
					if (d[exprcolid] > g[d[columnid]]) g[d[columnid]] = d[exprcolid];
				} else if (aggr == 'FIRST') {
					if (typeof g[d[columnid]] == 'undefined') g[d[columnid]] = d[exprcolid];
				} else if (aggr == 'LAST') {
					g[d[columnid]] = d[exprcolid];
				} else if (alasql.aggr[aggr]) {
					// Custom aggregator
					alasql.aggr[aggr](g[d[columnid]], d[exprcolid]);
				} else {
					throw new Error('Wrong aggregator in PIVOT clause');
				}
			}
		});

		if (aggr == 'AVG') {
			for (var gx in gr) {
				var d = gr[gx];
				for (var colid in d) {
					if (cols.indexOf(colid) == -1 && colid != exprcolid) {
						d[colid] = d[colid] / ga[gx][colid];
					}
				}
			}
		}

		// columns
		query.data = data;

		if (inlist) newcols = inlist;

		var ncol = query.columns.filter(function(col) {
			return col.columnid == exprcolid;
		})[0];
		query.columns = query.columns.filter(function(col) {
			return !(col.columnid == columnid || col.columnid == exprcolid);
		});
		newcols.forEach(function(colid) {
			var nc = cloneDeep(ncol);
			nc.columnid = colid;
			query.columns.push(nc);
		});
	};
};

// var columnid = this.pivot.columnid;

// return function(data){

// if(false) {

// }

// if(false) {

// }
// };

/**
	Compile UNPIVOT clause
	@param {object} query Query object
	@return {function} Function for unpivoting
*/
yy.Select.prototype.compileUnpivot = function(query) {
	var self = this;
	var tocolumnid = self.unpivot.tocolumnid;
	var forcolumnid = self.unpivot.forcolumnid;
	var inlist = self.unpivot.inlist.map(function(l) {
		return l.columnid;
	});

	return function() {
		var data = [];

		var xcols = query.columns
			.map(function(col) {
				return col.columnid;
			})
			.filter(function(colid) {
				return inlist.indexOf(colid) == -1 && colid != forcolumnid && colid != tocolumnid;
			});

		query.data.forEach(function(d) {
			inlist.forEach(function(colid) {
				var nd = {};
				xcols.forEach(function(xcolid) {
					nd[xcolid] = d[xcolid];
				});
				nd[forcolumnid] = colid;
				nd[tocolumnid] = d[colid];
				data.push(nd);
			});
		});

		query.data = data;

		//		});
	};
};

/*
//
// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/** 
 Calculate ROLLUP() combination
 */

var rollup = function(a, query) {
	var rr = [];
	var mask = 0;
	var glen = a.length;
	for (var g = 0; g < glen + 1; g++) {
		var ss = [];
		for (var i = 0; i < glen; i++) {
			if (a[i] instanceof yy.Column) {
				a[i].nick = escapeq(a[i].columnid);

				query.groupColumns[escapeq(a[i].columnid)] = a[i].nick;
				var aaa = a[i].nick + '\t' + a[i].toJS('p', query.sources[0].alias, query.defcols);
			} else {
				query.groupColumns[escapeq(a[i].toString())] = escapeq(a[i].toString());
				var aaa =
					escapeq(a[i].toString()) +
					'\t' +
					a[i].toJS('p', query.sources[0].alias, query.defcols);
			}

			if (mask & (1 << i)) ss.push(aaa);
		}
		rr.push(ss);
		mask = (mask << 1) + 1;
	}
	return rr;
};

/**
 Calculate CUBE()
 */
var cube = function(a, query) {
	var rr = [];
	var glen = a.length;
	var glenCube = 1 << glen;
	for (var g = 0; g < glenCube; g++) {
		var ss = [];
		for (var i = 0; i < glen; i++) {
			if (g & (1 << i))
				//ss.push(a[i]);
				//ss = cartes(ss,decartes(a[i]));

				//				var aaa = a[i].toString()+'\t'
				//					+a[i].toJS('p',query.sources[0].alias,query.defcols);

				ss = ss.concat(decartes(a[i], query));
			//
		}
		rr.push(ss);
	}
	return rr;
};

/**
 GROUPING SETS()
 */
var groupingsets = function(a, query) {
	return a.reduce(function(acc, d) {
		acc = acc.concat(decartes(d, query));
		return acc;
	}, []);
};

/**
 Cartesian production
 */
var cartes = function(a1, a2) {
	var rrr = [];
	for (var i1 = 0; i1 < a1.length; i1++) {
		for (var i2 = 0; i2 < a2.length; i2++) {
			rrr.push(a1[i1].concat(a2[i2]));
		}
	}
	return rrr;
};

/**
 Prepare groups function
 */
function decartes(gv, query) {

	if (Array.isArray(gv)) {
		var res = [[]];
		for (var t = 0; t < gv.length; t++) {
			if (gv[t] instanceof yy.Column) {

				gv[t].nick = escapeq(gv[t].columnid);
				query.groupColumns[gv[t].nick] = gv[t].nick;
				res = res.map(function(r) {
					return r.concat(
						gv[t].nick + '\t' + gv[t].toJS('p', query.sources[0].alias, query.defcols)
					);
				});
				//		 		res = res.map(function(r){return r.concat(gv[t].columnid)});
			} else if (gv[t] instanceof yy.FuncValue) {
				query.groupColumns[escapeq(gv[t].toString())] = escapeq(gv[t].toString());
				res = res.map(function(r) {
					return r.concat(
						escapeq(gv[t].toString()) +
							'\t' +
							gv[t].toJS('p', query.sources[0].alias, query.defcols)
					);
				});
				// to be defined
			} else if (gv[t] instanceof yy.GroupExpression) {
				if (gv[t].type == 'ROLLUP') res = cartes(res, rollup(gv[t].group, query));
				else if (gv[t].type == 'CUBE') res = cartes(res, cube(gv[t].group, query));
				else if (gv[t].type == 'GROUPING SETS')
					res = cartes(res, groupingsets(gv[t].group, query));
				else throw new Error('Unknown grouping function');
			} else if (gv[t] === '') {

				res = [['1\t1']];
			} else {
				//				if(gv[t])

				res = res.map(function(r) {
					query.groupColumns[escapeq(gv[t].toString())] = escapeq(gv[t].toString());
					return r.concat(
						escapeq(gv[t].toString()) +
							'\t' +
							gv[t].toJS('p', query.sources[0].alias, query.defcols)
					);
				});
				//				res = res.concat(gv[t]);
			}

		}
		return res;
	} else if (gv instanceof yy.FuncValue) {

		query.groupColumns[escapeq(gv.toString())] = escapeq(gv.toString());
		return [gv.toString() + '\t' + gv.toJS('p', query.sources[0].alias, query.defcols)];
	} else if (gv instanceof yy.Column) {
		gv.nick = escapeq(gv.columnid);
		query.groupColumns[gv.nick] = gv.nick;
		return [gv.nick + '\t' + gv.toJS('p', query.sources[0].alias, query.defcols)]; // Is this ever happened?
		// } else if(gv instanceof yy.Expression) {
		// 	return [gv.columnid]; // Is this ever happened?
	} else {
		query.groupColumns[escapeq(gv.toString())] = escapeq(gv.toString());
		return [
			escapeq(gv.toString()) + '\t' + gv.toJS('p', query.sources[0].alias, query.defcols),
		];
		//			throw new Error('Single argument in the group without array');
	}

}

/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Select.prototype.compileDefCols = function(query, databaseid) {

	var defcols = {'.': {}};
	if (this.from) {
		this.from.forEach(function(fr) {
			defcols['.'][fr.as || fr.tableid] = true;
			if (fr instanceof yy.Table) {
				var alias = fr.as || fr.tableid;

				var table = alasql.databases[fr.databaseid || databaseid].tables[fr.tableid];

				if (undefined === table) {
					throw new Error('Table does not exist: ' + fr.tableid);
				}

				if (table.columns) {
					table.columns.forEach(function(col) {
						if (defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if (fr instanceof yy.Select) {
			} else if (fr instanceof yy.Search) {
			} else if (fr instanceof yy.ParamValue) {
			} else if (fr instanceof yy.VarValue) {
			} else if (fr instanceof yy.FuncValue) {
			} else if (fr instanceof yy.FromData) {
			} else if (fr instanceof yy.Json) {
			} else if (fr.inserted) {
			} else {

				throw new Error('Unknown type of FROM clause');
			}
		});
	}

	if (this.joins) {
		this.joins.forEach(function(jn) {
			defcols['.'][jn.as || jn.table.tableid] = true;

			if (jn.table) {
				var alias = jn.table.tableid;
				if (jn.as) alias = jn.as;
				var alias = jn.as || jn.table.tableid;
				var table =
					alasql.databases[jn.table.databaseid || databaseid].tables[jn.table.tableid];

				if (table.columns) {
					table.columns.forEach(function(col) {
						if (defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if (jn.select) {
			} else if (jn.param) {
			} else if (jn.func) {
			} else {
				throw new Error('Unknown type of FROM clause');
			}
		});
	}
	// for(var k in defcols) {
	// 	if(defcols[k] == '-') defcols[k] = undefined;
	// }

	return defcols;
};

/*
//
// UNION for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT UNION statement

yy.Union = function(params) {
	return yy.extend(this, params);
};
yy.Union.prototype.toString = function() {
	return 'UNION';
};

yy.Union.prototype.compile = function(tableid) {
	return null;
};

/*
//
// CROSS AND OUTER APPLY for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Apply = function(params) {
	return yy.extend(this, params);
};

yy.Apply.prototype.toString = function() {
	var s = this.applymode + ' APPLY (' + this.select.toString() + ')';

	if (this.as) s += ' AS ' + this.as;

	return s;
};

/*
//
// CROSS AND OUTER APPLY for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Over = function(params) {
	return yy.extend(this, params);
};
yy.Over.prototype.toString = function() {
	var s = 'OVER (';
	if (this.partition) {
		s += 'PARTITION BY ' + this.partition.toString();
		if (this.order) s += ' ';
	}
	if (this.order) {
		s += 'ORDER BY ' + this.order.toString();
	}
	s += ')';
	return s;
};

/*
//
// Expressions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/**
  	Expression statement ( = 2*2; )
  	@class 
	@param {object} params Initial parameters
*/
yy.ExpressionStatement = function(params) {
	return yy.extend(this, params);
};

/**
	Convert AST to string
	@this ExpressionStatement
	@return {string}
*/
yy.ExpressionStatement.prototype.toString = function() {
	return this.expression.toString();
};
/**
	Execute statement
	@param {string} databaseid Database identificatro
	@param {object} params Statement parameters
	@param {statement-callback} cb Callback
	@return {object} Result value
*/
yy.ExpressionStatement.prototype.execute = function(databaseid, params, cb) {
	if (this.expression) {

		alasql.precompile(this, databaseid, params); // Precompile queries
		var exprfn = new Function(
			'params,alasql,p',
			'var y;return ' + this.expression.toJS('({})', '', null)
		).bind(this);
		var res = exprfn(params, alasql);
		if (cb) {
			res = cb(res);
		}
		return res;
	}
};

/**
	Expression class
	@class
	@param {object} params Initial parameters
*/

yy.Expression = function(params) {
	return yy.extend(this, params);
};

/**
	Convert AST to string
	@this ExpressionStatement
	@return {string}
*/
yy.Expression.prototype.toString = function(dontas) {
	var s = this.expression.toString(dontas);
	if (this.order) {
		s += ' ' + this.order.toString();
	}
	if (this.nocase) {
		s += ' COLLATE NOCASE';
	}
	if (this.direction) {
		s += ' ' + this.direction;
	}
	return s;
};

/**
	Find aggregator in AST subtree
	@this ExpressionStatement
	@param {object} query Query object
*/
yy.Expression.prototype.findAggregator = function(query) {
	if (this.expression.findAggregator) {
		this.expression.findAggregator(query);
	}
};

/**
	Convert AST to JavaScript expression
	@this ExpressionStatement
	@param {string} context Context string, e.g. 'p','g', or 'x'
	@param {string} tableid Default table name
	@param {object} defcols Default columns dictionary
	@return {string} JavaScript expression
*/

yy.Expression.prototype.toJS = function(context, tableid, defcols) {

	if (this.expression.reduced) {
		return 'true';
	}
	return this.expression.toJS(context, tableid, defcols);
};

/**
	Compile AST to JavaScript expression
	@this ExpressionStatement
	@param {string} context Context string, e.g. 'p','g', or 'x'
	@param {string} tableid Default table name
	@param {object} defcols Default columns dictionary
	@return {string} JavaScript expression
*/

yy.Expression.prototype.compile = function(context, tableid, defcols) {

	if (this.reduced) {
		return returnTrue();
	}
	return new Function('p', 'var y;return ' + this.toJS(context, tableid, defcols));
};

/**
	JavaScript class
	@class
*/
yy.JavaScript = function(params) {
	return yy.extend(this, params);
};
yy.JavaScript.prototype.toString = function() {
	var s = '``' + this.value + '``';
	return s;
};

yy.JavaScript.prototype.toJS = function(/* context, tableid, defcols*/) {

	return '(' + this.value + ')';
};
yy.JavaScript.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	var expr = new Function('params,alasql,p', this.value);
	expr(params, alasql);
	if (cb) {
		res = cb(res);
	}
	return res;
};

/**
	Literal class
	@class
	@example
	MyVar, [My vairable], `MySQL variable`
*/

yy.Literal = function(params) {
	return yy.extend(this, params);
};
yy.Literal.prototype.toString = function(dontas) {
	var s = this.value;
	if (this.value1) {
		s = this.value1 + '.' + s;
	}
	if (this.alias && !dontas) s += ' AS ' + this.alias;
	//	else s = tableid+'.'+s;
	return s;
};

/**
	Join class
	@class
*/

yy.Join = function(params) {
	return yy.extend(this, params);
};
yy.Join.prototype.toString = function() {
	var s = ' ';
	if (this.joinmode) {
		s += this.joinmode + ' ';
	}
	s += 'JOIN ' + this.table.toString();
	return s;
};

// }

/**
	Table class
	@class
*/

yy.Table = function(params) {
	return yy.extend(this, params);
};
yy.Table.prototype.toString = function(dontas) {
	var s = this.tableid;
	//	if(this.joinmode)
	if (this.databaseid) {
		s = this.databaseid + '.' + s;
	}
	return s;
};

/**
	View class
	@class
*/

yy.View = function(params) {
	return yy.extend(this, params);
};
yy.View.prototype.toString = function() {
	var s = this.viewid;
	//	if(this.joinmode)
	if (this.databaseid) {
		s = this.databaseid + '.' + s;
	}
	return s;
};

/**
	Binary operation class
	@class
*/
yy.Op = function(params) {
	return yy.extend(this, params);
};
yy.Op.prototype.toString = function() {
	if (this.op === 'IN' || this.op === 'NOT IN') {
		return this.left.toString() + ' ' + this.op + ' (' + this.right.toString() + ')';
	}
	if (this.op === 'BETWEEN' || this.op === 'NOT BETWEEN') {
		return (
			this.left.toString() +
			' ' +
			this.op +
			' ' +
			this.right1.toString() +
			' AND ' +
			this.right2.toString()
		);
	}
	if (this.allsome) {
		return (
			this.left.toString() +
			' ' +
			this.op +
			' ' +
			this.allsome +
			' (' +
			this.right.toString() +
			')'
		);
	}
	if (this.op === '->' || this.op === '!') {
		var s = this.left.toString() + this.op;

		if (typeof this.right !== 'string' && typeof this.right !== 'number') {
			s += '(';
		}

		s += this.right.toString();

		if (typeof this.right !== 'string' && typeof this.right !== 'number') {
			s += ')';
		}

		return s;
	}
	return (
		this.left.toString() +
		' ' +
		this.op +
		' ' +
		(this.allsome ? this.allsome + ' ' : '') +
		this.right.toString()
	);
};

yy.Op.prototype.findAggregator = function(query) {

	if (this.left && this.left.findAggregator) {
		this.left.findAggregator(query);
	}
	// Do not go in > ALL
	if (this.right && this.right.findAggregator && !this.allsome) {
		this.right.findAggregator(query);
	}
};

yy.Op.prototype.toType = function(tableid) {
	if (['-', '*', '/', '%', '^'].indexOf(this.op) > -1) {
		return 'number';
	}
	if (['||'].indexOf(this.op) > -1) {
		return 'string';
	}

	if (this.op === '+') {
		if (alasql.options.useDBType === 'mysql') {
			return 'number';
		}
		if (this.left.toType(tableid) === 'string' || this.right.toType(tableid) === 'string') {
			return 'string';
		}
		if (this.left.toType(tableid) === 'number' || this.right.toType(tableid) === 'number') {
			return 'number';
		}
	}

	if (
		[
			'AND',
			'OR',
			'NOT',
			'=',
			'==',
			'===',
			'!=',
			'!==',
			'!===',
			'>',
			'>=',
			'<',
			'<=',
			'IN',
			'NOT IN',
			'LIKE',
			'NOT LIKE',
			'REGEXP',
			'GLOB',
		].indexOf(this.op) > -1
	) {
		return 'boolean';
	}

	if (
		this.op === 'BETWEEN' ||
		this.op === 'NOT BETWEEN' ||
		this.op === 'IS NULL' ||
		this.op === 'IS NOT NULL'
	) {
		return 'boolean';
	}

	if (this.allsome) {
		return 'boolean';
	}

	if (!this.op) {
		return this.left.toType();
	}

	return 'unknown';
};

yy.Op.prototype.toJS = function(context, tableid, defcols) {

	var s;
	var refs = [];
	var op = this.op;
	var _this = this;
	//var leftJS = function(){return _this.left.toJS(context,tableid, defcols)};
	//var rightJS = function(){return _this.right.toJS(context,tableid, defcols)};
	var accessedLeft = false,
		accessedRight = false;
	var ref = function(expr) {
		if (expr.toJS) {
			expr = expr.toJS(context, tableid, defcols);
		}
		var i = refs.push(expr) - 1;
		return 'y[' + i + ']';
	};
	var leftJS = function() {
		return ref(_this.left);
	};
	var rightJS = function() {
		return ref(_this.right);
	};

	if (this.op === '=') {
		op = '===';
	} else if (this.op === '<>') {
		op = '!=';
	} else if (this.op === 'OR') {
		op = '||';
	}

	// Arrow operator
	if (this.op === '->') {
		// Expression to prevent error if object is empty (#344)
		var ljs = '(' + leftJS() + '||{})';

		if (typeof this.right === 'string') {
			s = ljs + '["' + this.right + '"]';
		} else if (typeof this.right === 'number') {
			s = ljs + '[' + this.right + ']';
		} else if (this.right instanceof yy.FuncValue) {
			var ss = [];
			if (!(!this.right.args || 0 === this.right.args.length)) {
				var ss = this.right.args.map(ref);
			}
			s = '' + ljs + "['" + this.right.funcid + "'](" + ss.join(',') + ')';
		} else {
			s = '' + ljs + '[' + rightJS() + ']';
		}
	}

	if (this.op === '!') {
		if (typeof this.right === 'string') {
			s =
				'' +
				'alasql.databases[alasql.useid].objects[' +
				leftJS() +
				']["' +
				this.right +
				'"]';
		}
		// TODO - add other cases
	}

	if (this.op === 'IS') {
		s =
			'' +
			'(' +
			'(' +
			leftJS() +
			'==null)' + // Cant be ===
			' === ' +
			'(' +
			rightJS() +
			'==null)' + // Cant be ===
			')';
	}

	if (this.op === '==') {
		s = '' + 'alasql.utils.deepEqual(' + leftJS() + ',' + rightJS() + ')';
	}

	if (this.op === '===' || this.op === '!===') {
		s =
			'' +
			'(' +
			(this.op === '!===' ? '!' : '') +
			'(' +
			'(' +
			leftJS() +
			').valueOf()' +
			'===' +
			'(' +
			rightJS() +
			').valueOf()' +
			')' +
			')';
	}

	if (this.op === '!==') {
		s = '' + '(!alasql.utils.deepEqual(' + leftJS() + ',' + rightJS() + '))';
	}
	if (this.op === '||') {
		s = '' + "(''+(" + leftJS() + "||'')+(" + rightJS() + '||""))';
	}
	if (this.op === 'LIKE' || this.op === 'NOT LIKE') {
		var s =
			'(' +
			(this.op === 'NOT LIKE' ? '!' : '') +
			'alasql.utils.like(' +
			rightJS() +
			',' +
			leftJS();
		if (this.escape) {
			s += ',' + ref(this.escape);
		}
		s += '))';
	}
	if (this.op === 'REGEXP') {
		s = 'alasql.stdfn.REGEXP_LIKE(' + leftJS() + ',' + rightJS() + ')';
	}
	if (this.op === 'GLOB') {
		s = 'alasql.utils.glob(' + leftJS() + ',' + rightJS() + ')';
	}

	if (this.op === 'BETWEEN' || this.op === 'NOT BETWEEN') {
		var left = leftJS();
		s =
			'' +
			'(' +
			(this.op === 'NOT BETWEEN' ? '!' : '') +
			'(' +
			'(' +
			ref(this.right1) +
			'<=' +
			left +
			') && (' +
			left +
			'<=' +
			ref(this.right2) +
			')' +
			')' +
			')';

	}

	if (this.op === 'IN') {
		if (this.right instanceof yy.Select) {
			s = '(';
			//			s += 'this.query.queriesdata['+this.queriesidx+']';
			//			s += 'alasql.utils.flatArray(this.query.queriesfn['+(this.queriesidx)+'](params,null,context))';
			s +=
				'alasql.utils.flatArray(this.queriesfn[' +
				this.queriesidx +
				'](params,null,' +
				context +
				'))';
			s += '.indexOf(';
			s += leftJS() + ')>-1)';
		} else if (Array.isArray(this.right)) {
			//			if(this.right.length == 0) return 'false';
			s = '([' + this.right.map(ref).join(',') + '].indexOf(' + leftJS() + ')>-1)';

		} else {
			s = '(' + rightJS() + '.indexOf(' + leftJS() + ')>-1)';

			//		} else {
			//			throw new Error('Wrong IN operator without SELECT part');
		}
	}

	if (this.op === 'NOT IN') {
		if (this.right instanceof yy.Select) {
			s = '(';
			//this.query.queriesdata['+this.queriesidx+']
			//			s += 'alasql.utils.flatArray(this.query.queriesfn['+(this.queriesidx)+'](params,null,p))';
			s += 'alasql.utils.flatArray(this.queriesfn[' + this.queriesidx + '](params,null,p))';
			s += '.indexOf(';
			s += leftJS() + ')<0)';
		} else if (Array.isArray(this.right)) {
			//			if(this.right.length == 0) return 'true';
			s = '([' + this.right.map(ref).join(',') + '].indexOf(';
			s += leftJS() + ')<0)';
		} else {
			s = '(' + rightJS() + '.indexOf(';
			s += leftJS() + ')==-1)';

			//			throw new Error('Wrong NOT IN operator without SELECT part');
		}
	}

	if (this.allsome === 'ALL') {
		var s;
		if (this.right instanceof yy.Select) {
			//			var s = 'this.query.queriesdata['+this.queriesidx+']';
			s =
				'alasql.utils.flatArray(this.query.queriesfn[' +
				this.queriesidx +
				'](params,null,p))';

			s += '.every(function(b){return (';
			s += leftJS() + ')' + op + 'b})';
		} else if (Array.isArray(this.right)) {
			s =
				'' +
				(this.right.length == 1
					? ref(this.right[0])
					: '[' + this.right.map(ref).join(',') + ']');
			s += '.every(function(b){return (';
			s += leftJS() + ')' + op + 'b})';
		} else {
			throw new Error('NOT IN operator without SELECT');
		}
	}

	if (this.allsome === 'SOME' || this.allsome === 'ANY') {
		var s;
		if (this.right instanceof yy.Select) {
			//			var s = 'this.query.queriesdata['+this.queriesidx+']';
			s =
				'alasql.utils.flatArray(this.query.queriesfn[' +
				this.queriesidx +
				'](params,null,p))';
			s += '.some(function(b){return (';
			s += leftJS() + ')' + op + 'b})';
		} else if (Array.isArray(this.right)) {
			s =
				'' +
				(this.right.length == 1
					? ref(this.right[0])
					: '[' + this.right.map(ref).join(',') + ']');
			s += '.some(function(b){return (';
			s += leftJS() + ')' + op + 'b})';
		} else {
			throw new Error('SOME/ANY operator without SELECT');
		}
	}

	// Special case for AND optimization (if reduced)
	if (this.op === 'AND') {
		if (this.left.reduced) {
			if (this.right.reduced) {
				return 'true';
			} else {
				s = rightJS();
			}
		} else if (this.right.reduced) {
			s = leftJS();
		}

		// Otherwise process as regular operation (see below)
		op = '&&';
	}

	// if(this.op === '^') {
	// 	// return 	'Math.pow('
	// 	// 		+ leftJS()
	// 	// 		+ ','
	// 	// 		+ rightJS()
	// 	// 		+ ')';
	// }

	// Change names

	var expr = s || '(' + leftJS() + op + rightJS() + ')';

	var declareRefs = 'y=[(' + refs.join('), (') + ')]';

	if (op === '&&' || op === '||' || op === 'IS' || op === 'IS NULL' || op === 'IS NOT NULL') {
		return '(' + declareRefs + ', ' + expr + ')';
	}

	return (
		'(' + declareRefs + ', ' + 'y.some(function(e){return e == null}) ? void 0 : ' + expr + ')'
	);
};

yy.VarValue = function(params) {
	return yy.extend(this, params);
};
yy.VarValue.prototype.toString = function() {
	return '@' + this.variable;
};

yy.VarValue.prototype.toType = function() {
	return 'unknown';
};

yy.VarValue.prototype.toJS = function() {
	return "alasql.vars['" + this.variable + "']";
};

yy.NumValue = function(params) {
	return yy.extend(this, params);
};
yy.NumValue.prototype.toString = function() {
	return this.value.toString();
};

yy.NumValue.prototype.toType = function() {
	return 'number';
};

yy.NumValue.prototype.toJS = function() {
	return '' + this.value;
};

yy.StringValue = function(params) {
	return yy.extend(this, params);
};
yy.StringValue.prototype.toString = function() {
	return "'" + this.value.toString() + "'";
};

yy.StringValue.prototype.toType = function() {
	return 'string';
};

yy.StringValue.prototype.toJS = function() {

	//	return "'"+doubleqq(this.value)+"'";
	return "'" + escapeq(this.value) + "'";
};

yy.DomainValueValue = function(params) {
	return yy.extend(this, params);
};
yy.DomainValueValue.prototype.toString = function() {
	return 'VALUE';
};

yy.DomainValueValue.prototype.toType = function() {
	return 'object';
};

yy.DomainValueValue.prototype.toJS = function(context, tableid, defcols) {

	//	return "'"+doubleqq(this.value)+"'";
	return context;
};

yy.ArrayValue = function(params) {
	return yy.extend(this, params);
};
yy.ArrayValue.prototype.toString = function() {
	return 'ARRAY[]';
};

yy.ArrayValue.prototype.toType = function() {
	return 'object';
};

yy.ArrayValue.prototype.toJS = function(context, tableid, defcols) {

	//	return "'"+doubleqq(this.value)+"'";
	return (
		'[(' +
		this.value
			.map(function(el) {
				return el.toJS(context, tableid, defcols);
			})
			.join('), (') +
		')]'
	);
};

yy.LogicValue = function(params) {
	return yy.extend(this, params);
};
yy.LogicValue.prototype.toString = function() {
	return this.value ? 'TRUE' : 'FALSE';
};

yy.LogicValue.prototype.toType = function() {
	return 'boolean';
};

yy.LogicValue.prototype.toJS = function() {
	return this.value ? 'true' : 'false';
};

yy.NullValue = function(params) {
	return yy.extend(this, params);
};
yy.NullValue.prototype.toString = function() {
	return 'NULL';
};
yy.NullValue.prototype.toJS = function() {
	return 'undefined';
	//	return 'undefined';
};

yy.ParamValue = function(params) {
	return yy.extend(this, params);
};
yy.ParamValue.prototype.toString = function() {
	return '$' + this.param;
};
yy.ParamValue.prototype.toJS = function() {
	if (typeof this.param === 'string') {
		return "params['" + this.param + "']";
	}

	return 'params[' + this.param + ']';
};

yy.UniOp = function(params) {
	return yy.extend(this, params);
};
yy.UniOp.prototype.toString = function() {
	var s;
	s = void 0;
	if (this.op === '~') {
		s = this.op + this.right.toString();
	}
	if (this.op === '-') {
		s = this.op + this.right.toString();
	}
	if (this.op === '+') {
		s = this.op + this.right.toString();
	}
	if (this.op === '#') {
		s = this.op + this.right.toString();
	}
	if (this.op === 'NOT') {
		s = this.op + '(' + this.right.toString() + ')';
	}
	if (this.op === null) {
		s = '(' + this.right.toString() + ')';
	}
	if (!s) {
		s = '(' + this.right.toString() + ')';
	}
	return s;
};

yy.UniOp.prototype.findAggregator = function(query) {
	if (this.right.findAggregator) {
		this.right.findAggregator(query);
	}
};

yy.UniOp.prototype.toType = function() {
	if (this.op === '-') {
		return 'number';
	}

	if (this.op === '+') {
		return 'number';
	}

	if (this.op === 'NOT') {
		return 'boolean';
	}

	// Todo: implement default case
};

yy.UniOp.prototype.toJS = function(context, tableid, defcols) {
	if (this.op === '~') {
		return '(~(' + this.right.toJS(context, tableid, defcols) + '))';
	}

	if (this.op === '-') {
		return '(-(' + this.right.toJS(context, tableid, defcols) + '))';
	}

	if (this.op === '+') {
		return '(' + this.right.toJS(context, tableid, defcols) + ')';
	}

	if (this.op === 'NOT') {
		return '!(' + this.right.toJS(context, tableid, defcols) + ')';
	}

	if (this.op === '#') {
		if (this.right instanceof yy.Column) {
			return "(alasql.databases[alasql.useid].objects['" + this.right.columnid + "'])";
		} else {
			return (
				'(alasql.databases[alasql.useid].objects[' +
				this.right.toJS(context, tableid, defcols) +
				'])'
			);
		}
	}

	// Please avoid === here
	if (this.op == null) {
		// jshint ignore:line
		return '(' + this.right.toJS(context, tableid, defcols) + ')';
	}

	// Todo: implement default case.
};

yy.Column = function(params) {
	return yy.extend(this, params);
};
yy.Column.prototype.toString = function(dontas) {
	var s;
	if (this.columnid == +this.columnid) {
		// jshint ignore:line
		s = '[' + this.columnid + ']';
	} else {
		s = this.columnid;
	}
	if (this.tableid) {
		if (+this.columnid === this.columnid) {
			s = this.tableid + s;
		} else {
			s = this.tableid + '.' + s;
		}
		if (this.databaseid) {
			s = this.databaseid + '.' + s;
		}
	}
	if (this.alias && !dontas) s += ' AS ' + this.alias;
	return s;
};

yy.Column.prototype.toType = function(dontas) {
	return 'unknown';
};

yy.Column.prototype.toJS = function(context, tableid, defcols) {

	var s = '';
	if (!this.tableid && tableid === '' && !defcols) {
		if (this.columnid !== '_') {
			s = context + "['" + this.columnid + "']";
		} else {
			if (context === 'g') {
				s = "g['_']";
			} else {
				s = context;
			}
		}
	} else {
		if (context === 'g') {
			// if(this.columnid == '_') {
			// } else {
			s = "g['" + this.nick + "']";
			// }
		} else if (this.tableid) {
			if (this.columnid !== '_') {
				// if() {
				// s = context+'[\''+tableid + '\'][\''+this.tableid+'\'][\''+this.columnid+'\']';
				// } else {
				s = context + "['" + this.tableid + "']['" + this.columnid + "']";
				// }
			} else {
				if (context === 'g') {
					s = "g['_']";
				} else {
					s = context + "['" + this.tableid + "']";
				}
			}
		} else if (defcols) {
			var tbid = defcols[this.columnid];
			if (tbid === '-') {
				throw new Error(
					'Cannot resolve column "' +
						this.columnid +
						'" because it exists in two source tables'
				);
			} else if (tbid) {
				if (this.columnid !== '_') {
					s = context + "['" + tbid + "']['" + this.columnid + "']";
				} else {
					s = context + "['" + tbid + "']";
				}

			} else {
				if (this.columnid !== '_') {
					// if(defcols['.'][this.tableid]) {

					// 	s = context+'[\''+tableid + '\'][\''+this.tableid + '\'][\''+this.columnid+'\']';
					// } else {
					s = context + "['" + (this.tableid || tableid) + "']['" + this.columnid + "']";
					// }
				} else {
					s = context + "['" + (this.tableid || tableid) + "']";
				}
			}
		} else if (tableid === -1) {
			//			if(this.columnid != '') {
			s = context + "['" + this.columnid + "']";
			//			} else {
			//				s = context;
			//			}
		} else {
			if (this.columnid !== '_') {
				s = context + "['" + (this.tableid || tableid) + "']['" + this.columnid + "']";
			} else {
				s = context + "['" + (this.tableid || tableid) + "']";
			}
		}
	}

	//	console.trace(new Error());

	return s;
};

yy.AggrValue = function(params) {
	return yy.extend(this, params);
};
yy.AggrValue.prototype.toString = function(dontas) {
	var s = '';
	if (this.aggregatorid === 'REDUCE') {
		s += this.funcid + '(';
	} else {
		s += this.aggregatorid + '(';
	}

	if (this.distinct) {
		s += 'DISTINCT ';
	}

	if (this.expression) {
		s += this.expression.toString();
	}

	s += ')';

	if (this.over) {
		s += ' ' + this.over.toString();
	}

	if (this.alias && !dontas) s += ' AS ' + this.alias;
	//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.AggrValue.prototype.findAggregator = function(query) {

	//	var colas = this.as || this.toString();

	var colas = escapeq(this.toString()) + ':' + query.selectGroup.length;

	//		if(!query.selectColumns[colas]) {
	//		}

	var found = false;

	if (!found) {
		if (!this.nick) {
			this.nick = colas;
			var found = false;
			for (var i = 0; i < query.removeKeys.length; i++) {
				if (query.removeKeys[i] === colas) {
					found = true;
					break;
				}
			}
			if (!found) {
				query.removeKeys.push(colas);
			}
		}
		query.selectGroup.push(this);
	}

	//		this.reduced = true;
	return;
};

yy.AggrValue.prototype.toType = function() {
	if (['SUM', 'COUNT', 'AVG', 'AGGR', 'VAR', 'STDDEV'].indexOf(this.aggregatorid) > -1) {
		return 'number';
	}

	if (['ARRAY'].indexOf(this.aggregatorid) > -1) {
		return 'array';
	}

	if (['MIN', 'MAX', 'FIRST', 'LAST'].indexOf(this.aggregatorid) > -1) {
		if (this.expression.toType) {
			return this.expression.toType();
		}
	}
	return 'unknown';
	// todo: implement default;
};

yy.AggrValue.prototype.toJS = function(/*context, tableid, defcols*/) {

	var colas = this.nick;
	if (colas === undefined) {
		colas = this.toString();
	}
	return "g['" + colas + "']";
};

yy.OrderExpression = function(params) {
	return yy.extend(this, params);
};
yy.OrderExpression.prototype.toString = yy.Expression.prototype.toString;

yy.GroupExpression = function(params) {
	return yy.extend(this, params);
};
yy.GroupExpression.prototype.toString = function() {
	return this.type + '(' + this.group.toString() + ')';
};

// Alasql Linq library

yy.FromData = function(params) {
	return yy.extend(this, params);
};
yy.FromData.prototype.toString = function() {
	if (this.data) return 'DATA(' + ((Math.random() * 10e15) | 0) + ')';
	else return '?';
};
yy.FromData.prototype.toJS = function() {

};

yy.Select.prototype.exec = function(params, cb) {
	if (this.preparams) params = this.preparams.concat(params);

	var databaseid = alasql.useid;
	db = alasql.databases[databaseid];
	var sql = this.toString();
	var hh = hash(sql);

	var statement = this.compile(databaseid);
	if (!statement) return;
	statement.sql = sql;
	statement.dbversion = db.dbversion;

	// Secure sqlCache size
	if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
		db.resetSqlCache();
	}
	db.sqlCacheSize++;
	db.sqlCache[hh] = statement;
	var res = (alasql.res = statement(params, cb));
	return res;
};

yy.Select.prototype.Select = function() {
	var self = this;
	var agrs = [];
	if (arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);
	} else if (arguments.length == 1) {
		if (Array.isArray(arguments[0])) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	self.columns = [];

	args.forEach(function(arg) {
		if (typeof arg == 'string') {
			self.columns.push(new yy.Column({columnid: arg}));
		} else if (typeof arg == 'function') {
			var pari = 0;
			if (self.preparams) {
				pari = self.preparams.length;
			} else {
				self.preparams = [];
			}
			self.preparams.push(arg);
			self.columns.push(new yy.Column({columnid: '*', func: arg, param: pari}));
		} else {
			// Unknown type
		}
	});

	return self;
};

yy.Select.prototype.From = function(tableid) {
	var self = this;
	if (!self.from) self.from = [];
	if (Array.isArray(tableid)) {
		var pari = 0;
		if (self.preparams) {
			pari = self.preparams.length;
		} else {
			self.preparams = [];
		}
		self.preparams.push(tableid);
		self.from.push(new yy.ParamValue({param: pari}));
	} else if (typeof tableid == 'string') {
		self.from.push(new yy.Table({tableid: tableid}));
	} else {
		throw new Error('Unknown arguments in From() function');
	}
	return self;
};

yy.Select.prototype.OrderBy = function() {
	var self = this;
	var agrs = [];

	self.order = [];

	if (arguments.length == 0) {
		//		self.order.push(new yy.OrderExpression({expression: new yy.Column({columnid:"_"}), direction:'ASC'}));
		args = ['_'];
	} else if (arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);
	} else if (arguments.length == 1) {
		if (Array.isArray(arguments[0])) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	if (args.length > 0) {
		args.forEach(function(arg) {
			var expr = new yy.Column({columnid: arg});
			if (typeof arg == 'function') {
				expr = arg;
			}
			self.order.push(new yy.OrderExpression({expression: expr, direction: 'ASC'}));
		});
	}
	return self;
};

yy.Select.prototype.Top = function(topnum) {
	var self = this;
	self.top = new yy.NumValue({value: topnum});
	return self;
};

yy.Select.prototype.GroupBy = function() {
	var self = this;
	var agrs = [];

	if (arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);
	} else if (arguments.length == 1) {
		if (Array.isArray(arguments[0])) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	self.group = [];

	args.forEach(function(arg) {
		var expr = new yy.Column({columnid: arg});
		self.group.push(expr);
	});

	return self;
};

yy.Select.prototype.Where = function(expr) {
	var self = this;
	if (typeof expr == 'function') {
		self.where = expr;
	}
	return self;
};

/*
//
// Functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/
function isDateOprFunc(funcid) {
	return {DATE_SUB: 'dataOp', DATE_ADD: 'dataOp', DATEDIFF: 'dataOp'}[funcid.toUpperCase()] || '';
}

yy.FuncValue = function(params) {
	return yy.extend(this, params);
};

yy.FuncValue.prototype.toType = function() {
	var funcid = this.funcid.toUpperCase();
	if (
		[
			'ABS',
			'ACOS',
			'ASCII',
			'ASIN',
			'ATAN',
			'ATAN2',
			'ATAN',
			'AVG',
			'BENCHMARK',
			'BIT_AND',
			'BIT_COUNT',
			'BIT_LENGTH',
			'BIT_OR',
			'BIT_XOR',
			'CEIL',
			'CEILING',
			'CHAR_LENGTH',
			'CHARACTER_LENGTH',
			'COERCIBILITY',
			'CONNECTION_ID',
			'COS',
			'COT',
			'COUNT',
			'COUNT',
			'CRC32',
			'CUME_DIST',
			'CURRENT_ROLE',
			'CURRENT_USER',
			'DATEDIFF',
			'DAY',
			'DAYOFMONTH',
			'DAYOFWEEK',
			'DAYOFYEAR',
			'DIV',
		].indexOf(funcid) > -1
	) {
		return 'number';
	}

	if (
		[
			'ADDDATE',
			'ADDTIME',
			'CONVERT_TZ',
			'CURDATE',
			'CURRENT_DATE',
			'CURRENT_TIME',
			'CURRENT_TIMESTAMP',
			'CURTIME',
			'DATABASE',
			'DATE',
			'DATE_ADD',
			'DATE_FORMAT',
			'DATE_SUB',
		].indexOf(funcid) > -1
	) {
		return 'date';
	}

	if (
		[
			'AES_DECRYPT',
			'AES_ENCRYPT',
			'ASYMMETRIC_DECRYPT',
			'ASYMMETRIC_DERIVE',
			'ASYMMETRIC_ENCRYPT',
			'ASYMMETRIC_SIGN',
			'BIN',
			'BIN_TO_UUID',
			'BINARY',
			'CHAR',
			'CHARSET',
			'COLLATION',
			'COMPRESS',
			'CONCAT',
			'CONCAT_WS',
			'CONV',
			'CONCAT_WS',
			'CREATE_ASYMMETRIC_PRIV_KEY',
			'CREATE_ASYMMETRIC_PUB_KEY',
			'DAYNAME',
			'DECODE',
			'DES_DECRYPT',
			'DES_ENCRYPT',
		].indexOf(funcid) > -1
	) {
		return 'string';
	}

	if (['AND', 'ASYMMETRIC_VERIFY'].indexOf(funcid) > -1) {
		return 'booble';
	}

	if (
		['ANY_VALUE', 'COALESCE', 'CONVERT', 'DEFAULT'].indexOf(funcid) > -1 &&
		this.args &&
		this.args[0]
	) {
		return this.args[0].toType();
	}

	return 'unknown';
};
yy.FuncValue.prototype.toString = function(dontas) {
	var s = '';
	var funcid = this.funcid;
	if (isDateOprFunc(this.pfuncid || '') && funcid.toUpperCase() === 'INTERVAL') {
		s += this.funcid + ' ';
		if (this.args && this.args.length > 0) {
			s += this.args
				.map(function(arg, index) {
					if (index === 0) {
						return arg.toString();
					} else if (index === 1) {
						if (arg instanceof yy.StringValue) {
							return arg.value;
						}
						return arg.toString();
					}
				})
				.join(' ');
		}
		if (this.as && !dontas) s += ' AS ' + this.as.toString();
		return s;
	}

	if (alasql.fn[funcid]) {
		s += funcid;
	} else if (alasql.aggr[funcid]) {
		s += funcid;
	} else if (alasql.stdlib[funcid.toUpperCase()] || alasql.stdfn[funcid.toUpperCase()]) {
		s += this.funcid.toUpperCase();
	} else {
		console.log('function not support', funcid);
		s += funcid;
	}

	s += '(';
	if (this.args && this.args.length > 0) {
		s += this.args
			.map(function(arg) {
				arg.pfuncid = funcid;
				return arg.toString();
			})
			.join(',');
	}
	s += ')';
	if (this.as && !dontas) s += ' AS ' + this.as.toString();
	//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.FuncValue.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	alasql.precompile(this, databaseid, params); // Precompile queries

	var expr = new Function('params,alasql', 'var y;return ' + this.toJS('', '', null));
	expr(params, alasql);
	if (cb) res = cb(res);
	return res;
};

yy.FuncValue.prototype.findAggregator = function(query) {
	if (this.args && this.args.length > 0) {
		this.args.forEach(function(arg) {
			if (arg.findAggregator) arg.findAggregator(query);
		});
	}
};

yy.FuncValue.prototype.toJS = function(context, tableid, defcols) {
	var s = '';
	var funcid = this.funcid;
	// IF this is standard compile functions
	if (!alasql.fn[funcid] && alasql.stdlib[funcid.toUpperCase()]) {
		if (this.args && this.args.length > 0) {
			s += alasql.stdlib[funcid.toUpperCase()].apply(
				this,
				this.args.map(function(arg) {
					return arg.toJS(context, tableid);
				})
			);
		} else {
			s += alasql.stdlib[funcid.toUpperCase()]();
		}
	} else if (!alasql.fn[funcid] && alasql.stdfn[funcid.toUpperCase()]) {
		if (this.newid) s += 'new ';
		s += 'alasql.stdfn.' + this.funcid.toUpperCase() + '(';
		//		if(this.args) s += this.args.toJS(context, tableid);
		if (this.args && this.args.length > 0) {
			s += this.args
				.map(function(arg) {
					return arg.toJS(context, tableid, defcols);
				})
				.join(',');
		}
		s += ')';
	} else {
		// This is user-defined run-time function
		// TODO arguments!!!
		//		var s = '';
		if (this.newid) s += 'new ';
		s += 'alasql.fn.' + this.funcid + '(';
		//		if(this.args) s += this.args.toJS(context, tableid);
		if (this.args && this.args.length > 0) {
			s += this.args
				.map(function(arg) {
					return arg.toJS(context, tableid, defcols);
				})
				.join(',');
		}
		s += ')';
	}

	//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

var stdlib = (alasql.stdlib = {});
var stdfn = (alasql.stdfn = {});

stdlib.ABS = function(a) {
	return 'Math.abs(' + a + ')';
};
stdlib.CLONEDEEP = function(a) {
	return 'alasql.utils.cloneDeep(' + a + ')';
};

stdfn.CONCAT = function() {
	return Array.prototype.slice.call(arguments).join('');
};
stdlib.EXP = function(a) {
	return 'Math.pow(Math.E,' + a + ')';
};

stdlib.IIF = function(a, b, c) {
	if (arguments.length == 3) {
		return '((' + a + ')?(' + b + '):(' + c + '))';
	} else {
		throw new Error('Number of arguments of IFF is not equals to 3');
	}
};
stdlib.IFNULL = function(a, b) {
	return '(' + a + '||' + b + ')';
};
stdlib.INSTR = function(s, p) {
	return '((' + s + ').indexOf(' + p + ')+1)';
};

//stdlib.LEN = stdlib.LENGTH = function(s) {return '('+s+'+"").length';};

stdlib.LEN = stdlib.LENGTH = function(s) {
	return und(s, 'y.length');
};
//stdlib.LENGTH = function(s) {return '('+s+').length'};

stdlib.LOWER = stdlib.LCASE = function(s) {
	return und(s, 'String(y).toLowerCase()');
};
//stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}

// Returns a character expression after it removes leading blanks.
// see https://docs.microsoft.com/en-us/sql/t-sql/functions/ltrim-transact-sql
stdlib.LTRIM = function(s) {
	return und(s, 'y.replace(/^[ ]+/,"")');
};

// Returns a character string after truncating all trailing spaces.
// see https://docs.microsoft.com/en-us/sql/t-sql/functions/rtrim-transact-sql
stdlib.RTRIM = function(s) {
	return und(s, 'y.replace(/[ ]+$/,"")');
};

stdlib.MAX = stdlib.GREATEST = function() {
	return 'Math.max(' + Array.prototype.join.call(arguments, ',') + ')';
};

stdlib.MIN = stdlib.LEAST = function() {
	return 'Math.min(' + Array.prototype.join.call(arguments, ',') + ')';
};

stdlib.SUBSTRING = stdlib.SUBSTR = stdlib.MID = function(a, b, c) {
	if (arguments.length == 2) return und(a, 'y.substr(' + b + '-1)');
	else if (arguments.length == 3) return und(a, 'y.substr(' + b + '-1,' + c + ')');
};

stdlib.LEFT = function(str, len) {
	return und(str, 'y.substr(0, ' + len + ')');
};

stdlib.RIGHT = function(str, len) {
	return und(str, 'y.substr(-1 * ' + len + ',' + len + ')');
};

stdlib.RIGHT = function(str, len) {
	return und(str, 'y.substr(-1 * ' + len + ',' + len + ')');
};

stdlib.SUBSTRING_INDEX = function(str, code, len) {
	if (len > 0) {
		return und(str, "y.split('" + code + "').splice(0, " + len + ").join('" + code + "')");
	} else {
		return und(
			str,
			"y.split('" + code + "').splice(" + len + ', ' + len * -1 + ").join('" + code + "')"
		);
	}
};

stdfn.REGEXP_LIKE = function(a, b, c) {

	return (a || '').search(RegExp(b, c)) > -1;
};

// Here we uses undefined instead of null
stdlib.ISNULL = stdlib.NULLIF = function(a, b) {
	return '(' + a + '==' + b + '?undefined:' + a + ')';
};

stdlib.POWER = function(a, b) {
	return 'Math.pow(' + a + ',' + b + ')';
};

stdlib.RANDOM = function(r) {
	if (arguments.length == 0) {
		return 'Math.random()';
	} else {
		return '(Math.random()*(' + r + ')|0)';
	}
};
stdlib.ROUND = function(s, d) {
	if (arguments.length == 2) {
		return 'Math.round((' + s + ')*Math.pow(10,(' + d + ')))/Math.pow(10,(' + d + '))';
	} else {
		return 'Math.round(' + s + ')';
	}
};
stdlib.CEIL = stdlib.CEILING = function(s) {
	return 'Math.ceil(' + s + ')';
};
stdlib.FLOOR = function(s) {
	return 'Math.floor(' + s + ')';
};

stdlib.ROWNUM = function() {
	return '1';
};
stdlib.ROW_NUMBER = function() {
	return '1';
};

stdlib.SQRT = function(s) {
	return 'Math.sqrt(' + s + ')';
};

stdlib.TRIM = function(s) {
	return und(s, 'y.trim()');
};

stdlib.UPPER = stdlib.UCASE = function(s) {
	return und(s, 'String(y).toUpperCase()');
};

// Concatination of strings
stdfn.CONCAT_WS = function() {
	var args = Array.prototype.slice.call(arguments);
	return args.slice(1, args.length).join(args[0]);
};

//stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//REPLACE
// RTRIM
// SUBSTR
// TRIM
//REPLACE
// RTRIM
// SUBSTR
// TRIM

// Aggregator for joining strings
alasql.aggr.GROUP_CONCAT = function(v, s, stage) {
	if (stage === 1) {
		return '' + v;
	} else if (stage === 2) {
		s += ',' + v;
		return s;
	}
	return s;
};

alasql.aggr.MEDIAN = function(v, s, stage) {
	if (stage === 2) {
		if (v !== null) {
			s.push(v);
		}
		return s;
	} else if (stage === 1) {
		if (v === null) {
			return [];
		}
		return [v];
	} else {
		if (!s.length) {
			return s;
		}

		var r = s.sort();
		var p = (r.length + 1) / 2;
		if (Number.isInteger(p)) {
			return r[p - 1];
		}

		return (r[Math.floor(p - 1)] + r[Math.ceil(p - 1)]) / 2;
	}
};

alasql.aggr.QUART = function(v, s, stage, nth) {
	//Quartile (first quartile per default or input param)
	if (stage === 2) {
		if (v !== null) {
			s.push(v);
		}
		return s;
	} else if (stage === 1) {
		if (v === null) {
			return [];
		}
		return [v];
	} else {
		if (!s.length) {
			return s;
		}

		nth = !nth ? 1 : nth;
		var r = s.sort();
		var p = (nth * (r.length + 1)) / 4;
		if (Number.isInteger(p)) {
			return r[p - 1]; //Integer value
		}
		return r[Math.floor(p)]; //Math.ceil -1 or Math.floor
	}
};

alasql.aggr.QUART2 = function(v, s, stage) {
	//Second Quartile
	return alasql.aggr.QUART(v, s, stage, 2);
};
alasql.aggr.QUART3 = function(v, s, stage) {
	//Third Quartile
	return alasql.aggr.QUART(v, s, stage, 3);
};

// Standard deviation
alasql.aggr.VAR = function(v, s, stage) {
	if (stage === 1) {
		if (v === null) {
			return {arr: [], sum: 0};
		}
		return {arr: [v], sum: v};
	} else if (stage === 2) {
		if (v === null) {
			return s;
		}
		s.arr.push(v);
		s.sum += v;
		return s;
	} else {
		var N = s.arr.length;
		var avg = s.sum / N;
		var std = 0;
		for (var i = 0; i < N; i++) {
			std += (s.arr[i] - avg) * (s.arr[i] - avg);
		}
		std = std / (N - 1);
		return std;
	}
};

alasql.aggr.STDEV = function(v, s, stage) {
	if (stage === 1 || stage === 2) {
		return alasql.aggr.VAR(v, s, stage);
	} else {
		return Math.sqrt(alasql.aggr.VAR(v, s, stage));
	}
};

// Standard deviation
// alasql.aggr.VARP = function(v,s,acc){

// };

alasql.aggr.VARP = function(v, s, stage) {
	if (stage == 1) {
		return {arr: [v], sum: v};
	} else if (stage == 2) {
		s.arr.push(v);
		s.sum += v;
		return s;
	} else {
		var N = s.arr.length;
		var avg = s.sum / N;
		var std = 0;
		for (var i = 0; i < N; i++) {
			std += (s.arr[i] - avg) * (s.arr[i] - avg);
		}
		std = std / N;
		return std;
	}
};

alasql.aggr.STD = alasql.aggr.STDDEV = alasql.aggr.STDEVP = function(v, s, stage) {
	if (stage == 1 || stage == 2) {
		return alasql.aggr.VARP(v, s, stage);
	} else {
		return Math.sqrt(alasql.aggr.VARP(v, s, stage));
	}
};

alasql._aggrOriginal = alasql.aggr;
alasql.aggr = {};
Object.keys(alasql._aggrOriginal).forEach(function(k) {
	alasql.aggr[k] = function(v, s, stage) {
		if (stage === 3 && typeof s === 'undefined') return undefined;
		return alasql._aggrOriginal[k].apply(null, arguments);
	};
});

// String functions
stdfn.REPLACE = function(target, pattern, replacement) {
	return (target || '').split(pattern).join(replacement);
};

// This array is required for fast GUID generation
var lut = [];
for (var i = 0; i < 256; i++) {
	lut[i] = (i < 16 ? '0' : '') + i.toString(16);
}

stdfn.NEWID = stdfn.UUID = stdfn.GEN_RANDOM_UUID = function() {
	var d0 = (Math.random() * 0xffffffff) | 0;
	var d1 = (Math.random() * 0xffffffff) | 0;
	var d2 = (Math.random() * 0xffffffff) | 0;
	var d3 = (Math.random() * 0xffffffff) | 0;
	return (
		lut[d0 & 0xff] +
		lut[(d0 >> 8) & 0xff] +
		lut[(d0 >> 16) & 0xff] +
		lut[(d0 >> 24) & 0xff] +
		'-' +
		lut[d1 & 0xff] +
		lut[(d1 >> 8) & 0xff] +
		'-' +
		lut[((d1 >> 16) & 0x0f) | 0x40] +
		lut[(d1 >> 24) & 0xff] +
		'-' +
		lut[(d2 & 0x3f) | 0x80] +
		lut[(d2 >> 8) & 0xff] +
		'-' +
		lut[(d2 >> 16) & 0xff] +
		lut[(d2 >> 24) & 0xff] +
		lut[d3 & 0xff] +
		lut[(d3 >> 8) & 0xff] +
		lut[(d3 >> 16) & 0xff] +
		lut[(d3 >> 24) & 0xff]
	);
};

/*
//
// CASE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CaseValue = function(params) {
	return yy.extend(this, params);
};
yy.CaseValue.prototype.toString = function() {
	var s = 'CASE ';
	if (this.expression) s += this.expression.toString();
	if (this.whens) {
		s += this.whens
			.map(function(w) {
				return ' WHEN ' + w.when.toString() + ' THEN ' + w.then.toString();
			})
			.join();
	}
	if (this.elses) s += ' else ' + this.elses.toString();
	s += ' END';
	return s;
};

yy.CaseValue.prototype.toType = function() {
	if (this.whens && this.whens.length > 0) {
		return this.whens[0].then.toType();
	}
	if (this.elses) {
		return this.elses.toType();
	}
};

yy.CaseValue.prototype.findAggregator = function(query) {

	if (this.expression && this.expression.findAggregator) this.expression.findAggregator(query);
	if (this.whens && this.whens.length > 0) {
		this.whens.forEach(function(w) {
			if (w.when.findAggregator) w.when.findAggregator(query);
			if (w.then.findAggregator) w.then.findAggregator(query);
		});
	}
	if (this.elses && this.elses.findAggregator) this.elses.findAggregator(query);
};

yy.CaseValue.prototype.toJS = function(context, tableid, defcols) {
	var s = '((function(' + context + ',params,alasql){var y,r;';
	if (this.expression) {
		//			this.expression.toJS(context, tableid)
		s += 'v=' + this.expression.toJS(context, tableid, defcols) + ';';
		s += (this.whens || [])
			.map(function(w) {
				return (
					' if(v==' +
					w.when.toJS(context, tableid, defcols) +
					') {r=' +
					w.then.toJS(context, tableid, defcols) +
					'}'
				);
			})
			.join(' else ');
		if (this.elses) s += ' else {r=' + this.elses.toJS(context, tableid, defcols) + '}';
	} else {
		s += (this.whens || [])
			.map(function(w) {
				return (
					' if(' +
					w.when.toJS(context, tableid, defcols) +
					') {r=' +
					w.then.toJS(context, tableid, defcols) +
					'}'
				);
			})
			.join(' else ');
		if (this.elses) s += ' else {r=' + this.elses.toJS(context, tableid, defcols) + '}';
	}
	// TODO remove bind from CASE
	s += ';return r;}).bind(this))(' + context + ',params,alasql)';

	return s;
};

/*
//
// JSON for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Json = function(params) {
	return yy.extend(this, params);
};
yy.Json.prototype.toString = function() {
	var s = ''; // '@'
	s += JSONtoString(this.value);
	s += '';
	return s;
};

var JSONtoString = (alasql.utils.JSONtoString = function(obj) {
	var s = '';
	if (typeof obj == 'string') s = '"' + obj + '"';
	else if (typeof obj == 'number') s = obj;
	else if (typeof obj == 'boolean') s = obj;
	else if (typeof obj == 'object') {
		if (Array.isArray(obj)) {
			s +=
				'[' +
				obj
					.map(function(b) {
						return JSONtoString(b);
					})
					.join(',') +
				']';
		} else if (!obj.toJS || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for (var k in obj) {
				var s1 = '';
				if (typeof k == 'string') s1 += '"' + k + '"';
				else if (typeof k == 'number') s1 += k;
				else if (typeof k == 'boolean') s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':' + JSONtoString(obj[k]);
				ss.push(s1);
			}
			s += ss.join(',') + '}';
		} else if (obj.toString) {
			s = obj.toString();
		} else {
			throw new Error('1Can not show JSON object ' + JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not show JSON object ' + JSON.stringify(obj));
	}

	return s;
});

function JSONtoJS(obj, context, tableid, defcols) {
	var s = '';
	if (typeof obj == 'string') s = '"' + obj + '"';
	else if (typeof obj == 'number') s = '(' + obj + ')';
	else if (typeof obj == 'boolean') s = obj;
	else if (typeof obj == 'object') {
		if (Array.isArray(obj)) {
			s +=
				'[' +
				obj
					.map(function(b) {
						return JSONtoJS(b, context, tableid, defcols);
					})
					.join(',') +
				']';
		} else if (!obj.toJS || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for (var k in obj) {
				var s1 = '';
				if (typeof k == 'string') s1 += '"' + k + '"';
				else if (typeof k == 'number') s1 += k;
				else if (typeof k == 'boolean') s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':' + JSONtoJS(obj[k], context, tableid, defcols);
				ss.push(s1);
			}
			s += ss.join(',') + '}';
		} else if (obj.toJS) {
			s = obj.toJS(context, tableid, defcols);
		} else {
			throw new Error('1Can not parse JSON object ' + JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not parse JSON object ' + JSON.stringify(obj));
	}

	return s;
}

yy.Json.prototype.toJS = function(context, tableid, defcols) {
	// TODO redo
	return JSONtoJS(this.value, context, tableid, defcols);
};

/*
//
// CAST and CONVERT functions
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Convert = function(params) {
	return yy.extend(this, params);
};
yy.Convert.prototype.toString = function() {
	var useDBType = alasql.options.useDBType || this.useDBType;
	if (useDBType === 'mysql') {
		var s = 'CONVERT(';
		s += this.expression.toString() + ',' + this.dbtypeid;
		if (typeof this.dbsize != 'undefined') {
			s += '(' + this.dbsize;
			if (this.dbprecision) s += ',' + this.dbprecision;
			s += ')';
		}
		if (this.style) s += ',' + this.style;
		s += ')';
		return s;
	}
	var s = 'CONVERT(';
	s += this.dbtypeid;
	if (typeof this.dbsize != 'undefined') {
		s += '(' + this.dbsize;
		if (this.dbprecision) s += ',' + this.dbprecision;
		s += ')';
	}
	s += ',' + this.expression.toString();
	if (this.style) s += ',' + this.style;
	s += ')';
	return s;
};
yy.Convert.prototype.toJS = function(context, tableid, defcols) {
	//	if(this.style) {
	return (
		'alasql.stdfn.CONVERT(' +
		this.expression.toJS(context, tableid, defcols) +
		',{dbtypeid:"' +
		this.dbtypeid +
		'",dbsize:' +
		this.dbsize +
		',dbprecision:' +
		this.dbprecision +
		',style:' +
		this.style +
		'})'
	);
	//	}

	throw new Error('There is not such type conversion for ' + this.toString());
};

/**
 Convert one type to another
 */
alasql.stdfn.CONVERT = function(value, args) {
	var val = value;

	if (args.style) {
		// TODO 9,109, 20,120,21,121,126,130,131 conversions
		var t;
		if (/\d{8}/.test(val)) {
			t = new Date(+val.substr(0, 4), +val.substr(4, 2) - 1, +val.substr(6, 2));
		} else {
			t = new Date(val);
		}
		switch (args.style) {
			case 1: // mm/dd/yy
				val =
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					('0' + t.getDate()).substr(-2) +
					'/' +
					('0' + t.getYear()).substr(-2);
				break;
			case 2: // yy.mm.dd
				val =
					('0' + t.getYear()).substr(-2) +
					'.' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'.' +
					('0' + t.getDate()).substr(-2);
				break;
			case 3: // dd/mm/yy
				val =
					('0' + t.getDate()).substr(-2) +
					'/' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					('0' + t.getYear()).substr(-2);
				break;
			case 4: // dd.mm.yy
				val =
					('0' + t.getDate()).substr(-2) +
					'.' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'.' +
					('0' + t.getYear()).substr(-2);
				break;
			case 5: // dd-mm-yy
				val =
					('0' + t.getDate()).substr(-2) +
					'-' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'-' +
					('0' + t.getYear()).substr(-2);
				break;
			case 6: // dd mon yy
				val =
					('0' + t.getDate()).substr(-2) +
					' ' +
					t
						.toString()
						.substr(4, 3)
						.toLowerCase() +
					' ' +
					('0' + t.getYear()).substr(-2);
				break;
			case 7: // Mon dd,yy
				val =
					t.toString().substr(4, 3) +
					' ' +
					('0' + t.getDate()).substr(-2) +
					',' +
					('0' + t.getYear()).substr(-2);
				break;
			case 8: // hh:mm:ss
			case 108: // hh:mm:ss
				val =
					('0' + t.getHours()).substr(-2) +
					':' +
					('0' + t.getMinutes()).substr(-2) +
					':' +
					('0' + t.getSeconds()).substr(-2);
				break;
			case 10: // mm-dd-yy
				val =
					('0' + (t.getMonth() + 1)).substr(-2) +
					'-' +
					('0' + t.getDate()).substr(-2) +
					'-' +
					('0' + t.getYear()).substr(-2);
				break;
			case 11: // yy/mm/dd
				val =
					('0' + t.getYear()).substr(-2) +
					'/' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					('0' + t.getDate()).substr(-2);
				break;
			case 12: // yymmdd
				val =
					('0' + t.getYear()).substr(-2) +
					('0' + (t.getMonth() + 1)).substr(-2) +
					('0' + t.getDate()).substr(-2);
				break;
			case 101: // mm/dd/yyyy
				val =
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					('0' + t.getDate()).substr(-2) +
					'/' +
					t.getFullYear();
				break;
			case 102: // yyyy.mm.dd
				val =
					t.getFullYear() +
					'.' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'.' +
					('0' + t.getDate()).substr(-2);
				break;
			case 103: // dd/mm/yyyy
				val =
					('0' + t.getDate()).substr(-2) +
					'/' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					t.getFullYear();
				break;
			case 104: // dd.mm.yyyy
				val =
					('0' + t.getDate()).substr(-2) +
					'.' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'.' +
					t.getFullYear();
				break;
			case 105: // dd-mm-yyyy
				val =
					('0' + t.getDate()).substr(-2) +
					'-' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'-' +
					t.getFullYear();
				break;
			case 106: // dd mon yyyy
				val =
					('0' + t.getDate()).substr(-2) +
					' ' +
					t
						.toString()
						.substr(4, 3)
						.toLowerCase() +
					' ' +
					t.getFullYear();
				break;
			case 107: // Mon dd,yyyy
				val =
					t.toString().substr(4, 3) +
					' ' +
					('0' + t.getDate()).substr(-2) +
					',' +
					t.getFullYear();
				break;
			case 110: // mm-dd-yyyy
				val =
					('0' + (t.getMonth() + 1)).substr(-2) +
					'-' +
					('0' + t.getDate()).substr(-2) +
					'-' +
					t.getFullYear();
				break;
			case 111: // yyyy/mm/dd
				val =
					t.getFullYear() +
					'/' +
					('0' + (t.getMonth() + 1)).substr(-2) +
					'/' +
					('0' + t.getDate()).substr(-2);
				break;

			case 112: // yyyymmdd
				val =
					t.getFullYear() +
					('0' + (t.getMonth() + 1)).substr(-2) +
					('0' + t.getDate()).substr(-2);
				break;
			default:
				throw new Error('The CONVERT style ' + args.style + ' is not realized yet.');
		}
	}

	var udbtypeid = args.dbtypeid.toUpperCase();

	if (args.dbtypeid == 'Date') {
		return new Date(val);
	} else if (udbtypeid == 'DATE') {
		var d = new Date(val);
		var s =
			d.getFullYear() +
			'.' +
			('0' + (d.getMonth() + 1)).substr(-2) +
			'.' +
			('0' + d.getDate()).substr(-2);
		return s;
	} else if (udbtypeid == 'DATETIME' || udbtypeid == 'DATETIME2') {
		var d = new Date(val);
		var s =
			d.getFullYear() +
			'.' +
			('0' + (d.getMonth() + 1)).substr(-2) +
			'.' +
			('0' + d.getDate()).substr(-2);
		s +=
			' ' +
			('0' + d.getHours()).substr(-2) +
			':' +
			('0' + d.getMinutes()).substr(-2) +
			':' +
			('0' + d.getSeconds()).substr(-2);
		s += '.' + ('00' + d.getMilliseconds()).substr(-3);
		return s;
	} else if (['MONEY'].indexOf(udbtypeid) > -1) {
		var m = +val;
		return (m | 0) + ((m * 100) % 100) / 100;
	} else if (['BOOLEAN'].indexOf(udbtypeid) > -1) {
		return !!val;
	} else if (
		['INT', 'INTEGER', 'SMALLINT', 'BIGINT', 'SERIAL', 'SMALLSERIAL', 'BIGSERIAL'].indexOf(
			args.dbtypeid.toUpperCase()
		) > -1
	) {
		return val | 0;
	} else if (
		['STRING', 'VARCHAR', 'NVARCHAR', 'CHARACTER VARIABLE'].indexOf(
			args.dbtypeid.toUpperCase()
		) > -1
	) {
		if (args.dbsize) return ('' + val).substr(0, args.dbsize);
		else return '' + val;
	} else if (['CHAR', 'CHARACTER', 'NCHAR'].indexOf(udbtypeid) > -1) {
		return (val + new Array(args.dbsize + 1).join(' ')).substr(0, args.dbsize);
		//else return ""+val.substr(0,1);
	} else if (['NUMBER', 'FLOAT', 'DECIMAL', 'NUMERIC'].indexOf(udbtypeid) > -1) {
		var m = +val;
		//toPrecision sets the number of numbers total in the result
		m = args.dbsize !== undefined ? parseFloat(m.toPrecision(args.dbsize)) : m;
		//toFixed sets the number of numbers to the right of the decimal
		m = args.dbprecision !== undefined ? parseFloat(m.toFixed(args.dbprecision)) : m;
		return m;
	} else if (['JSON'].indexOf(udbtypeid) > -1) {
		if (typeof val == 'object') return val;
		try {
			return JSON.parse(val);
		} catch (err) {
			throw new Error('Cannot convert string to JSON');
		}
	}
	return val;
};

/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global alasql, yy, hash */

yy.ColumnDef = function(params) {
	return yy.extend(this, params);
};
yy.ColumnDef.prototype.toString = function() {
	var s = this.columnid;
	if (this.dbtypeid) {
		s += ' ' + this.dbtypeid;
	}

	if (this.dbsize) {
		s += '(' + this.dbsize;
		if (this.dbprecision) {
			s += ',' + this.dbprecision;
		}
		s += ')';
	}

	if (this.primarykey) {
		s += ' PRIMARY KEY';
	}

	if (this.notnull) {
		s += ' NOT NULL';
	}

	return s;
};

yy.CreateTable = function(params) {
	return yy.extend(this, params);
};
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if (this.temporary) {
		s += ' TEMPORARY';
	}

	if (this.view) {
		s += ' VIEW';
	} else {
		s += ' ' + (this.class ? 'CLASS' : 'TABLE');
	}
	if (this.ifnotexists) {
		s += ' IF  NOT EXISTS';
	}
	s += ' ' + this.table.toString();
	if (this.viewcolumns) {
		s +=
			'(' +
			this.viewcolumns
				.map(function(vcol) {
					return vcol.toString();
				})
				.join(',') +
			')';
	}
	if (this.as) {
		s += ' AS ' + this.as;
	} else {
		var ss = this.columns.map(function(col) {
			return col.toString();
		});
		s += ' (' + ss.join(',') + ')';
	}

	if (this.view && this.select) {
		s += ' AS ' + this.select.toString();
	}

	return s;
};

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateTable.prototype.execute = function(databaseid, params, cb) {
	//	var self = this;
	var db = alasql.databases[this.table.databaseid || databaseid];

	var tableid = this.table.tableid;
	if (!tableid) {
		throw new Error('Table name is not defined');
	}

	//	var ifnotexists = this.ifnotexists;
	var columns = this.columns;
	// if(false) {
	// 	if(!columns) {
	// 		throw new Error('Columns are not defined');
	// 	}
	// }
	var constraints = this.constraints || [];

	// IF NOT EXISTS
	if (this.ifnotexists && db.tables[tableid]) {
		return cb ? cb(0) : 0;
	}

	if (db.tables[tableid]) {
		throw new Error(
			"Can not create table '" +
				tableid +
				"', because it already exists in the database '" +
				db.databaseid +
				"'"
		);
	}

	var table = (db.tables[tableid] = new alasql.Table()); // TODO Can use special object?
	// If this is a class
	if (this.class) {
		table.isclass = true;
	}

	var ss = []; // DEFAULT function components
	var uss = []; // ON UPDATE function components
	if (columns) {
		columns.forEach(function(col) {
			var dbtypeid = col.dbtypeid;
			if (!alasql.fn[dbtypeid]) {
				dbtypeid = dbtypeid.toUpperCase();
			}

			// Process SERIAL data type like Postgress
			if (['SERIAL', 'SMALLSERIAL', 'BIGSERIAL'].indexOf(dbtypeid) > -1) {
				col.identity = {value: 1, step: 1};
			}

			var newcol = {
				columnid: col.columnid,
				dbtypeid: dbtypeid,
				dbsize: col.dbsize, // Fixed issue #150
				dbprecision: col.dbprecision, // Fixed issue #150
				notnull: col.notnull,
				identity: col.identity,
			};
			if (col.identity) {
				table.identities[col.columnid] = {
					value: +col.identity.value,
					step: +col.identity.step,
				};
				//				ss.push('\''+col.columnid+'\':(alasql.databases[\''+db.databaseid+'\'].tables[\''
				//					+tableid+'\'].identities[\''+col.columnid+'\'].value)');
			}
			if (col.check) {
				table.checks.push({
					id: col.check.constrantid,
					fn: new Function('r', 'var y;return ' + col.check.expression.toJS('r', '')),
				});
			}

			if (col.default) {
				ss.push("'" + col.columnid + "':" + col.default.toJS('r', ''));
			}

			// Check for primary key
			if (col.primarykey) {
				var pk = (table.pk = {});
				pk.columns = [col.columnid];
				pk.onrightfns = "r['" + col.columnid + "']";
				pk.onrightfn = new Function('r', 'var y;return ' + pk.onrightfns);
				pk.hh = hash(pk.onrightfns);
				table.uniqs[pk.hh] = {};
			}

			// UNIQUE clause
			if (col.unique) {
				var uk = {};
				table.uk = table.uk || [];
				table.uk.push(uk);
				uk.columns = [col.columnid];
				uk.onrightfns = "r['" + col.columnid + "']";
				uk.onrightfn = new Function('r', 'var y;return ' + uk.onrightfns);
				uk.hh = hash(uk.onrightfns);
				table.uniqs[uk.hh] = {};
			}

			// UNIQUE clause
			if (col.foreignkey) {

				var fk = col.foreignkey.table;
				var fktable = alasql.databases[fk.databaseid || databaseid].tables[fk.tableid];
				if (typeof fk.columnid === 'undefined') {
					if (fktable.pk.columns && fktable.pk.columns.length > 0) {
						fk.columnid = fktable.pk.columns[0];
					} else {
						throw new Error('FOREIGN KEY allowed only to tables with PRIMARY KEYs');
					}
				}

				var fkfn = function(r) {
					var rr = {};
					if (typeof r[col.columnid] === 'undefined') {
						return true;
					}
					rr[fk.columnid] = r[col.columnid];
					var addr = fktable.pk.onrightfn(rr);

					if (!fktable.uniqs[fktable.pk.hh][addr]) {
						throw new Error(
							'Foreign key "' +
								r[col.columnid] +
								'" is not found in table ' +
								fktable.tableid
						);
					}
					return true;
				};
				table.checks.push({fn: fkfn});

			}

			if (col.onupdate) {
				uss.push("r['" + col.columnid + "']=" + col.onupdate.toJS('r', ''));
			}

			table.columns.push(newcol);
			table.xcolumns[newcol.columnid] = newcol;
		});
	}
	table.defaultfns = ss.join(',');
	table.onupdatefns = uss.join(';');

	//	if(constraints) {
	constraints.forEach(function(con) {

		var checkfn;

		if (con.type === 'PRIMARY KEY') {
			if (table.pk) {
				throw new Error('Primary key already exists');
			}
			var pk = (table.pk = {});
			pk.columns = con.columns;
			pk.onrightfns = pk.columns
				.map(function(columnid) {
					return "r['" + columnid + "']";
				})
				.join("+'`'+");
			pk.onrightfn = new Function('r', 'var y;return ' + pk.onrightfns);
			pk.hh = hash(pk.onrightfns);
			table.uniqs[pk.hh] = {};
		} else if (con.type === 'CHECK') {

			checkfn = new Function('r', 'var y;return ' + con.expression.toJS('r', ''));
		} else if (con.type === 'UNIQUE') {

			var uk = {};
			table.uk = table.uk || [];
			table.uk.push(uk);
			uk.columns = con.columns;
			uk.onrightfns = uk.columns
				.map(function(columnid) {
					return "r['" + columnid + "']";
				})
				.join("+'`'+");
			uk.onrightfn = new Function('r', 'var y;return ' + uk.onrightfns);
			uk.hh = hash(uk.onrightfns);
			table.uniqs[uk.hh] = {};
		} else if (con.type === 'FOREIGN KEY') {

			var col = table.xcolumns[con.columns[0]];
			var fk = con.fktable;
			if (con.fkcolumns && con.fkcolumns.length > 0) {
				fk.columnid = con.fkcolumns[0];
			}
			var fktable = alasql.databases[fk.databaseid || databaseid].tables[fk.tableid];
			if (typeof fk.columnid === 'undefined') {
				fk.columnid = fktable.pk.columns[0];
			}

			checkfn = function(r) {
				var rr = {};
				if (typeof r[col.columnid] === 'undefined') {
					return true;
				}
				rr[fk.columnid] = r[col.columnid];
				var addr = fktable.pk.onrightfn(rr);

				if (!fktable.uniqs[fktable.pk.hh][addr]) {

					throw new Error(
						'Foreign key "' +
							r[col.columnid] +
							'" is not found in table ' +
							fktable.tableid
					);
				}
				return true;
			};
		}
		if (checkfn) {
			table.checks.push({fn: checkfn, id: con.constraintid, fk: con.type === 'FOREIGN KEY'});
		}
	});

	if (this.view && this.viewcolumns) {
		var self = this;
		this.viewcolumns.forEach(function(vcol, idx) {
			self.select.columns[idx].as = vcol.columnid;
		});
	}

	//Used in 420from queryfn when table.view = true!
	if (this.view && this.select) {
		table.view = true;

		table.select = this.select.compile(this.table.databaseid || databaseid);
	}

	if (db.engineid) {

		return alasql.engines[db.engineid].createTable(
			this.table.databaseid || databaseid,
			tableid,
			this.ifnotexists,
			cb
		);

		//		return res1;
	}

	//	}
	//			if(table.pk) {

	table.insert = function(r, orreplace) {
		var oldinserted = alasql.inserted;
		alasql.inserted = [r];

		var table = this;

		var toreplace = false; // For INSERT OR REPLACE

		/*
		// IDENTINY or AUTO_INCREMENT
		// if(table.identities && table.identities.length>0) {
		// 	table.identities.forEach(function(ident){
		// 		r[ident.columnid] = ident.value;
		// 	});
		// }
*/
		// Trigger prevent functionality
		var prevent = false;
		for (var tr in table.beforeinsert) {
			var trigger = table.beforeinsert[tr];
			if (trigger) {
				if (trigger.funcid) {
					if (alasql.fn[trigger.funcid](r) === false) prevent = prevent || true;
				} else if (trigger.statement) {
					if (trigger.statement.execute(databaseid) === false) prevent = prevent || true;
				}
			}
		}
		if (prevent) return;

		// Trigger prevent functionality
		var escape = false;
		for (tr in table.insteadofinsert) {
			escape = true;
			trigger = table.insteadofinsert[tr];
			if (trigger) {
				if (trigger.funcid) {
					alasql.fn[trigger.funcid](r);
				} else if (trigger.statement) {
					trigger.statement.execute(databaseid);
				}
			}
		}
		if (escape) return;

		for (var columnid in table.identities) {
			var ident = table.identities[columnid];

			r[columnid] = ident.value;

		}

		if (table.checks && table.checks.length > 0) {
			table.checks.forEach(function(check) {
				if (!check.fn(r)) {
					//					if(orreplace) toreplace=true; else
					throw new Error('Violation of CHECK constraint ' + (check.id || ''));
				}
			});
		}

		table.columns.forEach(function(column) {
			if (column.notnull && typeof r[column.columnid] === 'undefined') {
				throw new Error('Wrong NULL value in NOT NULL column ' + column.columnid);
			}
		});
		if (table.pk) {
			var pk = table.pk;
			var addr = pk.onrightfn(r);

			if (typeof table.uniqs[pk.hh][addr] !== 'undefined') {

				if (orreplace) toreplace = table.uniqs[pk.hh][addr];
				else
					throw new Error(
						'Cannot insert record, because it already exists in primary key index'
					);
			}
			//			table.uniqs[pk.hh][addr]=r;
		}

		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				var ukaddr = uk.onrightfn(r);
				if (typeof table.uniqs[uk.hh][ukaddr] !== 'undefined') {
					if (orreplace) toreplace = table.uniqs[uk.hh][ukaddr];
					else
						throw new Error(
							'Cannot insert record, because it already exists in unique index'
						);
				}
				//				table.uniqs[uk.hh][ukaddr]=r;
			});
		}

		if (toreplace) {
			// Do UPDATE!!!

			table.update(
				function(t) {
					for (var f in r) t[f] = r[f];
				},
				table.data.indexOf(toreplace),
				params
			);
		} else {
			table.data.push(r);

			// Final change before insert

			// Update indices

			for (var columnid in table.identities) {
				var ident = table.identities[columnid];

				ident.value += ident.step;

			}

			if (table.pk) {
				var pk = table.pk;
				var addr = pk.onrightfn(r);
				table.uniqs[pk.hh][addr] = r;
			}
			if (table.uk && table.uk.length) {
				table.uk.forEach(function(uk) {
					var ukaddr = uk.onrightfn(r);
					table.uniqs[uk.hh][ukaddr] = r;
				});
			}
		}

		// Trigger prevent functionality
		for (var tr in table.afterinsert) {
			var trigger = table.afterinsert[tr];
			if (trigger) {
				if (trigger.funcid) {
					alasql.fn[trigger.funcid](r);
				} else if (trigger.statement) {
					trigger.statement.execute(databaseid);
				}
			}
		}
		alasql.inserted = oldinserted;
	};

	table.delete = function(index) {
		var table = this;
		var r = table.data[index];

		// Prevent trigger
		var prevent = false;
		for (var tr in table.beforedelete) {
			var trigger = table.beforedelete[tr];
			if (trigger) {
				if (trigger.funcid) {
					if (alasql.fn[trigger.funcid](r) === false) prevent = prevent || true;
				} else if (trigger.statement) {
					if (trigger.statement.execute(databaseid) === false) prevent = prevent || true;
				}
			}
		}
		if (prevent) return false;

		// Trigger prevent functionality
		var escape = false;
		for (var tr in table.insteadofdelete) {
			escape = true;
			var trigger = table.insteadofdelete[tr];
			if (trigger) {
				if (trigger.funcid) {
					alasql.fn[trigger.funcid](r);
				} else if (trigger.statement) {
					trigger.statement.execute(databaseid);
				}
			}
		}
		if (escape) return;

		if (this.pk) {
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if (typeof this.uniqs[pk.hh][addr] === 'undefined') {
				throw new Error('Something wrong with primary key index on table');
			} else {
				this.uniqs[pk.hh][addr] = undefined;
			}
		}
		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				var ukaddr = uk.onrightfn(r);
				if (typeof table.uniqs[uk.hh][ukaddr] === 'undefined') {
					throw new Error('Something wrong with unique index on table');
				}
				table.uniqs[uk.hh][ukaddr] = undefined;
			});
		}
	};

	table.deleteall = function() {
		this.data.length = 0;
		if (this.pk) {
			//						var r = this.data[i];
			this.uniqs[this.pk.hh] = {};
		}
		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				table.uniqs[uk.hh] = {};
			});
		}
	};

	table.update = function(assignfn, i, params) {
		// TODO: Analyze the speed
		var r = cloneDeep(this.data[i]);

		var pk;
		// PART 1 - PRECHECK
		if (this.pk) {
			pk = this.pk;
			pk.pkaddr = pk.onrightfn(r, params);
			if (typeof this.uniqs[pk.hh][pk.pkaddr] === 'undefined') {
				throw new Error('Something wrong with index on table');
			}
		}
		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				uk.ukaddr = uk.onrightfn(r);
				if (typeof table.uniqs[uk.hh][uk.ukaddr] === 'undefined') {
					throw new Error('Something wrong with unique index on table');
				}
			});
		}

		assignfn(r, params, alasql);

		// Prevent trigger
		var prevent = false;
		for (var tr in table.beforeupdate) {
			var trigger = table.beforeupdate[tr];
			if (trigger) {
				if (trigger.funcid) {
					if (alasql.fn[trigger.funcid](this.data[i], r) === false)
						prevent = prevent || true;
				} else if (trigger.statement) {
					if (trigger.statement.execute(databaseid) === false) prevent = prevent || true;
				}
			}
		}
		if (prevent) return false;

		// Trigger prevent functionality
		var escape = false;
		for (var tr in table.insteadofupdate) {
			escape = true;
			var trigger = table.insteadofupdate[tr];
			if (trigger) {
				if (trigger.funcid) {
					alasql.fn[trigger.funcid](this.data[i], r);
				} else if (trigger.statement) {
					trigger.statement.execute(databaseid);
				}
			}
		}
		if (escape) return;

		// PART 2 - POST CHECK
		if (table.checks && table.checks.length > 0) {
			table.checks.forEach(function(check) {
				if (!check.fn(r)) {
					throw new Error('Violation of CHECK constraint ' + (check.id || ''));
				}
			});
		}

		table.columns.forEach(function(column) {
			if (column.notnull && typeof r[column.columnid] === 'undefined') {
				throw new Error('Wrong NULL value in NOT NULL column ' + column.columnid);
			}
		});
		if (this.pk) {
			pk.newpkaddr = pk.onrightfn(r);
			if (
				typeof this.uniqs[pk.hh][pk.newpkaddr] !== 'undefined' &&
				pk.newpkaddr !== pk.pkaddr
			) {
				throw new Error('Record already exists');
			}
		}

		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				uk.newukaddr = uk.onrightfn(r);
				if (
					typeof table.uniqs[uk.hh][uk.newukaddr] !== 'undefined' &&
					uk.newukaddr !== uk.ukaddr
				) {
					throw new Error('Record already exists');
				}
			});
		}

		// PART 3 UPDATE
		if (this.pk) {
			this.uniqs[pk.hh][pk.pkaddr] = undefined;
			this.uniqs[pk.hh][pk.newpkaddr] = r;
		}
		if (table.uk && table.uk.length) {
			table.uk.forEach(function(uk) {
				table.uniqs[uk.hh][uk.ukaddr] = undefined;
				table.uniqs[uk.hh][uk.newukaddr] = r;
			});
		}

		this.data[i] = r;

		// Trigger prevent functionality
		for (var tr in table.afterupdate) {
			var trigger = table.afterupdate[tr];
			if (trigger) {
				if (trigger.funcid) {
					alasql.fn[trigger.funcid](this.data[i], r);
				} else if (trigger.statement) {
					trigger.statement.execute(databaseid);
				}
			}
		}
	};

	var res;

	if (!alasql.options.nocount) {
		res = 1;
	}

	if (cb) res = cb(res);
	return res;
};

//
// Date functions
//
// (c) 2014, Andrey Gershun
//

/** Standard JavaScript data types */

alasql.fn.Date = Object;
alasql.fn.Date = Date;
alasql.fn.Number = Number;
alasql.fn.String = String;
alasql.fn.Boolean = Boolean;

/** Extend Object with properties */
stdfn.EXTEND = alasql.utils.extend;

stdfn.CHAR = String.fromCharCode.bind(String);
stdfn.ASCII = function(a) {
	return a.charCodeAt(0);
};

/** 
 Return first non-null argument
 See https://msdn.microsoft.com/en-us/library/ms190349.aspx
*/
stdfn.COALESCE = function() {
	for (var i = 0; i < arguments.length; i++) {
		if (typeof arguments[i] == 'undefined') continue;
		if (typeof arguments[i] == 'number' && isNaN(arguments[i])) continue;
		return arguments[i];
	}
	return undefined;
};

stdfn.USER = function() {
	return 'alasql';
};

stdfn.OBJECT_ID = function(objid) {
	return !!alasql.tables[objid];
};

stdfn.DATE = function(d) {
	if (/\d{8}/.test(d)) return new Date(+d.substr(0, 4), +d.substr(4, 2) - 1, +d.substr(6, 2));
	return new Date(d);
};

stdfn.NOW = function() {
	var d = new Date();
	var s =
		d.getFullYear() +
		'.' +
		('0' + (d.getMonth() + 1)).substr(-2) +
		'.' +
		('0' + d.getDate()).substr(-2);
	s +=
		' ' +
		('0' + d.getHours()).substr(-2) +
		':' +
		('0' + d.getMinutes()).substr(-2) +
		':' +
		('0' + d.getSeconds()).substr(-2);
	s += '.' + ('00' + d.getMilliseconds()).substr(-3);
	return s;
};

stdfn.GETDATE = stdfn.NOW;
stdfn.CURRENT_TIMESTAMP = stdfn.NOW;

stdfn.SECOND = function(d) {
	var d = new Date(d);
	return d.getSeconds();
};

stdfn.MINUTE = function(d) {
	var d = new Date(d);
	return d.getMinutes();
};

stdfn.HOUR = function(d) {
	var d = new Date(d);
	return d.getHours();
};

stdfn.DAYOFWEEK = stdfn.WEEKDAY = function(d) {
	var d = new Date(d);
	return d.getDay();
};

stdfn.DAY = stdfn.DAYOFMONTH = function(d) {
	var d = new Date(d);
	return d.getDate();
};

stdfn.MONTH = function(d) {
	var d = new Date(d);
	return d.getMonth() + 1;
};

stdfn.YEAR = function(d) {
	var d = new Date(d);
	return d.getFullYear();
};

var PERIODS = {
	year: 1000 * 3600 * 24 * 365,
	quarter: (1000 * 3600 * 24 * 365) / 4,
	month: 1000 * 3600 * 24 * 30,
	week: 1000 * 3600 * 24 * 7,
	day: 1000 * 3600 * 24,
	dayofyear: 1000 * 3600 * 24,
	weekday: 1000 * 3600 * 24,
	hour: 1000 * 3600,
	minute: 1000 * 60,
	second: 1000,
	millisecond: 1,
	microsecond: 0.001,
};

alasql.stdfn.DATEDIFF = function(period, d1, d2) {
	var interval = new Date(d2).getTime() - new Date(d1).getTime();
	return interval / PERIODS[period.toLowerCase()];
};

alasql.stdfn.DATEADD = function(period, interval, d) {
	var nd = new Date(d).getTime() + interval * PERIODS[period.toLowerCase()];
	return new Date(nd);
};

alasql.stdfn.INTERVAL = function(interval, period) {
	return interval * PERIODS[period.toLowerCase()];
};

alasql.stdfn.DATE_ADD = alasql.stdfn.ADDDATE = function(d, interval) {
	var nd = new Date(d).getTime() + interval;
	return new Date(nd);
};

alasql.stdfn.DATE_SUB = alasql.stdfn.SUBDATE = function(d, interval) {
	var nd = new Date(d).getTime() - interval;
	return new Date(nd);
};

/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropTable = function(params) {
	return yy.extend(this, params);
};
yy.DropTable.prototype.toString = function() {
	var s = 'DROP' + ' ';
	if (this.view) s += 'VIEW';
	else s += 'TABLE';
	if (this.ifexists) s += ' IF EXISTS';
	s += ' ' + this.tables.toString();
	return s;
};

// DROP TABLE
/**
	Drop tables
	@param {string} databaseid Database id
	@param {object} params Parameters
	@param {callback} cb Callback function
	@return Number of dropped tables
	@example
	DROP TABLE one;
	DROP TABLE IF NOT EXISTS two, three;
*/
yy.DropTable.prototype.execute = function(databaseid, params, cb) {
	var ifexists = this.ifexists;
	var res = 0; // No tables removed
	var count = 0;
	var tlen = this.tables.length;

	// For each table in the list
	this.tables.forEach(function(table) {
		var db = alasql.databases[table.databaseid || databaseid];
		var tableid = table.tableid;

		/** @todo Test with AUTOCOMMIT flag is ON */
		/** @todo Test with IndexedDB and multiple tables */

		if (!ifexists || (ifexists && db.tables[tableid])) {
			if (!db.tables[tableid]) {
				if (!alasql.options.dropifnotexists) {
					throw new Error(
						"Can not drop table '" +
							table.tableid +
							"', because it does not exist in the database."
					);
				}
			} else {
				if (db.engineid /*&& alasql.options.autocommit*/) {
					alasql.engines[db.engineid].dropTable(
						table.databaseid || databaseid,
						tableid,
						ifexists,
						function(res1) {
							delete db.tables[tableid];
							res += res1;
							count++;
							if (count == tlen && cb) cb(res);
						}
					);
				} else {
					delete db.tables[tableid];
					res++;
					count++;
					if (count == tlen && cb) cb(res);
				}
			}
		} else {
			count++;
			if (count == tlen && cb) cb(res);
		}
	});
	// if(cb) res = cb(res);
	return res;
};

yy.TruncateTable = function(params) {
	return yy.extend(this, params);
};
yy.TruncateTable.prototype.toString = function() {
	var s = 'TRUNCATE TABLE';
	s += ' ' + this.table.toString();
	return s;
};

yy.TruncateTable.prototype.execute = function(databaseid, params, cb) {
	var db = alasql.databases[this.table.databaseid || databaseid];
	var tableid = this.table.tableid;
	if (db.engineid) {
		return alasql.engines[db.engineid].truncateTable(
			this.table.databaseid || databaseid,
			tableid,
			this.ifexists,
			cb
		);
	}
	if (db.tables[tableid]) {
		db.tables[tableid].data = [];
	} else {
		throw new Error('Cannot truncate table becaues it does not exist');
	}
	return cb ? cb(0) : 0;
};

/*
//
// CREATE VERTEX for AlaSQL
// Date: 21.04.2015
// (c) 2015, Andrey Gershun
//
*/

yy.CreateVertex = function(params) {
	return yy.extend(this, params);
};
yy.CreateVertex.prototype.toString = function() {
	var s = 'CREATE VERTEX ';
	if (this.class) {
		s += this.class + ' ';
	}
	if (this.sharp) {
		s += '#' + this.sharp + ' ';
	}
	if (this.sets) {
		s += this.sets.toString();
	} else if (this.content) {
		s += this.content.toString();
	} else if (this.select) {
		s += this.select.toString();
	}

	return s;
};

yy.CreateVertex.prototype.toJS = function(context) {

	var s = 'this.queriesfn[' + (this.queriesidx - 1) + '](this.params,null,' + context + ')';
	// var s = '';
	return s;
};

// CREATE TABLE

yy.CreateVertex.prototype.compile = function(databaseid) {
	var dbid = databaseid;

	// CREATE VERTEX #id
	var sharp = this.sharp;

	// CREATE VERTEX "Name"
	if (typeof this.name !== 'undefined') {
		var s = 'x.name=' + this.name.toJS();
		var namefn = new Function('x', s);
	}

	if (this.sets && this.sets.length > 0) {
		var s = this.sets
			.map(function(st) {
				return "x['" + st.column.columnid + "']=" + st.expression.toJS('x', '');
			})
			.join(';');
		var setfn = new Function('x,params,alasql', s);
	}

	// Todo: check for content, select and default

	var statement = function(params, cb) {
		var res;

		// CREATE VERTEX without parameters
		var db = alasql.databases[dbid];
		var id;
		if (typeof sharp !== 'undefined') {
			id = sharp;
		} else {
			id = db.counter++;
		}
		var vertex = {$id: id, $node: 'VERTEX'};
		db.objects[vertex.$id] = vertex;
		res = vertex;
		if (namefn) {
			namefn(vertex);
		}
		if (setfn) {
			setfn(vertex, params, alasql);
		}

		if (cb) {
			res = cb(res);
		}
		return res;
	};
	return statement;
};

yy.CreateEdge = function(params) {
	return yy.extend(this, params);
};
yy.CreateEdge.prototype.toString = function() {

	var s = 'CREATE EDGE' + ' ';
	if (this.class) {
		s += this.class + ' ';
	}
	// todo: SET
	// todo: CONTENT
	// todo: SELECT
	return s;
};

yy.CreateEdge.prototype.toJS = function(context) {
	var s = 'this.queriesfn[' + (this.queriesidx - 1) + '](this.params,null,' + context + ')';
	return s;
};

// CREATE TABLE

yy.CreateEdge.prototype.compile = function(databaseid) {
	var dbid = databaseid;
	var fromfn = new Function('params,alasql', 'var y;return ' + this.from.toJS());
	var tofn = new Function('params,alasql', 'var y;return ' + this.to.toJS());

	// CREATE VERTEX "Name"
	if (typeof this.name !== 'undefined') {
		var s = 'x.name=' + this.name.toJS();
		var namefn = new Function('x', s);
	}

	if (this.sets && this.sets.length > 0) {
		var s = this.sets
			.map(function(st) {
				return "x['" + st.column.columnid + "']=" + st.expression.toJS('x', '');
			})
			.join(';');
		var setfn = new Function('x,params,alasql', 'var y;' + s);
	}

	/*
	todo: handle content, select and default
	else if(this.content) {

	} else if(this.select) {

	} else {
	}
	*/

	var statement = function(params, cb) {
		var res = 0;
		// CREATE VERTEX without parameters
		var db = alasql.databases[dbid];
		var edge = {$id: db.counter++, $node: 'EDGE'};
		var v1 = fromfn(params, alasql);
		var v2 = tofn(params, alasql);
		// Set link
		edge.$in = [v1.$id];
		edge.$out = [v2.$id];
		// Set sides
		if (v1.$out === undefined) {
			v1.$out = [];
		}
		v1.$out.push(edge.$id);

		if (typeof v2.$in === undefined) {
			v2.$in = [];
		}
		v2.$in.push(edge.$id);

		// Save in objects
		db.objects[edge.$id] = edge;
		res = edge;
		if (namefn) {
			namefn(edge);
		}

		if (setfn) {
			setfn(edge, params, alasql);
		}

		if (cb) {
			res = cb(res);
		}

		return res;
	};
	return statement;
};

yy.CreateGraph = function(params) {
	return yy.extend(this, params);
};
yy.CreateGraph.prototype.toString = function() {
	var s = 'CREATE GRAPH' + ' ';
	if (this.class) {
		s += this.class + ' ';
	}
	return s;
};

yy.CreateGraph.prototype.execute = function(databaseid, params, cb) {
	var res = [];
	if (this.from) {
		if (alasql.from[this.from.funcid]) {
			this.graph = alasql.from[this.from.funcid.toUpperCase()];
		}
	}

	//	stop;
	this.graph.forEach(function(g) {
		if (g.source) {
			// GREATE EDGE
			var e = {};
			if (typeof g.as !== 'undefined') {
				alasql.vars[g.as] = e;
			}

			if (typeof g.prop !== 'undefined') {
				//				e[g.prop] = e;
				//				v.$id = g.prop; // We do not create $id for edge automatically
				e.name = g.prop;
			}
			if (typeof g.sharp !== 'undefined') {
				e.$id = g.sharp;
			}
			if (typeof g.name !== 'undefined') {
				e.name = g.name;
			}
			if (typeof g.class !== 'undefined') {
				e.$class = g.class;
			}

			var db = alasql.databases[databaseid];
			if (typeof e.$id === 'undefined') {
				e.$id = db.counter++;
			}
			e.$node = 'EDGE';
			if (typeof g.json !== 'undefined') {
				extend(
					e,
					new Function('params,alasql', 'var y;return ' + g.json.toJS())(params, alasql)
				);
			}

			var v1;
			if (g.source.vars) {
				var vo = alasql.vars[g.source.vars];
				if (typeof vo === 'object') {
					v1 = vo;
				} else {
					v1 = db.objects[vo];
				}
			} else {
				var av1 = g.source.sharp;
				if (typeof av1 === 'undefined') {
					av1 = g.source.prop;
				}
				v1 = alasql.databases[databaseid].objects[av1];
				if (
					typeof v1 === 'undefined' &&
					alasql.options.autovertex &&
					(typeof g.source.prop !== 'undefined' || typeof g.source.name !== 'undefined')
				) {
					v1 = findVertex(g.source.prop || g.source.name);
					if (typeof v1 === 'undefined') {
						v1 = createVertex(g.source);
					}
				}
			}

			var v2;
			if (g.source.vars) {
				var vo = alasql.vars[g.target.vars];
				if (typeof vo === 'object') {
					v2 = vo;
				} else {
					v2 = db.objects[vo];
				}
			} else {
				var av2 = g.target.sharp;
				if (typeof av2 === 'undefined') {
					av2 = g.target.prop;
				}
				v2 = alasql.databases[databaseid].objects[av2];
				if (
					typeof v2 === 'undefined' &&
					alasql.options.autovertex &&
					(typeof g.target.prop !== 'undefined' || typeof g.target.name !== 'undefined')
				) {
					v2 = findVertex(g.target.prop || g.target.name);
					if (typeof v2 === 'undefined') {
						v2 = createVertex(g.target);
					}
				}
			}

			// Set link
			e.$in = [v1.$id];
			e.$out = [v2.$id];
			// Set sides
			if (typeof v1.$out === 'undefined') {
				v1.$out = [];
			}
			v1.$out.push(e.$id);
			if (typeof v2.$in === 'undefined') {
				v2.$in = [];
			}
			v2.$in.push(e.$id);

			db.objects[e.$id] = e;
			if (typeof e.$class !== 'undefined') {
				if (typeof alasql.databases[databaseid].tables[e.$class] === 'undefined') {
					throw new Error('No such class. Pleace use CREATE CLASS');
				} else {
					// TODO - add insert()
					alasql.databases[databaseid].tables[e.$class].data.push(e);
				}
			}

			res.push(e.$id);
		} else {
			createVertex(g);
		}
	});

	if (cb) {
		res = cb(res);
	}
	return res;

	// Find vertex by name
	function findVertex(name) {
		var objects = alasql.databases[alasql.useid].objects;
		for (var k in objects) {
			if (objects[k].name === name) {
				return objects[k];
			}
		}
		return undefined;
	}

	function createVertex(g) {
		// GREATE VERTEX
		var v = {};
		if (typeof g.as !== 'undefined') {
			alasql.vars[g.as] = v;
		}

		if (typeof g.prop !== 'undefined') {
			//				v[g.prop] = true;
			v.$id = g.prop;
			v.name = g.prop;
		}

		if (typeof g.sharp !== 'undefined') {
			v.$id = g.sharp;
		}
		if (typeof g.name !== 'undefined') {
			v.name = g.name;
		}
		if (typeof g.class !== 'undefined') {
			v.$class = g.class;
		}

		var db = alasql.databases[databaseid];
		if (typeof v.$id === 'undefined') {
			v.$id = db.counter++;
		}
		v.$node = 'VERTEX';
		if (typeof g.json !== 'undefined') {
			extend(
				v,
				new Function('params,alasql', 'var y;return ' + g.json.toJS())(params, alasql)
			);
		}
		db.objects[v.$id] = v;
		if (typeof v.$class !== 'undefined') {
			if (typeof alasql.databases[databaseid].tables[v.$class] === 'undefined') {
				throw new Error('No such class. Pleace use CREATE CLASS');
			} else {
				// TODO - add insert()
				alasql.databases[databaseid].tables[v.$class].data.push(v);
			}
		}

		res.push(v.$id);
		return v;
	}
};

yy.CreateGraph.prototype.compile1 = function(databaseid) {
	var dbid = databaseid;
	var fromfn = new Function('params,alasql', 'var y;return ' + this.from.toJS());
	var tofn = new Function('params,alasql', 'var y;return ' + this.to.toJS());

	// CREATE VERTEX "Name"
	if (typeof this.name !== 'undefined') {
		var s = 'x.name=' + this.name.toJS();
		var namefn = new Function('x', s);
	}

	if (this.sets && this.sets.length > 0) {
		var s = this.sets
			.map(function(st) {
				return "x['" + st.column.columnid + "']=" + st.expression.toJS('x', '');
			})
			.join(';');
		var setfn = new Function('x,params,alasql', 'var y;' + s);
	}

	// Todo: handle content, select and default

	var statement = function(params, cb) {
		var res = 0;
		// CREATE VERTEX without parameters
		var db = alasql.databases[dbid];
		var edge = {$id: db.counter++, $node: 'EDGE'};
		var v1 = fromfn(params, alasql);
		var v2 = tofn(params, alasql);
		// Set link
		edge.$in = [v1.$id];
		edge.$out = [v2.$id];
		// Set sides
		if (typeof v1.$out === 'undefined') {
			v1.$out = [];
		}
		v1.$out.push(edge.$id);

		if (typeof v2.$in === 'undefined') {
			v2.$in = [];
		}
		v2.$in.push(edge.$id);
		// Save in objects
		db.objects[edge.$id] = edge;
		res = edge;
		if (namefn) {
			namefn(edge);
		}
		if (setfn) {
			setfn(edge, params, alasql);
		}

		if (cb) {
			res = cb(res);
		}
		return res;
	};
	return statement;
};

/*
//
// ALTER TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/
/* global alasql yy */

// ALTER TABLE table1 RENAME TO table2
yy.AlterTable = function(params) {
	return yy.extend(this, params);
};
yy.AlterTable.prototype.toString = function() {
	var s = 'ALTER TABLE ' + this.table.toString();
	if (this.renameto) s += ' RENAME TO ' + this.renameto;
	return s;
};

yy.AlterTable.prototype.execute = function(databaseid, params, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion = Date.now();

	if (this.renameto) {
		var oldtableid = this.table.tableid;
		var newtableid = this.renameto;
		var res = 1;
		if (db.tables[newtableid]) {
			throw new Error(
				"Can not rename a table '" +
					oldtableid +
					"' to '" +
					newtableid +
					"', because the table with this name already exists"
			);
		} else if (newtableid === oldtableid) {
			throw new Error("Can not rename a table '" + oldtableid + "' to itself");
		} else {
			db.tables[newtableid] = db.tables[oldtableid];
			delete db.tables[oldtableid];
			res = 1;
		}
		if (cb) cb(res);
		return res;
	} else if (this.addcolumn) {
		db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.addcolumn.columnid;
		if (table.xcolumns[columnid]) {
			throw new Error(
				'Cannot add column "' +
					columnid +
					'", because it already exists in the table "' +
					tableid +
					'"'
			);
		}

		var col = {
			columnid: columnid,
			dbtypeid: this.dbtypeid,
			dbsize: this.dbsize,
			dbprecision: this.dbprecision,
			dbenum: this.dbenum,
			defaultfns: null, // TODO defaultfns!!!
		};

		var defaultfn = function() {};

		table.columns.push(col);
		table.xcolumns[columnid] = col;

		for (var i = 0, ilen = table.data.length; i < ilen; i++) {

			table.data[i][columnid] = defaultfn();
		}

		// TODO
		return cb ? cb(1) : 1;
	} else if (this.modifycolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.modifycolumn.columnid;

		if (!table.xcolumns[columnid]) {
			throw new Error(
				'Cannot modify column "' +
					columnid +
					'", because it was not found in the table "' +
					tableid +
					'"'
			);
		}

		col = table.xcolumns[columnid];
		col.dbtypeid = this.dbtypeid;
		col.dbsize = this.dbsize;
		col.dbprecision = this.dbprecision;
		col.dbenum = this.dbenum;

		// TODO
		return cb ? cb(1) : 1;
	} else if (this.renamecolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;

		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.renamecolumn;
		var tocolumnid = this.to;

		var col;
		if (!table.xcolumns[columnid]) {
			throw new Error(
				'Column "' + columnid + '" is not found in the table "' + tableid + '"'
			);
		}
		if (table.xcolumns[tocolumnid]) {
			throw new Error(
				'Column "' + tocolumnid + '" already exists in the table "' + tableid + '"'
			);
		}

		if (columnid != tocolumnid) {
			for (var j = 0; j < table.columns.length; j++) {
				if (table.columns[j].columnid == columnid) {
					table.columns[j].columnid = tocolumnid;
				}
			}

			table.xcolumns[tocolumnid] = table.xcolumns[columnid];
			delete table.xcolumns[columnid];

			for (var i = 0, ilen = table.data.length; i < ilen; i++) {

				table.data[i][tocolumnid] = table.data[i][columnid];
				delete table.data[i][columnid];
			}
			return table.data.length;
		} else {
			return cb ? cb(0) : 0;
		}
	} else if (this.dropcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.dropcolumn;

		var found = false;
		for (var j = 0; j < table.columns.length; j++) {
			if (table.columns[j].columnid == columnid) {
				found = true;
				table.columns.splice(j, 1);
				break;
			}
		}

		if (!found) {
			throw new Error(
				'Cannot drop column "' +
					columnid +
					'", because it was not found in the table "' +
					tableid +
					'"'
			);
		}

		delete table.xcolumns[columnid];

		for (i = 0, ilen = table.data.length; i < ilen; i++) {
			delete table.data[i][columnid];
		}
		return cb ? cb(table.data.length) : table.data.length;
	} else {
		throw Error('Unknown ALTER TABLE method');
	}
};

/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateIndex = function(params) {
	return yy.extend(this, params);
};
yy.CreateIndex.prototype.toString = function() {
	var s = 'CREATE';
	if (this.unique) s += ' UNIQUE';
	s += ' INDEX ' + this.indexid + ' ON ' + this.table.toString();
	s += '(' + this.columns.toString() + ')';
	return s;
};

// CREATE TABLE
yy.CreateIndex.prototype.execute = function(databaseid, params, cb) {
	//	var self = this;
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;
	var table = db.tables[tableid];
	var indexid = this.indexid;
	db.indices[indexid] = tableid;

	var rightfns = this.columns
		.map(function(expr) {
			return expr.expression.toJS('r', '');
		})
		.join("+'`'+");

	var rightfn = new Function('r,params,alasql', 'return ' + rightfns);

	if (this.unique) {
		table.uniqdefs[indexid] = {
			rightfns: rightfns,
		};
		var ux = (table.uniqs[indexid] = {});
		if (table.data.length > 0) {
			for (var i = 0, ilen = table.data.length; i < ilen; i++) {
				var addr = rightfns(table.data[i]);
				if (!ux[addr]) {
					ux[addr] = {num: 0};
				}
				ux[addr].num++;
			}
		}
	} else {
		var hh = hash(rightfns);
		table.inddefs[indexid] = {rightfns: rightfns, hh: hh};
		table.indices[hh] = {};

		var ix = (table.indices[hh] = {});
		if (table.data.length > 0) {
			for (var i = 0, ilen = table.data.length; i < ilen; i++) {
				var addr = rightfn(table.data[i], params, alasql);
				if (!ix[addr]) {
					ix[addr] = [];
				}
				ix[addr].push(table.data[i]);
			}
		}
	}
	var res = 1;
	if (cb) res = cb(res);
	return res;
};

yy.Reindex = function(params) {
	return yy.extend(this, params);
};
yy.Reindex.prototype.toString = function() {
	var s = 'REINDEX ' + this.indexid;
	return s;
};

// CREATE TABLE
yy.Reindex.prototype.execute = function(databaseid, params, cb) {
	//	var self = this;
	var db = alasql.databases[databaseid];
	var indexid = this.indexid;

	var tableid = db.indices[indexid];
	var table = db.tables[tableid];
	table.indexColumns();
	var res = 1;
	if (cb) res = cb(res);
	return res;
};

/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropIndex = function(params) {
	return yy.extend(this, params);
};
yy.DropIndex.prototype.toString = function() {
	return 'DROP INDEX' + this.indexid;
};

// DROP TABLE
yy.DropIndex.prototype.compile = function(db) {
	var indexid = this.indexid;
	return function() {
		return 1;
	};
};

/*
//
// WITH SELECT for Alasql.js
// Date: 11.01.2015
// (c) 2015, Andrey Gershun
//
*/

yy.WithSelect = function(params) {
	return yy.extend(this, params);
};
yy.WithSelect.prototype.toString = function() {
	var s = 'WITH ';
	s +=
		this.withs
			.map(function(w) {
				return w.name + ' AS (' + w.select.toString() + ')';
			})
			.join(',') + ' ';
	s += this.select.toString();
	return s;
};

yy.WithSelect.prototype.execute = function(databaseid, params, cb) {
	var self = this;
	// Create temporary tables
	var savedTables = [];
	self.withs.forEach(function(w) {
		savedTables.push(alasql.databases[databaseid].tables[w.name]);
		var tb = (alasql.databases[databaseid].tables[w.name] = new Table({tableid: w.name}));
		tb.data = w.select.execute(databaseid, params);
	});

	var res = 1;
	res = this.select.execute(databaseid, params, function(data) {
		// Clear temporary tables
		//		setTimeout(function(){
		self.withs.forEach(function(w, idx) {
			if (savedTables[idx]) alasql.databases[databaseid].tables[w.name] = savedTables[idx];
			else delete alasql.databases[databaseid].tables[w.name];
		});
		//		},0);

		if (cb) data = cb(data);
		return data;
	});
	return res;
};

/*
//
// IF for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.If = function(params) {
	return yy.extend(this, params);
};
yy.If.prototype.toString = function() {
	var s = 'IF' + ' ';
	s += this.expression.toString();
	s += ' ' + this.thenstat.toString();
	if (this.elsestat) s += ' ELSE ' + this.thenstat.toString();
	return s;
};

// CREATE TABLE

yy.If.prototype.execute = function(databaseid, params, cb) {
	var res;

	var fn = new Function(
		'params,alasql,p',
		'var y;return ' + this.expression.toJS('({})', '', null)
	).bind(this);

	if (fn(params, alasql)) res = this.thenstat.execute(databaseid, params, cb);
	else {
		if (this.elsestat) res = this.elsestat.execute(databaseid, params, cb);
		else {
			if (cb) res = cb(res);
		}
	}
	//	 else res = this.elsestat.execute(databaseid,params,cb,scope);
	return res;
};

/*
//
// CREATE VIEW for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.While = function(params) {
	return yy.extend(this, params);
};
yy.While.prototype.toString = function() {
	var s = 'WHILE ';
	s += this.expression.toString();
	s += ' ' + this.loopstat.toString();
	return s;
};

yy.While.prototype.execute = function(databaseid, params, cb) {
	var self = this;
	var res = [];

	var fn = new Function('params,alasql,p', 'var y;return ' + this.expression.toJS());

	if (cb) {
		var first = false;
		var loop = function(data) {
			if (first) {
				res.push(data);
			} else {
				first = true;
			}
			setTimeout(function() {
				if (fn(params, alasql)) {
					self.loopstat.execute(databaseid, params, loop);
				} else {
					res = cb(res);
				}
			}, 0);
		};
		loop();
	} else {
		while (fn(params, alasql)) {
			var res1 = self.loopstat.execute(databaseid, params);
			res.push(res1);
		}
	}
	return res;
};

yy.Break = function(params) {
	return yy.extend(this, params);
};
yy.Break.prototype.toString = function() {
	var s = 'BREAK';
	return s;
};

yy.Break.prototype.execute = function(databaseid, params, cb, scope) {
	var res = 1;
	if (cb) res = cb(res);
	return res;
};

yy.Continue = function(params) {
	return yy.extend(this, params);
};
yy.Continue.prototype.toString = function() {
	var s = 'CONTINUE';
	return s;
};

yy.Continue.prototype.execute = function(databaseid, params, cb, scope) {
	var res = 1;
	if (cb) res = cb(res);
	return res;
};

yy.BeginEnd = function(params) {
	return yy.extend(this, params);
};
yy.BeginEnd.prototype.toString = function() {
	var s = 'BEGIN ' + this.statements.toString() + ' END';
	return s;
};

yy.BeginEnd.prototype.execute = function(databaseid, params, cb, scope) {
	var self = this;
	var res = [];

	var idx = 0;
	runone();
	function runone() {
		self.statements[idx].execute(databaseid, params, function(data) {
			res.push(data);
			idx++;
			if (idx < self.statements.length) return runone();
			if (cb) res = cb(res);
		});
	}
	return res;
};

/*
//
// INSERT for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global yy alasql*/
yy.Insert = function(params) {
	return yy.extend(this, params);
};
yy.Insert.prototype.toString = function() {
	var s = 'INSERT ';
	if (this.orreplace) s += 'OR REPLACE ';
	if (this.replaceonly) s = 'REPLACE ';
	s += 'INTO ' + this.into.toString();
	if (this.columns) s += '(' + this.columns.toString() + ')';
	if (this.values) s += ' VALUES ' + this.values.toString();
	if (this.select) s += ' ' + this.select.toString();
	return s;
};

yy.Insert.prototype.toJS = function(context, tableid, defcols) {

	//	if(this.expression.reduced) return 'true';
	//	return this.expression.toJS(context, tableid, defcols);

	//	var s = 'this.queriesdata['+(this.queriesidx-1)+'][0]';

	var s = 'this.queriesfn[' + (this.queriesidx - 1) + '](this.params,null,' + context + ')';

	return s;
};

yy.Insert.prototype.compile = function(databaseid) {
	var self = this;
	databaseid = self.into.databaseid || databaseid;
	var db = alasql.databases[databaseid];

	var tableid = self.into.tableid;
	var table = db.tables[tableid];

	if (!table) {
		throw "Table '" + tableid + "' could not be found";
	}

	// Check, if this dirty flag is required
	var s = '';
	var sw = '';
	var s = "db.tables['" + tableid + "'].dirty=true;";
	var s3 = 'var a,aa=[],x;';

	var s33;

	// INSERT INTO table VALUES
	if (this.values) {
		if (this.exists) {
			this.existsfn = this.exists.map(function(ex) {
				var nq = ex.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}
		if (this.queries) {
			this.queriesfn = this.queries.map(function(q) {
				var nq = q.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}

		self.values.forEach(function(values) {
			var ss = [];

			//			s += 'db.tables[\''+tableid+'\'].data.push({';

			//			s += '';
			if (self.columns) {
				self.columns.forEach(function(col, idx) {

					//			ss.push(col.columnid +':'+ self.values[idx].value.toString());

					//			if(rec[f.name.value] == "NULL") rec[f.name.value] = undefined;

					//			if(table.xflds[f.name.value].dbtypeid == "INT") rec[f.name.value] = +rec[f.name.value]|0;
					//			else if(table.xflds[f.name.value].dbtypeid == "FLOAT") rec[f.name.value] = +rec[f.name.value];
					var q = "'" + col.columnid + "':";
					if (table.xcolumns && table.xcolumns[col.columnid]) {
						if (
							['INT', 'FLOAT', 'NUMBER', 'MONEY'].indexOf(
								table.xcolumns[col.columnid].dbtypeid
							) >= 0
						) {
							//q += ''
							q += '(x=' + values[idx].toJS() + ',x==undefined?undefined:+x)';
						} else if (alasql.fn[table.xcolumns[col.columnid].dbtypeid]) {
							q += '(new ' + table.xcolumns[col.columnid].dbtypeid + '(';
							q += values[idx].toJS();
							q += '))';
						} else {
							q += values[idx].toJS();
						}
					} else {
						q += values[idx].toJS();
					}
					ss.push(q);
				});
			} else {
				//				var table = db.tables[tableid];

				if (Array.isArray(values) && table.columns && table.columns.length > 0) {
					table.columns.forEach(function(col, idx) {
						var q = "'" + col.columnid + "':";
						//						var val = values[idx].toJS();

						if (['INT', 'FLOAT', 'NUMBER', 'MONEY'].indexOf(col.dbtypeid) >= 0) {
							q += '+' + values[idx].toJS();
						} else if (alasql.fn[col.dbtypeid]) {
							q += '(new ' + col.dbtypeid + '(';
							q += values[idx].toJS();
							q += '))';
						} else {
							q += values[idx].toJS();
						}

						ss.push(q);

					});
				} else {

					//					sw = 'var w='+JSONtoJS(values)+';for(var k in w){r[k]=w[k]};';
					sw = JSONtoJS(values);
				}
			}

			if (db.tables[tableid].defaultfns) {
				ss.unshift(db.tables[tableid].defaultfns);
			}
			if (sw) {
				s += 'a=' + sw + ';';
			} else {
				s += 'a={' + ss.join(',') + '};';
			}

			// If this is a class
			if (db.tables[tableid].isclass) {
				s += "var db=alasql.databases['" + databaseid + "'];";
				s += 'a.$class="' + tableid + '";';
				s += 'a.$id=db.counter++;';
				s += 'db.objects[a.$id]=a;';
			}
			//			s += 'db.tables[\''+tableid+'\'].insert(r);';
			if (db.tables[tableid].insert) {
				s += "var db=alasql.databases['" + databaseid + "'];";
				s +=
					"db.tables['" +
					tableid +
					"'].insert(a," +
					(self.orreplace ? 'true' : 'false') +
					');';
			} else {
				s += 'aa.push(a);';
			}
		});

		s33 = s3 + s;

		if (db.tables[tableid].insert) {
			//			s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].insert(r);';
		} else {
			s +=
				"alasql.databases['" +
				databaseid +
				"'].tables['" +
				tableid +
				"'].data=" +
				"alasql.databases['" +
				databaseid +
				"'].tables['" +
				tableid +
				"'].data.concat(aa);";
		}

		if (db.tables[tableid].insert) {
			if (db.tables[tableid].isclass) {
				s += 'return a.$id;';
			} else {
				s += 'return ' + self.values.length;
			}
		} else {
			s += 'return ' + self.values.length;
		}

		var insertfn = new Function('db, params, alasql', 'var y;' + s3 + s).bind(this);

		// INSERT INTO table SELECT
	} else if (this.select) {
		this.select.modifier = 'RECORDSET';
		var selectfn = this.select.compile(databaseid);
		if (db.engineid && alasql.engines[db.engineid].intoTable) {
			var statement = function(params, cb) {
				var aa = selectfn(params);
				var res = alasql.engines[db.engineid].intoTable(
					db.databaseid,
					tableid,
					aa.data,
					null,
					cb
				);
				return res;
			};
			return statement;
		} else {

			var defaultfns = 'return alasql.utils.extend(r,{' + table.defaultfns + '})';
			var defaultfn = new Function('r,db,params,alasql', defaultfns);
			var insertfn = function(db, params, alasql) {
				var res = selectfn(params).data;
				if (db.tables[tableid].insert) {
					// If insert() function exists (issue #92)
					for (var i = 0, ilen = res.length; i < ilen; i++) {
						var r = cloneDeep(res[i]);
						defaultfn(r, db, params, alasql);
						db.tables[tableid].insert(r, self.orreplace);
					}
				} else {
					db.tables[tableid].data = db.tables[tableid].data.concat(res);
				}
				if (alasql.options.nocount) return;
				else return res.length;
			};
		}
	} else if (this.default) {
		var insertfns =
			"db.tables['" + tableid + "'].data.push({" + table.defaultfns + '});return 1;';
		var insertfn = new Function('db,params,alasql', insertfns);
	} else {
		throw new Error('Wrong INSERT parameters');
	}

	if (db.engineid && alasql.engines[db.engineid].intoTable && alasql.options.autocommit) {
		var statement = function(params, cb) {
			var aa = new Function('db,params', 'var y;' + s33 + 'return aa;')(db, params);

			var res = alasql.engines[db.engineid].intoTable(db.databaseid, tableid, aa, null, cb);
			//			if(cb) cb(res);
			return res;
		};
	} else {
		var statement = function(params, cb) {

			var db = alasql.databases[databaseid];

			if (alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid, tableid);
			}

			var res = insertfn(db, params, alasql);

			if (alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid, tableid);
			}
			//		var res = insertfn(db, params);
			if (alasql.options.nocount) res = undefined;
			if (cb) cb(res);
			return res;
		};
	}

	return statement;
};

yy.Insert.prototype.execute = function(databaseid, params, cb) {
	return this.compile(databaseid)(params, cb);
	//	throw new Error('Insert statement is should be compiled')
};

/*
//
// TRIGGER for Alasql.js
// Date: 29.12.2015
//
*/

yy.CreateTrigger = function(params) {
	return yy.extend(this, params);
};
yy.CreateTrigger.prototype.toString = function() {
	var s = 'CREATE TRIGGER ' + this.trigger + ' ';
	if (this.when) s += this.when + ' ';
	s += this.action + ' ON ';
	if (this.table.databaseid) s += this.table.databaseid + '.';
	s += this.table.tableid + ' ';
	s += this.statement.toString();
	return s;
};

yy.CreateTrigger.prototype.execute = function(databaseid, params, cb) {
	var res = 1; // No tables removed
	var triggerid = this.trigger;
	databaseid = this.table.databaseid || databaseid;
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;

	var trigger = {
		action: this.action,
		when: this.when,
		statement: this.statement,
		funcid: this.funcid,
		tableid: this.table.tableid,
	};

	db.triggers[triggerid] = trigger;
	if (trigger.action == 'INSERT' && trigger.when == 'BEFORE') {
		db.tables[tableid].beforeinsert[triggerid] = trigger;
	} else if (trigger.action == 'INSERT' && trigger.when == 'AFTER') {
		db.tables[tableid].afterinsert[triggerid] = trigger;
	} else if (trigger.action == 'INSERT' && trigger.when == 'INSTEADOF') {
		db.tables[tableid].insteadofinsert[triggerid] = trigger;
	} else if (trigger.action == 'DELETE' && trigger.when == 'BEFORE') {
		db.tables[tableid].beforedelete[triggerid] = trigger;
	} else if (trigger.action == 'DELETE' && trigger.when == 'AFTER') {
		db.tables[tableid].afterdelete[triggerid] = trigger;
	} else if (trigger.action == 'DELETE' && trigger.when == 'INSTEADOF') {
		db.tables[tableid].insteadofdelete[triggerid] = trigger;
	} else if (trigger.action == 'UPDATE' && trigger.when == 'BEFORE') {
		db.tables[tableid].beforeupdate[triggerid] = trigger;
	} else if (trigger.action == 'UPDATE' && trigger.when == 'AFTER') {
		db.tables[tableid].afterupdate[triggerid] = trigger;
	} else if (trigger.action == 'UPDATE' && trigger.when == 'INSTEADOF') {
		db.tables[tableid].insteadofupdate[triggerid] = trigger;
	}

	if (cb) res = cb(res);
	return res;
};

yy.DropTrigger = function(params) {
	return yy.extend(this, params);
};
yy.DropTrigger.prototype.toString = function() {
	var s = 'DROP TRIGGER ' + this.trigger;
	return s;
};

/**
	Drop trigger
	@param {string} databaseid Database id
	@param {object} params Parameters
	@param {callback} cb Callback function
	@return Number of dropped triggers
	@example
	DROP TRIGGER one;
*/
yy.DropTrigger.prototype.execute = function(databaseid, params, cb) {
	var res = 0; // No tables removed
	var db = alasql.databases[databaseid];
	var triggerid = this.trigger;

	// get the trigger
	var trigger = db.triggers[triggerid];

	//  if the trigger exists
	if (trigger) {
		var tableid = db.triggers[triggerid].tableid;

		if (tableid) {
			res = 1;
			delete db.tables[tableid].beforeinsert[triggerid];
			delete db.tables[tableid].afterinsert[triggerid];
			delete db.tables[tableid].insteadofinsert[triggerid];
			delete db.tables[tableid].beforedelete[triggerid];
			delete db.tables[tableid].afterdelete[triggerid];
			delete db.tables[tableid].insteadofdelete[triggerid];
			delete db.tables[tableid].beforeupdate[triggerid];
			delete db.tables[tableid].afterupdate[triggerid];
			delete db.tables[tableid].insteadofupdate[triggerid];
			delete db.triggers[triggerid];
		} else {
			throw new Error('Trigger Table not found');
		}
	} else {
		throw new Error('Trigger not found');
	}
	if (cb) res = cb(res);
	return res;
};

/*
//
// DELETE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Delete = function(params) {
	return yy.extend(this, params);
};
yy.Delete.prototype.toString = function() {
	var s = 'DELETE FROM ' + this.table.toString();
	if (this.where) s += ' WHERE ' + this.where.toString();
	return s;
};

yy.Delete.prototype.compile = function(databaseid) {

	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;
	var statement;
	var db = alasql.databases[databaseid];

	if (this.where) {

		//		this.query = {};

		if (this.exists) {
			this.existsfn = this.exists.map(function(ex) {
				var nq = ex.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}
		if (this.queries) {
			this.queriesfn = this.queries.map(function(q) {
				var nq = q.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}

		//		try {

		//		var query = {};

		var wherefn = new Function(
			'r,params,alasql',
			'var y;return (' + this.where.toJS('r', '') + ')'
		).bind(this);

		statement = function(params, cb) {
			if (db.engineid && alasql.engines[db.engineid].deleteFromTable) {
				return alasql.engines[db.engineid].deleteFromTable(
					databaseid,
					tableid,
					wherefn,
					params,
					cb
				);
			}

			if (alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {
				alasql.engines[db.engineid].loadTableData(databaseid, tableid);
			}

			var table = db.tables[tableid];
			//			table.dirty = true;
			var orignum = table.data.length;

			var newtable = [];
			for (var i = 0, ilen = table.data.length; i < ilen; i++) {
				if (wherefn(table.data[i], params, alasql)) {
					// Check for transaction - if it is not possible then return all back
					if (table.delete) {
						table.delete(i, params, alasql);
					} else {
						// Simply do not push
					}
				} else newtable.push(table.data[i]);
			}
			//			table.data = table.data.filter(function(r){return !;});
			table.data = newtable;

			// Trigger prevent functionality
			for (var tr in table.afterdelete) {
				var trigger = table.afterdelete[tr];
				if (trigger) {
					if (trigger.funcid) {
						alasql.fn[trigger.funcid]();
					} else if (trigger.statement) {
						trigger.statement.execute(databaseid);
					}
				}
			}

			var res = orignum - table.data.length;
			if (alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {
				alasql.engines[db.engineid].saveTableData(databaseid, tableid);
			}

			if (cb) cb(res);
			return res;
		};
		//  .bind(query);

		// 		if(!this.queries) return;
		// 			query.queriesfn = this.queries.map(function(q) {
		// 			return q.compile(alasql.useid);
		// 		});
	} else {
		statement = function(params, cb) {
			if (alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid, tableid);
			}

			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = db.tables[tableid].data.length;
			//table.deleteall();
			// Delete all records from the array
			db.tables[tableid].data.length = 0;

			// Reset PRIMARY KEY and indexes
			for (var ix in db.tables[tableid].uniqs) {
				db.tables[tableid].uniqs[ix] = {};
			}

			for (var ix in db.tables[tableid].indices) {
				db.tables[tableid].indices[ix] = {};
			}

			if (alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid, tableid);
			}

			if (cb) cb(orignum);
			return orignum;
		};
	}

	return statement;
};

yy.Delete.prototype.execute = function(databaseid, params, cb) {
	return this.compile(databaseid)(params, cb);
};

/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global yy alasql */

yy.Update = function(params) {
	return yy.extend(this, params);
};
yy.Update.prototype.toString = function() {
	var s = 'UPDATE ' + this.table.toString();
	if (this.columns) s += ' SET ' + this.columns.toString();
	if (this.where) s += ' WHERE ' + this.where.toString();
	return s;
};

yy.SetColumn = function(params) {
	return yy.extend(this, params);
};
yy.SetColumn.prototype.toString = function() {
	return this.column.toString() + '=' + this.expression.toString();
};

yy.Update.prototype.compile = function(databaseid) {

	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;

	if (this.where) {
		if (this.exists) {
			this.existsfn = this.exists.map(function(ex) {
				var nq = ex.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}
		if (this.queries) {
			this.queriesfn = this.queries.map(function(q) {
				var nq = q.compile(databaseid);
				nq.query.modifier = 'RECORDSET';
				return nq;
			});
		}

		var wherefn = new Function(
			'r,params,alasql',
			'var y;return ' + this.where.toJS('r', '')
		).bind(this);
	}

	// Construct update function
	var s = alasql.databases[databaseid].tables[tableid].onupdatefns || '';
	s += ';';
	this.columns.forEach(function(col) {
		s += "r['" + col.column.columnid + "']=" + col.expression.toJS('r', '') + ';';
	});

	var assignfn = new Function('r,params,alasql', 'var y;' + s);

	var statement = function(params, cb) {
		var db = alasql.databases[databaseid];

		if (db.engineid && alasql.engines[db.engineid].updateTable) {

			return alasql.engines[db.engineid].updateTable(
				databaseid,
				tableid,
				assignfn,
				wherefn,
				params,
				cb
			);
		}

		if (alasql.options.autocommit && db.engineid) {
			alasql.engines[db.engineid].loadTableData(databaseid, tableid);
		}

		var table = db.tables[tableid];
		if (!table) {
			throw new Error("Table '" + tableid + "' not exists");
		}
		//		table.dirty = true;
		var numrows = 0;
		for (var i = 0, ilen = table.data.length; i < ilen; i++) {
			if (!wherefn || wherefn(table.data[i], params, alasql)) {
				if (table.update) {
					table.update(assignfn, i, params);
				} else {
					assignfn(table.data[i], params, alasql);
				}
				numrows++;
			}
		}

		if (alasql.options.autocommit && db.engineid) {
			alasql.engines[db.engineid].saveTableData(databaseid, tableid);
		}

		if (cb) cb(numrows);
		return numrows;
	};
	return statement;
};

yy.Update.prototype.execute = function(databaseid, params, cb) {
	return this.compile(databaseid)(params, cb);
};

/*
//
// SET for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/

/* global alasql, yy */

yy.Merge = function(params) {
	return yy.extend(this, params);
};
yy.Merge.prototype.toString = function() {
	var s = 'MERGE ';
	s += this.into.tableid + ' ';
	if (this.into.as) s += 'AS ' + this.into.as + ' ';
	s += 'USING ' + this.using.tableid + ' ';
	if (this.using.as) s += 'AS ' + this.using.as + ' ';
	s += 'ON ' + this.on.toString() + ' ';
	this.matches.forEach(function(m) {
		s += 'WHEN ';
		if (!m.matched) s += 'NOT ';
		s += 'MATCHED ';
		if (m.bytarget) s += 'BY TARGET ';
		if (m.bysource) s += 'BY SOURCE ';
		if (m.expr) s += 'AND' + ' ' + m.expr.toString() + ' ';
		s += 'THEN ';
		if (m.action.delete) s += 'DELETE ';
		if (m.action.insert) {
			s += 'INSERT ';
			if (m.action.columns) s += '(' + m.action.columns.toString() + ') ';
			if (m.action.values) s += 'VALUES (' + m.action.values.toString() + ') ';
			if (m.action.defaultvalues) s += 'DEFAULT VALUES ';
		}
		if (m.action.update) {
			s += 'UPDATE ';
			s +=
				m.action.update
					.map(function(u) {
						return u.toString();
					})
					.join(',') + ' ';
		}
	});

	return s;
};

yy.Merge.prototype.execute = function(databaseid, params, cb) {
	var res = 1;

	if (cb) res = cb(res);
	return res;
};

/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// Modified: 16.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global yy alasql */

// CREATE DATABASE databaseid
yy.CreateDatabase = function(params) {
	return yy.extend(this, params);
};
yy.CreateDatabase.prototype.toString = function() {
	var s = 'CREATE';
	if (this.engineid) s += ' ' + this.engineid;
	s += ' DATABASE';
	if (this.ifnotexists) s += ' IF NOT EXISTS';
	s += ' ' + this.databaseid;
	if (this.args && this.args.length > 0) {
		s +=
			'(' +
			this.args
				.map(function(arg) {
					return arg.toString();
				})
				.join(', ') +
			')';
	}
	if (this.as) s += ' AS ' + this.as;
	return s;
};
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.CreateDatabase.prototype.execute = function(databaseid, params, cb) {
	var args;
	if (this.args && this.args.length > 0) {
		args = this.args.map(function(arg) {

			return new Function('params,alasql', 'var y;return ' + arg.toJS())(params, alasql);
		});
	}
	if (this.engineid) {
		var res = alasql.engines[this.engineid].createDatabase(
			this.databaseid,
			this.args,
			this.ifnotexists,
			this.as,
			cb
		);
		return res;
	} else {
		var dbid = this.databaseid;
		if (alasql.databases[dbid]) {
			throw new Error("Database '" + dbid + "' already exists");
		}
		var a = new alasql.Database(dbid);
		var res = 1;
		if (cb) return cb(res);
		return res;
	}
};

// CREATE DATABASE databaseid
yy.AttachDatabase = function(params) {
	return yy.extend(this, params);
};
yy.AttachDatabase.prototype.toString = function(args) {
	var s = 'ATTACH';
	if (this.engineid) s += ' ' + this.engineid;
	s += ' DATABASE' + ' ' + this.databaseid;
	// TODO add params
	if (args) {
		s += '(';
		if (args.length > 0) {
			s += args
				.map(function(arg) {
					return arg.toString();
				})
				.join(', ');
		}
		s += ')';
	}
	if (this.as) s += ' AS' + ' ' + this.as;
	return s;
};
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.AttachDatabase.prototype.execute = function(databaseid, params, cb) {
	if (!alasql.engines[this.engineid]) {
		throw new Error('Engine "' + this.engineid + '" is not defined.');
	}
	var res = alasql.engines[this.engineid].attachDatabase(
		this.databaseid,
		this.as,
		this.args,
		params,
		cb
	);
	return res;
};

// CREATE DATABASE databaseid
yy.DetachDatabase = function(params) {
	return yy.extend(this, params);
};
yy.DetachDatabase.prototype.toString = function() {
	var s = 'DETACH';
	s += ' DATABASE' + ' ' + this.databaseid;
	return s;
};
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.DetachDatabase.prototype.execute = function(databaseid, params, cb) {
	if (!alasql.databases[this.databaseid].engineid) {
		throw new Error(
			'Cannot detach database "' + this.engineid + '", because it was not attached.'
		);
	}
	var res;

	var dbid = this.databaseid;

	if (dbid === alasql.DEFAULTDATABASEID) {
		throw new Error('Drop of default database is prohibited');
	}

	if (!alasql.databases[dbid]) {
		if (!this.ifexists) {
			throw new Error("Database '" + dbid + "' does not exist");
		} else {
			res = 0;
		}
	} else {
		delete alasql.databases[dbid];
		if (dbid === alasql.useid) {
			alasql.use();
		}
		res = 1;
	}
	if (cb) cb(res);
	return res;
	//	var res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, cb);
	//	return res;
};

// USE DATABSE databaseid
// USE databaseid
yy.UseDatabase = function(params) {
	return yy.extend(this, params);
};
yy.UseDatabase.prototype.toString = function() {
	return 'USE' + ' ' + 'DATABASE' + ' ' + this.databaseid;
};
//yy.UseDatabase.prototype.compile = returnUndefined;
yy.UseDatabase.prototype.execute = function(databaseid, params, cb) {
	var dbid = this.databaseid;
	if (!alasql.databases[dbid]) {
		throw new Error("Database '" + dbid + "' does not exist");
	}
	alasql.use(dbid);
	var res = 1;
	if (cb) cb(res);
	return res;
};

// DROP DATABASE databaseid
yy.DropDatabase = function(params) {
	return yy.extend(this, params);
};
yy.DropDatabase.prototype.toString = function() {
	var s = 'DROP';
	if (this.ifexists) s += ' IF EXISTS';
	s += ' DATABASE ' + this.databaseid;
	return s;
};
//yy.DropDatabase.prototype.compile = returnUndefined;
yy.DropDatabase.prototype.execute = function(databaseid, params, cb) {
	if (this.engineid) {
		return alasql.engines[this.engineid].dropDatabase(this.databaseid, this.ifexists, cb);
	}
	var res;

	var dbid = this.databaseid;

	if (dbid === alasql.DEFAULTDATABASEID) {
		throw new Error('Drop of default database is prohibited');
	}
	if (!alasql.databases[dbid]) {
		if (!this.ifexists) {
			throw new Error("Database '" + dbid + "' does not exist");
		} else {
			res = 0;
		}
	} else {
		if (alasql.databases[dbid].engineid) {
			throw new Error(
				"Cannot drop database '" + dbid + "', because it is attached. Detach it."
			);
		}

		delete alasql.databases[dbid];
		if (dbid === alasql.useid) {
			alasql.use();
		}
		res = 1;
	}
	if (cb) cb(res);
	return res;
};

/*
//
// SET for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Declare = function(params) {
	return yy.extend(this, params);
};
yy.Declare.prototype.toString = function() {
	var s = 'DECLARE ';
	if (this.declares && this.declares.length > 0) {
		s = this.declares
			.map(function(declare) {
				var s = '';
				s += '@' + declare.variable + ' ';
				s += declare.dbtypeid;
				if (this.dbsize) {
					s += '(' + this.dbsize;
					if (this.dbprecision) {
						s += ',' + this.dbprecision;
					}
					s += ')';
				}
				if (declare.expression) {
					s += ' = ' + declare.expression.toString();
				}
				return s;
			})
			.join(',');
	}
	return s;
};

yy.Declare.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	if (this.declares && this.declares.length > 0) {
		this.declares.map(function(declare) {
			var dbtypeid = declare.dbtypeid;
			if (!alasql.fn[dbtypeid]) {
				dbtypeid = dbtypeid.toUpperCase();
			}
			alasql.declares[declare.variable] = {
				dbtypeid: dbtypeid,
				dbsize: declare.dbsize,
				dbprecision: declare.dbprecision,
			};

			// Set value
			if (declare.expression) {

				alasql.vars[declare.variable] = new Function(
					'params,alasql',
					'return ' + declare.expression.toJS('({})', '', null)
				)(params, alasql);
				if (alasql.declares[declare.variable]) {
					alasql.vars[declare.variable] = alasql.stdfn.CONVERT(
						alasql.vars[declare.variable],
						alasql.declares[declare.variable]
					);
				}
			}
		});
	}
	if (cb) {
		res = cb(res);
	}
	return res;
};

/*
//
// SHOW for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ShowDatabases = function(params) {
	return yy.extend(this, params);
};
yy.ShowDatabases.prototype.toString = function() {
	var s = 'SHOW DATABASES';
	if (this.like) s += 'LIKE ' + this.like.toString();
	return s;
};
yy.ShowDatabases.prototype.execute = function(databaseid, params, cb) {
	if (this.engineid) {
		return alasql.engines[this.engineid].showDatabases(this.like, cb);
	} else {
		var self = this;
		var res = [];
		for (var dbid in alasql.databases) {
			res.push({databaseid: dbid});
		}
		if (self.like && res && res.length > 0) {
			res = res.filter(function(d) {
				//				return d.databaseid.match(new RegExp((self.like.value||'').replace(/\%/g,'.*').replace(/\?|_/g,'.'),'g'));
				return alasql.utils.like(self.like.value, d.databaseid);
			});
		}
		if (cb) cb(res);
		return res;
	}
};

yy.ShowTables = function(params) {
	return yy.extend(this, params);
};
yy.ShowTables.prototype.toString = function() {
	var s = 'SHOW TABLES';
	if (this.databaseid) s += ' FROM ' + this.databaseid;
	if (this.like) s += ' LIKE ' + this.like.toString();
	return s;
};
yy.ShowTables.prototype.execute = function(databaseid, params, cb) {
	var db = alasql.databases[this.databaseid || databaseid];

	var self = this;
	var res = [];
	for (var tableid in db.tables) {
		res.push({tableid: tableid});
	}
	if (self.like && res && res.length > 0) {
		res = res.filter(function(d) {
			//return d.tableid.match(new RegExp((self.like.value||'').replace(/\%/g,'.*').replace(/\?|_/g,'.'),'g'));
			return alasql.utils.like(self.like.value, d.tableid);
		});
	}
	if (cb) cb(res);
	return res;
};

yy.ShowColumns = function(params) {
	return yy.extend(this, params);
};
yy.ShowColumns.prototype.toString = function() {
	var s = 'SHOW COLUMNS';
	if (this.table.tableid) s += ' FROM ' + this.table.tableid;
	if (this.databaseid) s += ' FROM ' + this.databaseid;
	return s;
};

yy.ShowColumns.prototype.execute = function(databaseid, params, cb) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];

	if (table && table.columns) {
		var res = table.columns.map(function(col) {
			return {columnid: col.columnid, dbtypeid: col.dbtypeid, dbsize: col.dbsize};
		});
		if (cb) cb(res);
		return res;
	} else {
		if (cb) cb([]);
		return [];
	}
};

yy.ShowIndex = function(params) {
	return yy.extend(this, params);
};
yy.ShowIndex.prototype.toString = function() {
	var s = 'SHOW INDEX';
	if (this.table.tableid) s += ' FROM ' + this.table.tableid;
	if (this.databaseid) s += ' FROM ' + this.databaseid;
	return s;
};
yy.ShowIndex.prototype.execute = function(databaseid, params, cb) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var res = [];
	if (table && table.indices) {
		for (var ind in table.indices) {
			res.push({hh: ind, len: Object.keys(table.indices[ind]).length});
		}
	}

	if (cb) cb(res);
	return res;
};

yy.ShowCreateTable = function(params) {
	return yy.extend(this, params);
};
yy.ShowCreateTable.prototype.toString = function() {
	var s = 'SHOW CREATE TABLE ' + this.table.tableid;
	if (this.databaseid) s += ' FROM ' + this.databaseid;
	return s;
};
yy.ShowCreateTable.prototype.execute = function(databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	if (table) {
		var s = 'CREATE TABLE ' + this.table.tableid + ' (';
		var ss = [];
		if (table.columns) {
			table.columns.forEach(function(col) {
				var a = col.columnid + ' ' + col.dbtypeid;
				if (col.dbsize) a += '(' + col.dbsize + ')';
				if (col.primarykey) a += ' PRIMARY KEY';
				// TODO extend
				ss.push(a);
			});
			s += ss.join(', ');
		}
		s += ')';
		return s;
	} else {
		throw new Error('There is no such table "' + this.table.tableid + '"');
	}
};

/*
//
// SET for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/

yy.SetVariable = function(params) {
	return yy.extend(this, params);
};
yy.SetVariable.prototype.toString = function() {
	var s = 'SET ';
	if (typeof this.value != 'undefined')
		s += this.variable.toUpperCase() + ' ' + (this.value ? 'ON' : 'OFF');
	if (this.expression) s += this.method + this.variable + ' = ' + this.expression.toString();
	return s;
};

yy.SetVariable.prototype.execute = function(databaseid, params, cb) {

	if (typeof this.value != 'undefined') {
		var val = this.value;
		if (val == 'ON') val = true;
		else if (val == 'OFF') val = false;
		//		if(this.method == '@') {
		alasql.options[this.variable] = val;
		//		} else {
		//			params[this.variable] = val;
		//		}
	} else if (this.expression) {
		if (this.exists) {
			this.existsfn = this.exists.map(function(ex) {
				var nq = ex.compile(databaseid);
				if (nq.query && !nq.query.modifier) nq.query.modifier = 'RECORDSET';
				return nq;
				//				return ex.compile(databaseid);
				// TODO Include modifier
			});
		}
		if (this.queries) {
			this.queriesfn = this.queries.map(function(q) {
				var nq = q.compile(databaseid);
				if (nq.query && !nq.query.modifier) nq.query.modifier = 'RECORDSET';
				return nq;
				// TODO Include modifier
			});
		}

		var res = new Function(
			'params,alasql',
			'return ' + this.expression.toJS('({})', '', null)
		).bind(this)(params, alasql);
		if (alasql.declares[this.variable]) {
			res = alasql.stdfn.CONVERT(res, alasql.declares[this.variable]);
		}
		if (this.props && this.props.length > 0) {
			if (this.method == '@') {
				var fs = "alasql.vars['" + this.variable + "']";
			} else {
				var fs = "params['" + this.variable + "']";
			}
			fs += this.props
				.map(function(prop) {
					if (typeof prop == 'string') {
						return "['" + prop + "']";
					} else if (typeof prop == 'number') {
						return '[' + prop + ']';
					} else {

						return '[' + prop.toJS() + ']';
						//				} else {

						//					throw new Error('Wrong SET property');
					}
				})
				.join();

			new Function('value,params,alasql', 'var y;' + fs + '=value')(res, params, alasql);
		} else {
			if (this.method == '@') {
				alasql.vars[this.variable] = res;
			} else {
				params[this.variable] = res;
			}
		}
	}
	var res = 1;
	if (cb) res = cb(res);
	return res;
};

// Console functions

/* global alasql, yy */

alasql.test = function(name, times, fn) {
	if (arguments.length === 0) {
		alasql.log(alasql.con.results);
		return;
	}

	var tm = Date.now();

	if (arguments.length === 1) {
		fn();
		alasql.con.log(Date.now() - tm);
		return;
	}

	if (arguments.length === 2) {
		fn = times;
		times = 1;
	}

	for (var i = 0; i < times; i++) {
		fn();
	}
	alasql.con.results[name] = Date.now() - tm;
};

// Console
// alasql.log = function(sql, params) {

// };

/* global alasql, yy, utils */

// Console
alasql.log = function(sql, params) {
	var olduseid = alasql.useid;
	var target = alasql.options.logtarget;
	// For node other
	if (utils.isNode) {
		target = 'console';
	}

	var res;
	if (typeof sql === 'string') {
		res = alasql(sql, params);
	} else {
		res = sql;
	}

	// For Node and console.output
	if (target === 'console' || utils.isNode) {
		if (typeof sql === 'string' && alasql.options.logprompt) {
			console.log(olduseid + '>', sql);
		}

		if (Array.isArray(res)) {
			if (console.table) {
				// For Chrome and other consoles
				console.table(res);
			} else {
				// Add print procedure
				console.log(JSONtoString(res));
			}
		} else {
			console.log(JSONtoString(res));
		}
	} else {
		var el;
		if (target === 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if (typeof target === 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}

		var s = '';

		if (typeof sql === 'string' && alasql.options.logprompt) {
			//			s += '<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql)+'</p>';
			s += '<pre><code>' + alasql.pretty(sql) + '</code></pre>';
		}

		if (Array.isArray(res)) {
			if (res.length === 0) {
				s += '<p>[ ]</p>';
			} else if (typeof res[0] !== 'object' || Array.isArray(res[0])) {
				for (var i = 0, ilen = res.length; i < ilen; i++) {
					s += '<p>' + loghtml(res[i]) + '</p>';
				}
			} else {
				s += loghtml(res);
			}
		} else {
			s += loghtml(res);
		}
		el.innerHTML += s;
	}
};

alasql.clear = function() {
	var target = alasql.options.logtarget;
	// For node other

	if (utils.isNode || utils.isMeteorServer) {
		if (console.clear) {
			console.clear();
		}
	} else {
		var el;
		if (target === 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if (typeof target === 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML = '';
	}
};

alasql.write = function(s) {

	var target = alasql.options.logtarget;
	// For node other
	if (utils.isNode || utils.isMeteorServer) {
		if (console.log) {
			console.log(s);
		}
	} else {
		var el;
		if (target === 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if (typeof target === 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML += s;
	}
};

function loghtml(res) {

	var s = '';
	if (res === undefined) {
		s += 'undefined';
	} else if (Array.isArray(res)) {
		s += '<style>';
		s += 'table {border:1px black solid; border-collapse: collapse; border-spacing: 0px;}';
		s += 'td,th {border:1px black solid; padding-left:5px; padding-right:5px}';
		s += 'th {background-color: #EEE}';
		s += '</style>';
		s += '<table>';
		var cols = [];
		for (var colid in res[0]) {
			cols.push(colid);
		}
		s += '<tr><th>#';
		cols.forEach(function(colid) {
			s += '<th>' + colid;
		});
		for (var i = 0, ilen = res.length; i < ilen; i++) {
			s += '<tr><th>' + (i + 1);
			cols.forEach(function(colid) {
				s += '<td> ';
				if (res[i][colid] == +res[i][colid]) {
					// jshint ignore:line
					s += '<div style="text-align:right">';
					if (typeof res[i][colid] === 'undefined') {
						s += 'NULL';
					} else {
						s += res[i][colid];
					}
					s += '</div>';
				} else {
					if (typeof res[i][colid] === 'undefined') {
						s += 'NULL';
					} else if (typeof res[i][colid] === 'string') {
						s += res[i][colid];
					} else {
						s += JSONtoString(res[i][colid]);
					}
					//					s += res[i][colid];
				}
			});
		}

		s += '</table>';
	} else {
		s += '<p>' + JSONtoString(res) + '</p>';
	}
	// if() {}

	// 		if(typeof res == 'object') {
	// 			s += '<p>'+JSON.stringify(res)+'</p>';
	// 		} else {
	// 		}
	return s;
}

function scrollTo(element, to, duration) {
	if (duration <= 0) {
		return;
	}
	var difference = to - element.scrollTop;
	var perTick = (difference / duration) * 10;

	setTimeout(function() {
		if (element.scrollTop === to) {
			return;
		}
		element.scrollTop = element.scrollTop + perTick;
		scrollTo(element, to, duration - 10);
	}, 10);
}

alasql.prompt = function(el, useidel, firstsql) {
	if (utils.isNode) {
		throw new Error('The prompt not realized for Node.js');
	}

	var prompti = 0;

	if (typeof el === 'string') {
		el = document.getElementById(el);
	}

	if (typeof useidel === 'string') {
		useidel = document.getElementById(useidel);
	}

	useidel.textContent = alasql.useid;

	if (firstsql) {
		alasql.prompthistory.push(firstsql);
		prompti = alasql.prompthistory.length;
		try {
			var tm = Date.now();
			alasql.log(firstsql);
			alasql.write('<p style="color:blue">' + (Date.now() - tm) + ' ms</p>');
		} catch (err) {
			alasql.write('<p>' + olduseid + '&gt;&nbsp;<b>' + sql + '</b></p>');
			alasql.write('<p style="color:red">' + err + '<p>');
		}
	}

	var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
	scrollTo(document.getElementsByTagName('body')[0], y, 500);

	el.onkeydown = function(event) {
		if (event.which === 13) {
			var sql = el.value;
			var olduseid = alasql.useid;
			el.value = '';
			alasql.prompthistory.push(sql);
			prompti = alasql.prompthistory.length;
			try {
				var tm = Date.now();
				alasql.log(sql);
				alasql.write('<p style="color:blue">' + (Date.now() - tm) + ' ms</p>');
			} catch (err) {
				alasql.write('<p>' + olduseid + '&gt;&nbsp;' + alasql.pretty(sql, false) + '</p>');
				alasql.write('<p style="color:red">' + err + '<p>');
			}
			el.focus();

			useidel.textContent = alasql.useid;
			var y =
				el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
			scrollTo(document.getElementsByTagName('body')[0], y, 500);
		} else if (event.which === 38) {
			prompti--;
			if (prompti < 0) {
				prompti = 0;
			}
			if (alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}
		} else if (event.which === 40) {
			prompti++;
			if (prompti >= alasql.prompthistory.length) {
				prompti = alasql.prompthistory.length;
				el.value = '';
			} else if (alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}
		}
	};
};

/*
//
// Commit for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/
yy.BeginTransaction = function(params) {
	return yy.extend(this, params);
};
yy.BeginTransaction.prototype.toString = function() {
	return 'BEGIN TRANSACTION';
};

yy.BeginTransaction.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	if (alasql.databases[databaseid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].begin(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if (cb) cb(res);
	return res;
};

yy.CommitTransaction = function(params) {
	return yy.extend(this, params);
};
yy.CommitTransaction.prototype.toString = function() {
	return 'COMMIT TRANSACTION';
};

yy.CommitTransaction.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	if (alasql.databases[databaseid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].commit(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if (cb) cb(res);
	return res;
};

yy.RollbackTransaction = function(params) {
	return yy.extend(this, params);
};
yy.RollbackTransaction.prototype.toString = function() {
	return 'ROLLBACK TRANSACTION';
};

yy.RollbackTransaction.prototype.execute = function(databaseid, params, cb) {
	var res = 1;
	if (alasql.databases[databaseid].engineid) {
		return alasql.engines[alasql.databases[databaseid].engineid].rollback(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if (cb) cb(res);
	return res;
};

if (alasql.options.tsql) {
	//
	// Check tables and views
	// IF OBJECT_ID('dbo.Employees') IS NOT NULL
	//   DROP TABLE dbo.Employees;
	// IF OBJECT_ID('dbo.VSortedOrders', 'V') IS NOT NULL
	//   DROP VIEW dbo.VSortedOrders;

	alasql.stdfn.OBJECT_ID = function(name, type) {
		if (typeof type == 'undefined') type = 'T';
		type = type.toUpperCase();

		var sname = name.split('.');
		var dbid = alasql.useid;
		var objname = sname[0];
		if (sname.length == 2) {
			dbid = sname[0];
			objname = sname[1];
		}

		var tables = alasql.databases[dbid].tables;
		dbid = alasql.databases[dbid].databaseid;
		for (var tableid in tables) {
			if (tableid == objname) {
				// TODO: What OBJECT_ID actually returns

				if (tables[tableid].view && type == 'V') return dbid + '.' + tableid;
				if (!tables[tableid].view && type == 'T') return dbid + '.' + tableid;
				return undefined;
			}
		}

		return undefined;
	};
}

if (alasql.options.mysql) {
}

if (alasql.options.mysql || alasql.options.sqlite) {
	// Pseudo INFORMATION_SCHEMA function
	alasql.from.INFORMATION_SCHEMA = function(filename, opts, cb, idx, query) {
		if (filename == 'VIEWS' || filename == 'TABLES') {
			var res = [];
			for (var databaseid in alasql.databases) {
				var tables = alasql.databases[databaseid].tables;
				for (var tableid in tables) {
					if (
						(tables[tableid].view && filename == 'VIEWS') ||
						(!tables[tableid].view && filename == 'TABLES')
					) {
						res.push({TABLE_CATALOG: databaseid, TABLE_NAME: tableid});
					}
				}
			}
			if (cb) res = cb(res, idx, query);
			return res;
		}
		throw new Error('Unknown INFORMATION_SCHEMA table');
	};
}

if (alasql.options.postgres) {
}

if (alasql.options.oracle) {
}

if (alasql.options.sqlite) {
}

//
// into functions
//
// (c) 2014 Andrey Gershun
//

alasql.into.SQL = function(filename, opts, data, columns, cb) {
	var res;
	if (typeof filename === 'object') {
		opts = filename;
		filename = undefined;
	}
	var opt = {};
	alasql.utils.extend(opt, opts);
	if (typeof opt.tableid === 'undefined') {
		throw new Error('Table for INSERT TO is not defined.');
	}

	var s = '';
	if (columns.length === 0) {
		if (typeof data[0] === 'object') {
			columns = Object.keys(data[0]).map(function(columnid) {
				return {columnid: columnid};
			});
		} else {
			// What should I do?
			// columns = [{columnid:"_"}];
		}
	}

	for (var i = 0, ilen = data.length; i < ilen; i++) {
		s += 'INSERT INTO ' + opts.tableid + '(';
		s += columns
			.map(function(col) {
				return col.columnid;
			})
			.join(',');
		s += ') VALUES (';
		s += columns.map(function(col) {
			var val = data[i][col.columnid];
			if (col.typeid) {
				if (
					col.typeid === 'STRING' ||
					col.typeid === 'VARCHAR' ||
					col.typeid === 'NVARCHAR' ||
					col.typeid === 'CHAR' ||
					col.typeid === 'NCHAR'
				) {
					val = "'" + escapeqq(val) + "'";
				}
			} else {
				if (typeof val == 'string') {
					val = "'" + escapeqq(val) + "'";
				}
			}
			return val;
		});
		s += ');\n';
	}
	//	if(filename === '') {
	//		res = s;
	//	} else {
	//		res = data.length;
	filename = alasql.utils.autoExtFilename(filename, 'sql', opts);
	res = alasql.utils.saveFile(filename, s);
	if (cb) {
		res = cb(res);
	}
	return res;
};

alasql.into.HTML = function(selector, opts, data, columns, cb) {
	var res = 1;
	if (typeof exports !== 'object') {
		var opt = {headers: true};
		alasql.utils.extend(opt, opts);

		var sel = document.querySelector(selector);
		if (!sel) {
			throw new Error('Selected HTML element is not found');
		}

		if (columns.length === 0) {
			if (typeof data[0] === 'object') {
				columns = Object.keys(data[0]).map(function(columnid) {
					return {columnid: columnid};
				});
			} else {
				// What should I do?
				// columns = [{columnid:"_"}];
			}
		}

		var tbe = document.createElement('table');
		var thead = document.createElement('thead');
		tbe.appendChild(thead);
		if (opt.headers) {
			var tre = document.createElement('tr');
			for (var i = 0; i < columns.length; i++) {
				var the = document.createElement('th');
				the.textContent = columns[i].columnid;
				tre.appendChild(the);
			}
			thead.appendChild(tre);
		}

		var tbody = document.createElement('tbody');
		tbe.appendChild(tbody);
		for (var j = 0; j < data.length; j++) {
			var tre = document.createElement('tr');
			for (var i = 0; i < columns.length; i++) {
				var the = document.createElement('td');
				the.textContent = data[j][columns[i].columnid];
				tre.appendChild(the);
			}
			tbody.appendChild(tre);
		}
		alasql.utils.domEmptyChildren(sel);

		sel.appendChild(tbe);
	}
	if (cb) {
		res = cb(res);
	}
	return res;
};

alasql.into.JSON = function(filename, opts, data, columns, cb) {
	var res = 1;
	if (typeof filename === 'object') {
		opts = filename;
		filename = undefined;
	}
	var s = JSON.stringify(data);

	filename = alasql.utils.autoExtFilename(filename, 'json', opts);
	res = alasql.utils.saveFile(filename, s);
	if (cb) {
		res = cb(res);
	}
	return res;
};

alasql.into.TXT = function(filename, opts, data, columns, cb) {
	// If columns is empty
	if (columns.length === 0 && data.length > 0) {
		columns = Object.keys(data[0]).map(function(columnid) {
			return {columnid: columnid};
		});
	}
	// If one parameter
	if (typeof filename === 'object') {
		opts = filename;
		filename = undefined;
	}

	var res = data.length;
	var s = '';
	if (data.length > 0) {
		var key = columns[0].columnid;
		s += data
			.map(function(d) {
				return d[key];
			})
			.join('\n');
	}

	//	 } else {
	//		if(utils.isNode) {
	//			process.stdout.write(s);
	//		} else {

	//		};
	//	 }
	filename = alasql.utils.autoExtFilename(filename, 'txt', opts);
	res = alasql.utils.saveFile(filename, s);
	if (cb) {
		res = cb(res);
	}
	return res;
};

alasql.into.TAB = alasql.into.TSV = function(filename, opts, data, columns, cb) {
	var opt = {};
	alasql.utils.extend(opt, opts);
	opt.separator = '\t';
	filename = alasql.utils.autoExtFilename(filename, 'tab', opts);
	opt.autoExt = false;
	return alasql.into.CSV(filename, opt, data, columns, cb);
};

alasql.into.CSV = function(filename, opts, data, columns, cb) {
	if (columns.length === 0 && data.length > 0) {
		columns = Object.keys(data[0]).map(function(columnid) {
			return {columnid: columnid};
		});
	}
	if (typeof filename === 'object') {
		opts = filename;
		filename = undefined;
	}

	var opt = {headers: true};
	//opt.separator = ',';
	opt.separator = ';';
	opt.quote = '"';

	opt.utf8Bom = true;
	if (opts && !opts.headers && typeof opts.headers !== 'undefined') {
		opt.utf8Bom = false;
	}

	alasql.utils.extend(opt, opts);
	var res = data.length;
	var s = opt.utf8Bom ? '\ufeff' : '';
	if (opt.headers) {
		s +=
			opt.quote +
			columns
				.map(function(col) {
					return col.columnid.trim();
				})
				.join(opt.quote + opt.separator + opt.quote) +
			opt.quote +
			'\r\n';
	}

	data.forEach(function(d) {
		s +=
			columns
				.map(function(col) {
					var s = d[col.columnid];
					// escape the character wherever it appears in the field
					if (opt.quote !== '') {
						s = (s + '').replace(
							new RegExp('\\' + opt.quote, 'g'),
							opt.quote + opt.quote
						);
					}
					//			if((s+"").indexOf(opt.separator) > -1 || (s+"").indexOf(opt.quote) > -1) s = opt.quote + s + opt.quote;

					//Excel 2013 needs quotes around strings - thanks for _not_ complying with RFC for CSV
					if (+s != s) {
						// jshint ignore:line
						s = opt.quote + s + opt.quote;
					}

					return s;
				})
				.join(opt.separator) + '\r\n';
	});

	filename = alasql.utils.autoExtFilename(filename, 'csv', opts);
	res = alasql.utils.saveFile(filename, s, null, {disableAutoBom: true});
	if (cb) {
		res = cb(res);
	}
	return res;
};

//
// 831xl.js - Coloring Excel
// 18.04.2015
// Generate XLS file with colors and styles
// with Excel

alasql.into.XLS = function(filename, opts, data, columns, cb) {
	// If filename is not defined then output to the result
	if (typeof filename == 'object') {
		opts = filename;
		filename = undefined;
	}

	// Set sheets
	var sheets = {};
	if (opts && opts.sheets) {
		sheets = opts.sheets;
	}

	// Default sheet
	var sheet = {headers: true};
	if (typeof sheets['Sheet1'] != 'undefined') {
		sheet = sheets[0];
	} else {
		if (typeof opts != 'undefined') {
			sheet = opts;
		}
	}

	// Set sheet name and default is 'Sheet1'
	if (typeof sheet.sheetid == 'undefined') {
		sheet.sheetid = 'Sheet1';
	}

	var s = toHTML();

	// File is ready to save
	filename = alasql.utils.autoExtFilename(filename, 'xls', opts);
	var res = alasql.utils.saveFile(filename, s);
	if (cb) res = cb(res);
	return res;

	function toHTML() {
		// Generate prologue
		var s =
			'<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" \
		xmlns="http://www.w3.org/TR/REC-html40"><head> \
		<meta charset="utf-8" /> \
		<!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets> ';

		// Worksheets
		s +=
			' <x:ExcelWorksheet><x:Name>' +
			sheet.sheetid +
			'</x:Name><x:WorksheetOptions><x:DisplayGridlines/>     </x:WorksheetOptions> \
		</x:ExcelWorksheet>';

		s += '</x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head>';

		// Generate body
		s += '<body';
		if (typeof sheet.style != 'undefined') {
			s += ' style="';
			if (typeof sheet.style == 'function') {
				s += sheet.style(sheet);
			} else {
				s += sheet.style;
			}
			s += '"';
		}
		s += '>';
		s += '<table>';
		if (typeof sheet.caption != 'undefined') {
			var caption = sheet.caption;
			if (typeof caption == 'string') {
				caption = {title: caption};
			}
			s += '<caption';
			if (typeof caption.style != 'undefined') {
				s += ' style="';
				if (typeof caption.style == 'function') {
					s += caption.style(sheet, caption);
				} else {
					s += caption.style;
				}
				s += '" ';
			}
			s += '>';
			s += caption.title;
			s += '</caption>';
		}

		// Columns

		//		var columns = [];

		// If columns defined in sheet, then take them
		if (typeof sheet.columns != 'undefined') {
			columns = sheet.columns;
		} else {
			// Autogenerate columns if they are passed as parameters
			if (columns.length == 0 && data.length > 0) {
				if (typeof data[0] == 'object') {
					if (Array.isArray(data[0])) {
						columns = data[0].map(function(d, columnidx) {
							return {columnid: columnidx};
						});
					} else {
						columns = Object.keys(data[0]).map(function(columnid) {
							return {columnid: columnid};
						});
					}
				}
			}
		}

		// Prepare columns
		columns.forEach(function(column, columnidx) {
			if (typeof sheet.column != 'undefined') {
				extend(column, sheet.column);
			}

			if (typeof column.width == 'undefined') {
				if (sheet.column && sheet.column.width != 'undefined') {
					column.width = sheet.column.width;
				} else {
					column.width = '120px';
				}
			}
			if (typeof column.width == 'number') column.width = column.width + 'px';
			if (typeof column.columnid == 'undefined') column.columnid = columnidx;
			if (typeof column.title == 'undefined') column.title = '' + column.columnid.trim();
			if (sheet.headers && Array.isArray(sheet.headers))
				column.title = sheet.headers[columnidx];
		});

		// Set columns widths
		s += '<colgroups>';
		columns.forEach(function(column) {
			s += '<col style="width: ' + column.width + '"></col>';
		});
		s += '</colgroups>';

		// Headers
		if (sheet.headers) {
			s += '<thead>';
			s += '<tr>';

			// TODO: Skip columns to body

			// Headers
			columns.forEach(function(column, columnidx) {
				s += '<th ';
				// Column style
				if (typeof column.style != 'undefined') {
					s += ' style="';
					if (typeof column.style == 'function') {
						s += column.style(sheet, column, columnidx);
					} else {
						s += column.style;
					}
					s += '" ';
				}
				s += '>';

				// Column title
				if (typeof column.title != 'undefined') {
					if (typeof column.title == 'function') {
						s += column.title(sheet, column, columnidx);
					} else {
						s += column.title;
					}
				}
				s += '</th>';
			});

			s += '</tr>';
			s += '</thead>';
		}

		s += '<tbody>';

		// TODO: Skip lines between header and body

		if (data && data.length > 0) {
			// TODO: Skip columns to body

			// Loop over data rows
			data.forEach(function(row, rowidx) {
				// Limit number of rows on the sheet
				if (rowidx > sheet.limit) return;
				// Create row
				s += '<tr';

				var srow = {};
				extend(srow, sheet.row);
				if (sheet.rows && sheet.rows[rowidx]) {
					extend(srow, sheet.rows[rowidx]);
				}
				// Row style fromdefault sheet
				if (typeof srow != 'undefined') {
					if (typeof srow.style != 'undefined') {
						s += ' style="';
						if (typeof srow.style == 'function') {
							s += srow.style(sheet, row, rowidx);
						} else {
							s += srow.style;
						}
						s += '" ';
					}
				}
				s += '>';
				// Loop over columns
				columns.forEach(function(column, columnidx) {
					// Parameters
					var cell = {};
					extend(cell, sheet.cell);
					extend(cell, srow.cell);
					if (typeof sheet.column != 'undefined') {
						extend(cell, sheet.column.cell);
					}
					extend(cell, column.cell);
					if (sheet.cells && sheet.cells[rowidx] && sheet.cells[rowidx][columnidx]) {
						extend(cell, sheet.cells[rowidx][columnidx]);
					}

					// Create value
					var value = row[column.columnid];
					if (typeof cell.value == 'function') {
						value = cell.value(value, sheet, row, column, cell, rowidx, columnidx);
					}

					// Define cell type
					var typeid = cell.typeid;
					if (typeof typeid == 'function') {
						typeid = typeid(value, sheet, row, column, cell, rowidx, columnidx);
					}

					if (typeof typeid == 'undefined') {
						if (typeof value == 'number') typeid = 'number';
						else if (typeof value == 'string') typeid = 'string';
						else if (typeof value == 'boolean') typeid = 'boolean';
						else if (typeof value == 'object') {
							if (value instanceof Date) typeid = 'date';
						}
					}

					var typestyle = '';

					if (typeid == 'money') {
						typestyle =
							'mso-number-format:"\\#\\,\\#\\#0\\\\ _р_\\.";white-space:normal;';
					} else if (typeid == 'number') {
						typestyle = ' ';
					} else if (typeid == 'date') {
						typestyle = 'mso-number-format:"Short Date";';
					} else {
						// FOr other types is saved
						if (opts.types && opts.types[typeid] && opts.types[typeid].typestyle) {
							typestyle = opts.types[typeid].typestyle;
						}
					}

					// TODO Replace with extend...
					typestyle = typestyle || 'mso-number-format:"\\@";'; // Default type style

					s += "<td style='" + typestyle + "' ";
					if (typeof cell.style != 'undefined') {
						s += ' style="';
						if (typeof cell.style == 'function') {
							s += cell.style(value, sheet, row, column, rowidx, columnidx);
						} else {
							s += cell.style;
						}
						s += '" ';
					}
					s += '>';

					// TODO Replace with extend...
					var format = cell.format;
					if (typeof value == 'undefined') {
						s += '';
					} else if (typeof format != 'undefined') {
						if (typeof format == 'function') {
							s += format(value);
						} else if (typeof format == 'string') {
							s += value; // TODO - add string format
						} else {
							throw new Error('Unknown format type. Should be function or string');
						}
					} else {
						if (typeid == 'number' || typeid == 'date') {
							s += value.toString();
						} else if (typeid == 'money') {
							s += (+value).toFixed(2);
						} else {
							s += value;
						}
					}
					s += '</td>';
				});

				s += '</tr>';
			});
		}

		s += '</tbody>';

		// Generate epilogue
		s += '</table>';
		s += '</body>';
		s += '</html>';

		return s;
	}

	// Style function
	function style(a) {
		var s = ' style="';
		if (a && typeof a.style != 'undefined') {
			s += a.style + ';';
		}
		s += '" ';
		return s;
	}
};

alasql.into.XLSXML = function(filename, opts, data, columns, cb) {
	opts = opts || {};

	// If filename is not defined then output to the result
	if (typeof filename == 'object') {
		opts = filename;
		filename = undefined;
	}

	// Set sheets
	var sheets = {};
	var sheetsdata;
	var sheetscolumns;
	if (opts && opts.sheets) {
		sheets = opts.sheets;
		// data and columns are already an array for the sheets
		sheetsdata = data;
		sheetscolumns = columns;
	} else {
		sheets.Sheet1 = opts;
		// wrapd ata and columns array for single sheet
		sheetsdata = [data];
		sheetscolumns = [columns];
	}

	// File is ready to save
	filename = alasql.utils.autoExtFilename(filename, 'xls', opts);
	var res = alasql.utils.saveFile(filename, toXML());
	if (cb) res = cb(res);
	return res;

	function toXML() {
		var s1 =
			'<?xml version="1.0"?> \
		<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" \
		 xmlns:o="urn:schemas-microsoft-com:office:office" \
		 xmlns:x="urn:schemas-microsoft-com:office:excel" \
		 xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" \
		 xmlns:html="http://www.w3.org/TR/REC-html40"> \
		 <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office"> \
		 </DocumentProperties> \
		 <OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office"> \
		  <AllowPNG/> \
		 </OfficeDocumentSettings> \
		 <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel"> \
		  <ActiveSheet>0</ActiveSheet> \
		 </ExcelWorkbook> \
		 <Styles> \
		  <Style ss:ID="Default" ss:Name="Normal"> \
		   <Alignment ss:Vertical="Bottom"/> \
		   <Borders/> \
		   <Font ss:FontName="Calibri" x:Family="Swiss" ss:Size="12" ss:Color="#000000"/> \
		   <Interior/> \
		   <NumberFormat/> \
		   <Protection/> \
		  </Style>';

		var s2 = ''; // for styles

		var s3 = ' </Styles>';

		var styles = {}; // hash based storage for styles
		var stylesn = 62; // First style

		// Generate style
		function hstyle(st) {
			// Prepare string
			var s = '';
			for (var key in st) {
				s += '<' + key;
				for (var attr in st[key]) {
					s += ' ';
					if (attr.substr(0, 2) == 'x:') {
						s += attr;
					} else {
						s += 'ss:';
					}
					s += attr + '="' + st[key][attr] + '"';
				}
				s += '/>';
			}

			var hh = hash(s);
			// Store in hash
			if (styles[hh]) {
			} else {
				styles[hh] = {styleid: stylesn};
				s2 += '<Style ss:ID="s' + stylesn + '">';
				s2 += s;
				s2 += '</Style>';
				stylesn++;
			}
			return 's' + styles[hh].styleid;
		}

		function values(obj) {
			try {
				return Object.values(obj);
			} catch (e) {
				// support for older runtimes
				return Object.keys(obj).map(function(e) {
					return obj[e];
				});
			}
		}

		var sheetidx = 0;
		for (var sheetid in sheets) {
			var sheet = sheets[sheetid];
			var idx = typeof sheet.dataidx != 'undefined' ? sheet.dataidx : sheetidx++;
			var data = values(sheetsdata[idx]);
			// If columns defined in sheet, then take them
			var columns = undefined;
			if (typeof sheet.columns != 'undefined') {
				columns = sheet.columns;
			} else {
				// Autogenerate columns if they are passed as parameters
				columns = sheetscolumns[idx];
				if (columns === undefined || (columns.length == 0 && data.length > 0)) {
					if (typeof data[0] == 'object') {
						if (Array.isArray(data[0])) {
							columns = data[0].map(function(d, columnidx) {
								return {columnid: columnidx};
							});
						} else {
							columns = Object.keys(data[0]).map(function(columnid) {
								return {columnid: columnid};
							});
						}
					}
				}
			}

			// Prepare columns
			columns.forEach(function(column, columnidx) {
				if (typeof sheet.column != 'undefined') {
					extend(column, sheet.column);
				}

				if (typeof column.width == 'undefined') {
					if (sheet.column && typeof sheet.column.width != 'undefined') {
						column.width = sheet.column.width;
					} else {
						column.width = 120;
					}
				}
				if (typeof column.width == 'number') column.width = column.width;
				if (typeof column.columnid == 'undefined') column.columnid = columnidx;
				if (typeof column.title == 'undefined') column.title = '' + column.columnid.trim();
				if (sheet.headers && Array.isArray(sheet.headers))
					column.title = sheet.headers[columnidx];
			});

			// Header
			s3 +=
				'<Worksheet ss:Name="' +
				sheetid +
				'"> \
	  			<Table ss:ExpandedColumnCount="' +
				columns.length +
				'" ss:ExpandedRowCount="' +
				((sheet.headers ? 1 : 0) + Math.min(data.length, sheet.limit || data.length)) +
				'" x:FullColumns="1" \
	   			x:FullRows="1" ss:DefaultColumnWidth="65" ss:DefaultRowHeight="15">';

			columns.forEach(function(column, columnidx) {
				s3 +=
					'<Column ss:Index="' +
					(columnidx + 1) +
					'" ss:AutoFitWidth="0" ss:Width="' +
					column.width +
					'"/>';
			});

			// Headers
			if (sheet.headers) {
				s3 += '<Row ss:AutoFitHeight="0">';

				// TODO: Skip columns to body

				// Headers
				columns.forEach(function(column, columnidx) {
					s3 += '<Cell ';

					if (typeof column.style != 'undefined') {
						var st = {};
						if (typeof column.style == 'function') {
							extend(st, column.style(sheet, column, columnidx));
						} else {
							extend(st, column.style);
						}
						s3 += 'ss:StyleID="' + hstyle(st) + '"';
					}

					s3 += '><Data ss:Type="String">';

					// Column title
					if (typeof column.title != 'undefined') {
						if (typeof column.title == 'function') {
							s3 += column.title(sheet, column, columnidx);
						} else {
							s3 += column.title;
						}
					}
					s3 += '</Data></Cell>';
				});

				s3 += '</Row>';
			}

			// Data
			if (data && data.length > 0) {
				// Loop over data rows
				data.forEach(function(row, rowidx) {
					// Limit number of rows on the sheet
					if (rowidx > sheet.limit) return;

					// Extend row properties
					var srow = {};
					extend(srow, sheet.row);
					if (sheet.rows && sheet.rows[rowidx]) {
						extend(srow, sheet.rows[rowidx]);
					}

					s3 += '<Row ';

					// Row style fromdefault sheet
					if (typeof srow != 'undefined') {
						var st = {};
						if (typeof srow.style != 'undefined') {
							if (typeof srow.style == 'function') {
								extend(st, srow.style(sheet, row, rowidx));
							} else {
								extend(st, srow.style);
							}
							s3 += 'ss:StyleID="' + hstyle(st) + '"';
						}
					}

					s3 += '>'; //'ss:AutoFitHeight="0">'

					// Data
					columns.forEach(function(column, columnidx) {
						// Parameters
						var cell = {};
						extend(cell, sheet.cell);
						extend(cell, srow.cell);
						if (typeof sheet.column != 'undefined') {
							extend(cell, sheet.column.cell);
						}
						extend(cell, column.cell);
						if (sheet.cells && sheet.cells[rowidx] && sheet.cells[rowidx][columnidx]) {
							extend(cell, sheet.cells[rowidx][columnidx]);
						}

						// Create value
						var value = row[column.columnid];
						if (typeof cell.value == 'function') {
							value = cell.value(value, sheet, row, column, cell, rowidx, columnidx);
						}

						// Define cell type
						var typeid = cell.typeid;
						if (typeof typeid == 'function') {
							typeid = typeid(value, sheet, row, column, cell, rowidx, columnidx);
						}

						if (typeof typeid == 'undefined') {
							if (typeof value == 'number') typeid = 'number';
							else if (typeof value == 'string') typeid = 'string';
							else if (typeof value == 'boolean') typeid = 'boolean';
							else if (typeof value == 'object') {
								if (value instanceof Date) typeid = 'date';
							}
						}

						var Type = 'String';
						if (typeid == 'number') Type = 'Number';
						else if (typeid == 'date') Type = 'Date';
						// TODO: What else?

						// Prepare Data types styles
						var typestyle = '';

						if (typeid == 'money') {
							typestyle =
								'mso-number-format:"\\#\\,\\#\\#0\\\\ _р_\\.";white-space:normal;';
						} else if (typeid == 'number') {
							typestyle = ' ';
						} else if (typeid == 'date') {
							typestyle = 'mso-number-format:"Short Date";';
						} else {
							// For other types is saved
							if (opts.types && opts.types[typeid] && opts.types[typeid].typestyle) {
								typestyle = opts.types[typeid].typestyle;
							}
						}

						// TODO Replace with extend...
						typestyle = typestyle || 'mso-number-format:"\\@";'; // Default type style

						s3 += '<Cell ';

						// Row style fromdefault sheet
						var st = {};
						if (typeof cell.style != 'undefined') {
							if (typeof cell.style == 'function') {
								extend(
									st,
									cell.style(value, sheet, row, column, rowidx, columnidx)
								);
							} else {
								extend(st, cell.style);
							}
							s3 += 'ss:StyleID="' + hstyle(st) + '"';
						}

						s3 += '>';

						s3 += '<Data ss:Type="' + Type + '">';

						// TODO Replace with extend...
						var format = cell.format;
						if (typeof value == 'undefined') {
							s3 += '';
						} else if (typeof format != 'undefined') {
							if (typeof format == 'function') {
								s3 += format(value);
							} else if (typeof format == 'string') {
								s3 += value; // TODO - add string format
							} else {
								throw new Error(
									'Unknown format type. Should be function or string'
								);
							}
						} else {
							if (typeid == 'number' || typeid == 'date') {
								s3 += value.toString();
							} else if (typeid == 'money') {
								s3 += (+value).toFixed(2);
							} else {
								s3 += value;
							}
						}

						//			    		s3 += row[column.columnid];
						s3 += '</Data></Cell>';
					});

					s3 += '</Row>';
				});
			}
			// Finish
			s3 += '</Table></Worksheet>';
		}

		s3 += '</Workbook>';

		return s1 + s2 + s3;
	}
};

/**
	Export to XLSX function
	@function
	@param {string|object} filename Filename or options
	@param {object|undefined} opts Options or undefined
	@param {array} data Data
	@param {array} columns Columns
	@parab {callback} cb Callback function
	@return {number} Number of files processed
*/

alasql.into.XLSX = function(filename, opts, data, columns, cb) {
	/** @type {number} result */
	var res = 1;

	if (deepEqual(columns, [{columnid: '_'}])) {
		data = data.map(function(dat) {
			return dat._;
		});
		columns = undefined;
		//		res = [{_:1}];
	} else {
		//		data = data1;
	}

	filename = alasql.utils.autoExtFilename(filename, 'xlsx', opts);

	var XLSX = getXLSX();

	/* If called without filename, use opts */
	if (typeof filename == 'object') {
		opts = filename;
		filename = undefined;
	}

	/** @type {object} Workbook */
	var wb = {SheetNames: [], Sheets: {}};

	// ToDo: check if cb must be treated differently here
	if (opts.sourcefilename) {
		alasql.utils.loadBinaryFile(opts.sourcefilename, !!cb, function(data) {
			wb = XLSX.read(data, {type: 'binary'});
			doExport();
		});
	} else {
		doExport();
	}

	/* Return result */
	if (cb) res = cb(res);
	return res;

	/**
		Export workbook
		@function
	*/
	function doExport() {
		/*
			If opts is array of arrays then this is a
			multisheet workboook, else it is a singlesheet
		*/
		if (typeof opts == 'object' && Array.isArray(opts)) {
			if (data && data.length > 0) {
				data.forEach(function(dat, idx) {
					prepareSheet(opts[idx], dat, undefined, idx + 1);
				});
			}
		} else {
			prepareSheet(opts, data, columns, 1);
		}

		saveWorkbook(cb);
	}

	/**
		Prepare sheet
		@params {object} opts
		@params {array|object} data
		@params {array} columns Columns
	*/
	function prepareSheet(opts, data, columns, idx) {
		/** Default options for sheet */
		var opt = {sheetid: 'Sheet ' + idx, headers: true};
		alasql.utils.extend(opt, opts);

		var dataLength = Object.keys(data).length;

		// Generate columns if they are not defined
		if ((!columns || columns.length == 0) && dataLength > 0) {
			columns = Object.keys(data[0]).map(function(columnid) {
				return {columnid: columnid};
			});
		}

		var cells = {};

		if (wb.SheetNames.indexOf(opt.sheetid) > -1) {
			cells = wb.Sheets[opt.sheetid];
		} else {
			wb.SheetNames.push(opt.sheetid);
			wb.Sheets[opt.sheetid] = {};
			cells = wb.Sheets[opt.sheetid];
		}

		var range = 'A1';
		if (opt.range) range = opt.range;

		var col0 = alasql.utils.xlscn(range.match(/[A-Z]+/)[0]);
		var row0 = +range.match(/[0-9]+/)[0] - 1;

		if (wb.Sheets[opt.sheetid]['!ref']) {
			var rangem = wb.Sheets[opt.sheetid]['!ref'];
			var colm = alasql.utils.xlscn(rangem.match(/[A-Z]+/)[0]);
			var rowm = +rangem.match(/[0-9]+/)[0] - 1;
		} else {
			var colm = 1,
				rowm = 1;
		}
		var colmax = Math.max(col0 + columns.length, colm);
		var rowmax = Math.max(row0 + dataLength + 2, rowm);

		var i = row0 + 1;

		wb.Sheets[opt.sheetid]['!ref'] = 'A1:' + alasql.utils.xlsnc(colmax) + rowmax;
		//		var i = 1;

		if (opt.headers) {
			columns.forEach(function(col, idx) {
				cells[alasql.utils.xlsnc(col0 + idx) + '' + i] = {v: col.columnid.trim()};
			});
			i++;
		}

		for (var j = 0; j < dataLength; j++) {
			columns.forEach(function(col, idx) {
				var cell = {v: data[j][col.columnid]};
				if (typeof data[j][col.columnid] == 'number') {
					cell.t = 'n';
				} else if (typeof data[j][col.columnid] == 'string') {
					cell.t = 's';
				} else if (typeof data[j][col.columnid] == 'boolean') {
					cell.t = 'b';
				} else if (typeof data[j][col.columnid] == 'object') {
					if (data[j][col.columnid] instanceof Date) {
						cell.t = 'd';
					}
				}
				cells[alasql.utils.xlsnc(col0 + idx) + '' + i] = cell;
			});
			i++;
		}
	}

	/**
		Save Workbook
		@params {array} wb Workbook
		@params {callback} cb Callback
	*/
	function saveWorkbook(cb) {

		var XLSX;

		if (typeof filename == 'undefined') {
			res = wb;
		} else {
			XLSX = getXLSX();

			if (utils.isNode || utils.isMeteorServer) {
				XLSX.writeFile(wb, filename);
			} else {
				var wopts = {bookType: 'xlsx', bookSST: false, type: 'binary'};
				var wbout = XLSX.write(wb, wopts);

				var s2ab = function(s) {
					var buf = new ArrayBuffer(s.length);
					var view = new Uint8Array(buf);
					for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;
					return buf;
				};

				/* the saveAs call downloads a file on the local machine */
				//				saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), '"'+filename+'"')
				//				saveAs(new Blob([s2ab(wbout)],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}), filename)
				//				saveAs(new Blob([s2ab(wbout)],{type:"application/vnd.ms-excel"}), '"'+filename+'"');
				if (isIE() == 9) {
					throw new Error(
						'Cannot save XLSX files in IE9. Please use XLS() export function'
					);
					//					var URI = 'data:text/plain;charset=utf-8,';

					/** @todo Check if this code is required */

					//					alert('ie9');
				} else {
					saveAs(new Blob([s2ab(wbout)], {type: 'application/octet-stream'}), filename);
				}
			}
		}

	}
};

/*
//
// FROM functions Alasql.js
// Date: 11.12.2014
// (c) 2014, Andrey Gershun
//
*/

/**
 Meteor
 */

/* global alasql Tabletop document Event */

alasql.from.METEOR = function(filename, opts, cb, idx, query) {
	var res = filename.find(opts).fetch();
	if (cb) {
		res = cb(res, idx, query);
	}
	return res;
};

/**
 Google Spreadsheet reader
 */
alasql.from.TABLETOP = function(key, opts, cb, idx, query) {
	var res = [];

	var opt = {headers: true, simpleSheet: true, key: key};
	alasql.utils.extend(opt, opts);
	opt.callback = function(data) {
		res = data;
		if (cb) {
			res = cb(res, idx, query);
		}
	};

	Tabletop.init(opt);
	return null;
};

alasql.from.HTML = function(selector, opts, cb, idx, query) {
	var opt = {};
	alasql.utils.extend(opt, opts);

	var sel = document.querySelector(selector);
	if (!sel && sel.tagName !== 'TABLE') {
		throw new Error('Selected HTML element is not a TABLE');
	}

	var res = [];
	var headers = opt.headers;

	if (headers && !Array.isArray(headers)) {
		headers = [];
		var ths = sel.querySelector('thead tr').children;
		for (var i = 0; i < ths.length; i++) {
			if (
				!(ths.item(i).style && ths.item(i).style.display === 'none' && opt.skipdisplaynone)
			) {
				headers.push(ths.item(i).textContent);
			} else {
				headers.push(undefined);
			}
		}
	}

	var trs = sel.querySelectorAll('tbody tr');

	for (var j = 0; j < trs.length; j++) {
		var tds = trs.item(j).children;
		var r = {};
		for (i = 0; i < tds.length; i++) {
			if (
				!(tds.item(i).style && tds.item(i).style.display === 'none' && opt.skipdisplaynone)
			) {
				if (headers) {
					r[headers[i]] = tds.item(i).textContent;
				} else {
					r[i] = tds.item(i).textContent;

				}
			}
		}
		res.push(r);
	}

	if (cb) {
		res = cb(res, idx, query);
	}
	return res;
};

alasql.from.RANGE = function(start, finish, cb, idx, query) {
	var res = [];
	for (var i = start; i <= finish; i++) {
		res.push(i);
	}
	//	res = new alasql.Recordset({data:res,columns:{columnid:'_'}});
	if (cb) {
		res = cb(res, idx, query);
	}
	return res;
};

// Read data from any file
alasql.from.FILE = function(filename, opts, cb, idx, query) {
	var fname;
	if (typeof filename === 'string') {
		fname = filename;
	} else if (filename instanceof Event) {
		fname = filename.target.files[0].name;
	} else {
		throw new Error('Wrong usage of FILE() function');
	}

	var parts = fname.split('.');

	var ext = parts[parts.length - 1].toUpperCase();

	if (alasql.from[ext]) {

		return alasql.from[ext](filename, opts, cb, idx, query);
	} else {
		throw new Error('Cannot recognize file type for loading');
	}
};

// Read JSON file

alasql.from.JSON = function(filename, opts, cb, idx, query) {
	var res;

	filename = alasql.utils.autoExtFilename(filename, 'json', opts);
	alasql.utils.loadFile(filename, !!cb, function(data) {

		//		res = [{a:1}];
		res = JSON.parse(data);
		if (cb) {
			res = cb(res, idx, query);
		}
	});
	return res;
};

alasql.from.TXT = function(filename, opts, cb, idx, query) {
	var res;
	filename = alasql.utils.autoExtFilename(filename, 'txt', opts);
	alasql.utils.loadFile(filename, !!cb, function(data) {
		res = data.split(/\r?\n/);

		// Remove last line if empty
		if (res[res.length - 1] === '') {
			res.pop();
		}
		for (var i = 0, ilen = res.length; i < ilen; i++) {
			// Please avoid '===' here
			if (res[i] == +res[i]) {
				// eslint:ignore
				// jshint ignore:line
				res[i] = +res[i];
			}
			res[i] = [res[i]];
		}
		if (cb) {
			res = cb(res, idx, query);
		}
	});
	return res;
};

alasql.from.TAB = alasql.from.TSV = function(filename, opts, cb, idx, query) {
	opts = opts || {};
	opts.separator = '\t';
	filename = alasql.utils.autoExtFilename(filename, 'tab', opts);
	opts.autoext = false;
	return alasql.from.CSV(filename, opts, cb, idx, query);
};

alasql.from.CSV = function(contents, opts, cb, idx, query) {
	var opt = {
		separator: ',',
		quote: '"',
		headers: true,
	};
	alasql.utils.extend(opt, opts);
	var res;
	var hs = [];
	function parseText(text) {
		var delimiterCode = opt.separator.charCodeAt(0);
		var quoteCode = opt.quote.charCodeAt(0);

		var EOL = {},
			EOF = {},
			rows = [],
			N = text.length,
			I = 0,
			n = 0,
			t,
			eol;
		function token() {
			if (I >= N) {
				return EOF;
			}
			if (eol) {
				return (eol = false), EOL;
			}
			var j = I;
			if (text.charCodeAt(j) === quoteCode) {
				var i = j;
				while (i++ < N) {
					if (text.charCodeAt(i) === quoteCode) {
						if (text.charCodeAt(i + 1) !== quoteCode) {
							break;
						}
						++i;
					}
				}
				I = i + 2;
				var c = text.charCodeAt(i + 1);
				if (c === 13) {
					eol = true;
					if (text.charCodeAt(i + 2) === 10) {
						++I;
					}
				} else if (c === 10) {
					eol = true;
				}
				return text.substring(j + 1, i).replace(/""/g, '"');
			}
			while (I < N) {
				var c = text.charCodeAt(I++),
					k = 1;
				if (c === 10) {
					eol = true;
				} else if (c === 13) {
					eol = true;
					if (text.charCodeAt(I) === 10) {
						++I;
						++k;
					}
				} else if (c !== delimiterCode) {
					continue;
				}
				return text.substring(j, I - k);
			}
			return text.substring(j);
		}

		while ((t = token()) !== EOF) {
			var a = [];
			while (t !== EOL && t !== EOF) {
				a.push(t.trim());
				t = token();
			}

			if (opt.headers) {
				if (n === 0) {
					if (typeof opt.headers === 'boolean') {
						hs = a;
					} else if (Array.isArray(opt.headers)) {
						hs = opt.headers;
						var r = {};
						hs.forEach(function(h, idx) {
							r[h] = a[idx];
							// Please avoid === here
							if (
								typeof r[h] !== 'undefined' &&
								r[h].length !== 0 &&
								r[h].trim() == +r[h]
							) {
								// jshint ignore:line
								r[h] = +r[h];
							}
						});
						rows.push(r);
					}
				} else {
					var r = {};
					hs.forEach(function(h, idx) {
						r[h] = a[idx];
						if (
							typeof r[h] !== 'undefined' &&
							r[h].length !== 0 &&
							r[h].trim() == +r[h]
						) {
							// jshint ignore:line
							r[h] = +r[h];
						}
					});
					rows.push(r);
				}
				n++;
			} else {
				rows.push(a);
			}
		}

		res = rows;

		if (opt.headers) {
			if (query && query.sources && query.sources[idx]) {
				var columns = (query.sources[idx].columns = []);
				hs.forEach(function(h) {
					columns.push({columnid: h});
				});
			}
		}

		if (cb) {
			res = cb(res, idx, query);
		}
	}
	if (new RegExp('\n').test(contents)) {
		parseText(contents);
	} else {
		contents = alasql.utils.autoExtFilename(contents, 'csv', opts);
		alasql.utils.loadFile(contents, !!cb, parseText, query.cb);
	}
	return res;
};

function XLSXLSX(X, filename, opts, cb, idx, query) {
	var opt = {};
	opts = opts || {};
	alasql.utils.extend(opt, opts);
	if (typeof opt.headers === 'undefined') {
		opt.headers = true;
	}
	var res;

	/**
	 * see https://github.com/SheetJS/js-xlsx/blob/5ae6b1965bfe3764656a96f536b356cd1586fec7/README.md
	 * for example of using readAsArrayBuffer under `Parsing Workbooks`
	 */
	function fixdata(data) {
		var o = '',
			l = 0,
			w = 10240;
		for (; l < data.byteLength / w; ++l)
			o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
		o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
		return o;
	}
	function getHeaderText(text) {
		// if casesensitive option is set to false and there is a text value return lowercase value of text
		if (text && alasql.options.casesensitive === false) {
			return text.toLowerCase();
		} else {
			return text;
		}
	}
	filename = alasql.utils.autoExtFilename(filename, 'xls', opts);
	alasql.utils.loadBinaryFile(
		filename,
		!!cb,
		function(data) {
			//	function processData(data) {
			if (data instanceof ArrayBuffer) {
				var arr = fixdata(data);
				var workbook = X.read(btoa(arr), {type: 'base64'});
			} else {
				var workbook = X.read(data, {type: 'binary'});
			}

			var sheetid;
			if (typeof opt.sheetid === 'undefined') {
				sheetid = workbook.SheetNames[0];
			} else if (typeof opt.sheetid === 'number') {
				sheetid = workbook.SheetNames[opt.sheetid];
			} else {
				sheetid = opt.sheetid;
			}
			var range;
			var res = [];
			if (typeof opt.range === 'undefined') {
				range = workbook.Sheets[sheetid]['!ref'];
			} else {
				range = opt.range;
				if (workbook.Sheets[sheetid][range]) {
					range = workbook.Sheets[sheetid][range];
				}
			}
			// if range has some value then data is present in the current sheet
			// else current sheet is empty
			if (range) {
				var rg = range.split(':');
				var col0 = rg[0].match(/[A-Z]+/)[0];
				var row0 = +rg[0].match(/[0-9]+/)[0];
				var col1 = rg[1].match(/[A-Z]+/)[0];
				var row1 = +rg[1].match(/[0-9]+/)[0];

				var hh = {};
				var xlscnCol0 = alasql.utils.xlscn(col0);
				var xlscnCol1 = alasql.utils.xlscn(col1);
				for (var j = xlscnCol0; j <= xlscnCol1; j++) {
					var col = alasql.utils.xlsnc(j);
					if (opt.headers) {
						if (workbook.Sheets[sheetid][col + '' + row0]) {
							hh[col] = getHeaderText(workbook.Sheets[sheetid][col + '' + row0].v);
						} else {
							hh[col] = getHeaderText(col);
						}
					} else {
						hh[col] = col;
					}
				}
				if (opt.headers) {
					row0++;
				}
				for (var i = row0; i <= row1; i++) {
					var row = {};
					for (var j = xlscnCol0; j <= xlscnCol1; j++) {
						var col = alasql.utils.xlsnc(j);
						if (workbook.Sheets[sheetid][col + '' + i]) {
							row[hh[col]] = workbook.Sheets[sheetid][col + '' + i].v;
						}
					}
					res.push(row);
				}
			} else {
				res.push([]);
			}

			// Remove last empty line (issue #548)
			if (
				res.length > 0 &&
				res[res.length - 1] &&
				Object.keys(res[res.length - 1]).length == 0
			) {
				res.pop();
			}

			if (cb) {
				res = cb(res, idx, query);
			}
		},
		function(err) {
			throw err;
		}
	);

	return res;
}

alasql.from.XLS = function(filename, opts, cb, idx, query) {
	opts = opts || {};
	filename = alasql.utils.autoExtFilename(filename, 'xls', opts);
	opts.autoExt = false;
	return XLSXLSX(getXLSX(), filename, opts, cb, idx, query);
};

alasql.from.XLSX = function(filename, opts, cb, idx, query) {
	opts = opts || {};
	filename = alasql.utils.autoExtFilename(filename, 'xlsx', opts);
	opts.autoExt = false;
	return XLSXLSX(getXLSX(), filename, opts, cb, idx, query);
};

alasql.from.ODS = function(filename, opts, cb, idx, query) {
	opts = opts || {};
	filename = alasql.utils.autoExtFilename(filename, 'ods', opts);
	opts.autoExt = false;
	return XLSXLSX(getXLSX(), filename, opts, cb, idx, query);
};

alasql.from.XML = function(filename, opts, cb, idx, query) {
	var res;

	alasql.utils.loadFile(filename, !!cb, function(data) {

		//    res = [{a:1}];

		res = xmlparse(data).root;

		if (cb) res = cb(res, idx, query);
	});
	return res;
};

/**
 * Parse the given string of `xml`.
 *
 * @param {String} xml
 * @return {Object}
 * @api public
 */

function xmlparse(xml) {
	xml = xml.trim();

	// strip comments
	xml = xml.replace(/<!--[\s\S]*?-->/g, '');

	return document();

	/**
	 * XML document.
	 */

	function document() {
		return {
			declaration: declaration(),
			root: tag(),
		};
	}

	/**
	 * Declaration.
	 */

	function declaration() {
		var m = match(/^<\?xml\s*/);
		if (!m) return;

		// tag
		var node = {
			attributes: {},
		};

		// attributes
		while (!(eos() || is('?>'))) {
			var attr = attribute();
			if (!attr) return node;
			node.attributes[attr.name] = attr.value;
		}

		match(/\?>\s*/);

		return node;
	}

	/**
	 * Tag.
	 */

	function tag() {
		var m = match(/^<([\w-:.]+)\s*/);
		if (!m) return;

		// name
		var node = {
			name: m[1],
			attributes: {},
			children: [],
		};

		// attributes
		while (!(eos() || is('>') || is('?>') || is('/>'))) {
			var attr = attribute();
			if (!attr) return node;
			node.attributes[attr.name] = attr.value;
		}

		// self closing tag
		if (match(/^\s*\/>\s*/)) {
			return node;
		}

		match(/\??>\s*/);

		// content
		node.content = content();

		// children
		var child;
		while ((child = tag())) {
			node.children.push(child);
		}

		// closing
		match(/^<\/[\w-:.]+>\s*/);

		return node;
	}

	/**
	 * Text content.
	 */

	function content() {
		var m = match(/^([^<]*)/);
		if (m) return m[1];
		return '';
	}

	/**
	 * Attribute.
	 */

	function attribute() {
		var m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);
		if (!m) return;
		return {name: m[1], value: strip(m[2])};
	}

	/**
	 * Strip quotes from `val`.
	 */

	function strip(val) {
		return val.replace(/^['"]|['"]$/g, '');
	}

	/**
	 * Match `re` and advance the string.
	 */

	function match(re) {
		var m = xml.match(re);
		if (!m) return;
		xml = xml.slice(m[0].length);
		return m;
	}

	/**
	 * End-of-source.
	 */

	function eos() {
		return 0 == xml.length;
	}

	/**
	 * Check for `prefix`.
	 */

	function is(prefix) {
		return 0 == xml.indexOf(prefix);
	}
}

alasql.from.GEXF = function(filename, opts, cb, idx, query) {
	var res;
	alasql('SEARCH FROM XML(' + filename + ')', [], function(data) {
		res = data;

		if (cb) res = cb(res);
	});
	return res;
};

/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* globals: alasql, yy */

/**
	Print statement 
	@class
	@param {object} params Initial setup properties
*/

/* global alasql, yy */

yy.Print = function(params) {
	return yy.extend(this, params);
};

/** 
	Generate SQL string 
	@this Print statement object
*/
yy.Print.prototype.toString = function() {
	var s = 'PRINT';
	if (this.statement) s += ' ' + this.statement.toString();
	return s;
};

/**
 	Print result of select statement or expression
 	@param {string} databaseid Database identificator
 	@param {object} params Query parameters
 	@param {statement-callback} cb Callback function 
	@this Print statement object
*/
yy.Print.prototype.execute = function(databaseid, params, cb) {

	var self = this;
	var res = 1;

	alasql.precompile(this, databaseid, params); /** @todo Change from alasql to this */

	if (this.exprs && this.exprs.length > 0) {
		var rs = this.exprs.map(function(expr) {

			var exprfn = new Function(
				'params,alasql,p',
				'var y;return ' + expr.toJS('({})', '', null)
			).bind(self);
			var r = exprfn(params, alasql);
			return JSONtoString(r);
		});
		console.log.apply(console, rs);
	} else if (this.select) {
		var r = this.select.execute(databaseid, params);
		console.log(JSONtoString(r));
	} else {
		console.log();
	}

	if (cb) res = cb(res);
	return res;
};

/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Source = function(params) {
	return yy.extend(this, params);
};
yy.Source.prototype.toString = function() {
	var s = 'SOURCE';
	if (this.url) s += " '" + this.url + " '";
	return s;
};

// SOURCE FILE
yy.Source.prototype.execute = function(databaseid, params, cb) {

	var res;
	loadFile(
		this.url,
		!!cb,
		function(data) {

			//		res = 1;
			res = alasql(data);
			if (cb) res = cb(res);
			return res;
		},
		function(err) {
			throw err;
		}
	);
	return res;
};

/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/* global alasql, yy */

yy.Require = function(params) {
	return yy.extend(this, params);
};
yy.Require.prototype.toString = function() {
	var s = 'REQUIRE';
	if (this.paths && this.paths.length > 0) {
		s += this.paths
			.map(function(path) {
				return path.toString();
			})
			.join(',');
	}
	if (this.plugins && this.plugins.length > 0) {
		s += this.plugins
			.map(function(plugin) {
				return plugin.toUpperCase();
			})
			.join(',');
	}
	return s;
};

/**
 Attach plug-in for Alasql
 */
yy.Require.prototype.execute = function(databaseid, params, cb) {
	var self = this;
	var res = 0;
	var ss = '';

	if (this.paths && this.paths.length > 0) {
		this.paths.forEach(function(path) {
			loadFile(path.value, !!cb, function(data) {
				res++;

				ss += data;
				if (res < self.paths.length) return;

				new Function('params,alasql', ss)(params, alasql);
				if (cb) res = cb(res);
			});
		});
	} else if (this.plugins && this.plugins.length > 0) {
		this.plugins.forEach(function(plugin) {
			// If plugin is not loaded already
			if (!alasql.plugins[plugin]) {
				loadFile(alasql.path + '/alasql-' + plugin.toLowerCase() + '.js', !!cb, function(
					data
				) {
					// Execute all plugins at the same time
					res++;
					ss += data;
					if (res < self.plugins.length) return;

					new Function('params,alasql', ss)(params, alasql);
					alasql.plugins[plugin] = true; // Plugin is loaded
					if (cb) res = cb(res);
				});
			}
		});
	} else {
		if (cb) res = cb(res);
	}
	return res;
};

/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Assert = function(params) {
	return yy.extend(this, params);
};
yy.Source.prototype.toString = function() {
	var s = 'ASSERT';
	if (this.value) s += ' ' + JSON.stringify(this.value);
	return s;
};

// SOURCE FILE
yy.Assert.prototype.execute = function(databaseid) {

	if (!deepEqual(alasql.res, this.value)) {
		//		if(this.message) {
		//			throw this.
		//		} else {
		throw new Error(
			(this.message || 'Assert wrong') +
				': ' +
				JSON.stringify(alasql.res) +
				' == ' +
				JSON.stringify(this.value)
		);
		//		}
	}
	return 1;
};

//
// 91websql.js
// WebSQL database support
// (c) 2014, Andrey Gershun
//

var WEBSQL = (alasql.engines.WEBSQL = function() {});

WEBSQL.createDatabase = function(wdbid, args, dbid, cb) {
	var res = 1;
	var wdb = openDatabase(wdbid, args[0], args[1], args[2]);
	if (this.dbid) {
		var db = alasql.createDatabase(this.dbid);
		db.engineid = 'WEBSQL';
		db.wdbid = wdbid;
		sb.wdb = db;
	}
	if (!wdb) {
		throw new Error('Cannot create WebSQL database "' + databaseid + '"');
	}
	if (cb) cb(res);
	return res;
};

WEBSQL.dropDatabase = function(databaseid) {
	throw new Error('This is impossible to drop WebSQL database.');
};

WEBSQL.attachDatabase = function(databaseid, dbid, args, params, cb) {
	var res = 1;
	if (alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "' + dbid + '" because it already exists');
	}
	alasqlopenDatabase(databaseid, args[0], args[1], args[2]);
	return res;
};

//
// 91indexeddb.js
// AlaSQL IndexedDB module
// Date: 18.04.2015
// (c) Andrey Gershun
//

/* global alasql, yy, utils*/

var IDB = (alasql.engines.INDEXEDDB = function() {
	'';
});

if (utils.hasIndexedDB) {
	// For Chrome it work normally, for Firefox - simple shim
	if (typeof utils.global.indexedDB.webkitGetDatabaseNames == 'function') {
		IDB.getDatabaseNames = utils.global.indexedDB.webkitGetDatabaseNames.bind(
			utils.global.indexedDB
		);
	} else {
		IDB.getDatabaseNames = function() {
			var request = {};
			var result = {
				contains: function(name) {
					return true; // Always return true
				},
				notsupported: true,
			};
			setTimeout(function() {
				var event = {target: {result: result}};
				request.onsuccess(event);
			}, 0);
			return request;
		};
		IDB.getDatabaseNamesNotSupported = true;
	}
}

//
// SHOW DATABASES
// work only in chrome
//
IDB.showDatabases = function(like, cb) {

	var request = IDB.getDatabaseNames();
	request.onsuccess = function(event) {
		var dblist = event.target.result;
		if (IDB.getDatabaseNamesNotSupported) {
			throw new Error('SHOW DATABASE is not supported in this browser');
		}
		var res = [];
		if (like) {
			var relike = new RegExp(like.value.replace(/\%/g, '.*'), 'g');
		}
		for (var i = 0; i < dblist.length; i++) {
			if (!like || dblist[i].match(relike)) {
				res.push({databaseid: dblist[i]});
			}
		}
		cb(res);
	};
};

IDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb) {

	var indexedDB = utils.global.indexedDB;
	if (ifnotexists) {
		var request2 = indexedDB.open(ixdbid, 1);
		request2.onsuccess = function(event) {
			event.target.result.close();
			if (cb) cb(1);
		};
	} else {
		var request1 = indexedDB.open(ixdbid, 1);
		request1.onupgradeneeded = function(e) {

			e.target.transaction.abort();
		};
		request1.onsuccess = function(e) {

			if (ifnotexists) {
				if (cb) cb(0);
			} else {
				throw new Error(
					'IndexedDB: Cannot create new database "' +
						ixdbid +
						'" because it already exists'
				);
			}
		};
	}

};

IDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb) {
	var indexedDB = utils.global.indexedDB;
	if (IDB.getDatabaseNamesNotSupported) {
		// Hack for Firefox
		if (ifnotexists) {

			var dbExists = true;
			var request2 = indexedDB.open(ixdbid);

			request2.onupgradeneeded = function(e) {

				dbExists = false;
				//			    e.target.transaction.abort();
				//			    cb(0);
			};
			request2.onsuccess = function(event) {

				event.target.result.close();
				if (dbExists) {
					if (cb) cb(0);
				} else {
					if (cb) cb(1);
				}
			};
		} else {

			var request1 = indexedDB.open(ixdbid);
			request1.onupgradeneeded = function(e) {
				e.target.transaction.abort();
			};
			request1.onabort = function(event) {
				if (cb) cb(1);
			};
			request1.onsuccess = function(event) {
				event.target.result.close();
				throw new Error(
					'IndexedDB: Cannot create new database "' +
						ixdbid +
						'" because it already exists'
				);
				//				cb(0);
			};
		}
	} else {
		var request1 = IDB.getDatabaseNames();
		request1.onsuccess = function(event) {
			var dblist = event.target.result;
			if (dblist.contains(ixdbid)) {
				if (ifnotexists) {
					if (cb) cb(0);
					return;
				} else {
					throw new Error(
						'IndexedDB: Cannot create new database "' +
							ixdbid +
							'" because it already exists'
					);
				}
			}

			var request2 = indexedDB.open(ixdbid, 1);
			request2.onsuccess = function(event) {
				event.target.result.close();
				if (cb) cb(1);
			};
		};
	}
};

IDB.dropDatabase = function(ixdbid, ifexists, cb) {
	var indexedDB = utils.global.indexedDB;
	var request1 = IDB.getDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if (!dblist.contains(ixdbid)) {
			if (ifexists) {
				if (cb) cb(0);
				return;
			} else {
				throw new Error(
					'IndexedDB: Cannot drop new database "' + ixdbid + '" because it does not exist'
				);
			}
		}
		var request2 = indexedDB.deleteDatabase(ixdbid);
		request2.onsuccess = function(event) {

			if (cb) cb(1);
		};
	};
};

IDB.attachDatabase = function(ixdbid, dbid, args, params, cb) {
	if (!utils.hasIndexedDB) {
		throw new Error('The current browser does not support IndexedDB');
	}
	var indexedDB = utils.global.indexedDB;
	var request1 = IDB.getDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if (!dblist.contains(ixdbid)) {
			throw new Error(
				'IndexedDB: Cannot attach database "' + ixdbid + '" because it does not exist'
			);
		}
		var request2 = indexedDB.open(ixdbid);
		request2.onsuccess = function(event) {
			var ixdb = event.target.result;
			var db = new alasql.Database(dbid || ixdbid);
			db.engineid = 'INDEXEDDB';
			db.ixdbid = ixdbid;
			db.tables = [];
			var tblist = ixdb.objectStoreNames;
			for (var i = 0; i < tblist.length; i++) {
				db.tables[tblist[i]] = {};
			}

			event.target.result.close();
			if (cb) cb(1);
		};
	};
};

IDB.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var indexedDB = utils.global.indexedDB;

	var ixdbid = alasql.databases[databaseid].ixdbid;

	var request1 = IDB.getDatabaseNames();
	request1.onsuccess = function(event__) {
		var dblist = event__.target.result;
		if (!dblist.contains(ixdbid)) {
			throw new Error(
				'IndexedDB: Cannot create table in database "' +
					ixdbid +
					'" because it does not exist'
			);
		}
		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event_) {

			event_.target.result.close();
		};
		request2.onsuccess = function(event_) {
			var version = event_.target.result.version;
			event_.target.result.close();

			var request3 = indexedDB.open(ixdbid, version + 1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;

				var store = ixdb.createObjectStore(tableid, {autoIncrement: true});

			};
			request3.onsuccess = function(event) {

				event.target.result.close();
				if (cb) cb(1);
			};
			request3.onerror = function(event) {
				throw event;

			};
			request3.onblocked = function(event) {
				throw new Error(
					'Cannot create table "' +
						tableid +
						'" because database "' +
						databaseid +
						'"  is blocked'
				);

			};
		};
	};
};

IDB.dropTable = function(databaseid, tableid, ifexists, cb) {
	var indexedDB = utils.global.indexedDB;
	var ixdbid = alasql.databases[databaseid].ixdbid;

	var request1 = IDB.getDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;

		if (!dblist.contains(ixdbid)) {
			throw new Error(
				'IndexedDB: Cannot drop table in database "' +
					ixdbid +
					'" because it does not exist'
			);
		}

		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event) {
			event.target.result.close();
		};

		request2.onsuccess = function(event) {
			var version = event.target.result.version;
			event.target.result.close();

			var request3 = indexedDB.open(ixdbid, version + 1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;
				if (ixdb.objectStoreNames.contains(tableid)) {
					ixdb.deleteObjectStore(tableid);
					delete alasql.databases[databaseid].tables[tableid];
				} else {
					if (!ifexists) {
						throw new Error(
							'IndexedDB: Cannot drop table "' +
								tableid +
								'" because it does not exist'
						);
					}
				}
				//				var store = ixdb.createObjectStore(tableid);

			};
			request3.onsuccess = function(event) {

				event.target.result.close();
				if (cb) cb(1);
			};
			request3.onerror = function(event) {

				throw event;
			};
			request3.onblocked = function(event) {
				throw new Error(
					'Cannot drop table "' +
						tableid +
						'" because database "' +
						databaseid +
						'" is blocked'
				);

			};
		};
	};
};

IDB.intoTable = function(databaseid, tableid, value, columns, cb) {

	// console.trace();

	var indexedDB = utils.global.indexedDB;
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request1 = indexedDB.open(ixdbid);
	request1.onsuccess = function(event) {
		var ixdb = event.target.result;
		var tx = ixdb.transaction([tableid], 'readwrite');
		var tb = tx.objectStore(tableid);

		for (var i = 0, ilen = value.length; i < ilen; i++) {
			tb.add(value[i]);
		}
		tx.oncomplete = function() {
			ixdb.close();

			if (cb) cb(ilen);
		};
	};

};

IDB.fromTable = function(databaseid, tableid, cb, idx, query) {

	// console.trace();
	var indexedDB = utils.global.indexedDB;
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
		var res = [];
		var ixdb = event.target.result;

		var tx = ixdb.transaction([tableid]);
		var store = tx.objectStore(tableid);
		var cur = store.openCursor();

		cur.onblocked = function(event) {

		};
		cur.onerror = function(event) {

		};
		cur.onsuccess = function(event) {

			var cursor = event.target.result;

			if (cursor) {
				res.push(cursor.value);
				cursor.continue();
			} else {

				ixdb.close();
				if (cb) cb(res, idx, query);
			}
		};
	};
};

IDB.deleteFromTable = function(databaseid, tableid, wherefn, params, cb) {

	// console.trace();
	var indexedDB = utils.global.indexedDB;
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
		var res = [];
		var ixdb = event.target.result;

		var tx = ixdb.transaction([tableid], 'readwrite');
		var store = tx.objectStore(tableid);
		var cur = store.openCursor();
		var num = 0;

		cur.onblocked = function(event) {

		};
		cur.onerror = function(event) {

		};
		cur.onsuccess = function(event) {

			var cursor = event.target.result;

			if (cursor) {
				if (!wherefn || wherefn(cursor.value, params)) {

					cursor.delete();
					num++;
				}
				cursor.continue();
			} else {

				ixdb.close();
				if (cb) cb(num);
			}
		};
	};
};

IDB.updateTable = function(databaseid, tableid, assignfn, wherefn, params, cb) {

	// console.trace();
	var indexedDB = utils.global.indexedDB;
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
		var res = [];
		var ixdb = event.target.result;

		var tx = ixdb.transaction([tableid], 'readwrite');
		var store = tx.objectStore(tableid);
		var cur = store.openCursor();
		var num = 0;

		cur.onblocked = function(event) {

		};
		cur.onerror = function(event) {

		};
		cur.onsuccess = function(event) {

			var cursor = event.target.result;

			if (cursor) {
				if (!wherefn || wherefn(cursor.value, params)) {

					var r = cursor.value;
					assignfn(r, params);

					cursor.update(r);
					num++;
				}
				cursor.continue();
			} else {

				ixdb.close();
				if (cb) cb(num);
			}
		};
	};
};

//
// 91localstorage.js
// localStorage and DOM-Storage engine
// Date: 09.12.2014
// (c) Andrey Gershun
//

/* global alasql, yy, localStorage*/

var LS = (alasql.engines.LOCALSTORAGE = function() {});

/**
	Read data from localStorage with security breaks
	@param key {string} Address in localStorage
	@return {object} JSON object
*/
LS.get = function(key) {
	var s = localStorage.getItem(key);
	if (typeof s === 'undefined') return;
	var v;
	try {
		v = JSON.parse(s);
	} catch (err) {
		throw new Error('Cannot parse JSON object from localStorage' + s);
	}
	return v;
};

/**
	Store data into localStorage with security breaks
	@param key {string} Address in localStorage
	@return {object} JSON object
*/
LS.set = function(key, value) {
	if (typeof value === 'undefined') localStorage.removeItem(key);
	else localStorage.setItem(key, JSON.stringify(value));
};

/**
	Store table structure and data into localStorage
	@param databaseid {string} AlaSQL database id (not external localStorage)
	@param tableid {string} Table name
	@return Nothing
*/
LS.storeTable = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	var table = db.tables[tableid];
	// Create empty structure for table
	var tbl = {};
	tbl.columns = table.columns;
	tbl.data = table.data;
	tbl.identities = table.identities;
	// TODO: May be add indexes, objects and other fields?
	LS.set(db.lsdbid + '.' + tableid, tbl);
};

/**
	Restore table structure and data
	@param databaseid {string} AlaSQL database id (not external localStorage)
	@param tableid {string} Table name
	@return Nothing
*/
LS.restoreTable = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	var tbl = LS.get(db.lsdbid + '.' + tableid);
	var table = new alasql.Table();
	for (var f in tbl) {
		table[f] = tbl[f];
	}
	db.tables[tableid] = table;
	table.indexColumns();
	// We need to add other things here
	return table;
};

/**
	Remove table from localStorage
	@param databaseid {string} AlaSQL database id (not external localStorage)
	@param tableid {string} Table name
*/

LS.removeTable = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	localStorage.removeItem(db.lsdbid + '.' + tableid);
};

/**
	Create database in localStorage
	@param lsdbid {string} localStorage database id
	@param args {array} List of parameters (not used in localStorage)
	@param ifnotexists {boolean} Check if database does not exist
	@param databaseid {string} AlaSQL database id (not external localStorage)
	@param cb {function} Callback
*/

LS.createDatabase = function(lsdbid, args, ifnotexists, databaseid, cb) {
	var res = 1;
	var ls = LS.get('alasql'); // Read list of all databases
	if (!(ifnotexists && ls && ls.databases && ls.databases[lsdbid])) {
		if (!ls) ls = {databases: {}}; // Empty record
		if (ls.databases && ls.databases[lsdbid]) {
			throw new Error(
				'localStorage: Cannot create new database "' +
					lsdbid +
					'" because it already exists'
			);
		}
		ls.databases[lsdbid] = true;
		LS.set('alasql', ls);
		LS.set(lsdbid, {databaseid: lsdbid, tables: {}}); // Create database record
	} else {
		res = 0;
	}
	if (cb) res = cb(res);
	return res;
};

/**
	Drop external database
	@param lsdbid {string} localStorage database id
	@param ifexists {boolean} Check if database exists
	@param cb {function} Callback
*/
LS.dropDatabase = function(lsdbid, ifexists, cb) {
	var res = 1;
	var ls = LS.get('alasql');
	if (!(ifexists && ls && ls.databases && !ls.databases[lsdbid])) {
		// 1. Remove record from 'alasql' record
		if (!ls) {
			if (!ifexists) {
				throw new Error('There is no any AlaSQL databases in localStorage');
			} else {
				return cb ? cb(0) : 0;
			}
		}

		if (ls.databases && !ls.databases[lsdbid]) {
			throw new Error(
				'localStorage: Cannot drop database "' +
					lsdbid +
					'" because there is no such database'
			);
		}
		delete ls.databases[lsdbid];
		LS.set('alasql', ls);

		// 2. Remove tables definitions
		var db = LS.get(lsdbid);
		for (var tableid in db.tables) {
			localStorage.removeItem(lsdbid + '.' + tableid);
		}

		// 3. Remove database definition
		localStorage.removeItem(lsdbid);
	} else {
		res = 0;
	}
	if (cb) res = cb(res);
	return res;
};

/**
	Attach existing localStorage database to AlaSQL database
	@param lsdibid {string} localStorage database id
	@param
*/

LS.attachDatabase = function(lsdbid, databaseid, args, params, cb) {
	var res = 1;
	if (alasql.databases[databaseid]) {
		throw new Error(
			'Unable to attach database as "' + databaseid + '" because it already exists'
		);
	}
	if (!databaseid) databaseid = lsdbid;
	var db = new alasql.Database(databaseid);
	db.engineid = 'LOCALSTORAGE';
	db.lsdbid = lsdbid;
	db.tables = LS.get(lsdbid).tables;
	// IF AUTOABORT IS OFF then copy data to memory
	if (!alasql.options.autocommit) {
		if (db.tables) {
			for (var tbid in db.tables) {
				LS.restoreTable(databaseid, tbid);
				//				db.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
			}
		}
	}
	if (cb) res = cb(res);
	return res;
};

/**
	Show list of databases from localStorage
	@param like {string} Mathing pattern
	@param cb {function} Callback
*/
LS.showDatabases = function(like, cb) {
	var res = [];
	var ls = LS.get('alasql');
	if (like) {
		// TODO: If we have a special function for LIKE patterns?
		var relike = new RegExp(like.value.replace(/%/g, '.*'), 'g');
	}
	if (ls && ls.databases) {
		for (var dbid in ls.databases) {
			res.push({databaseid: dbid});
		}
		if (like && res && res.length > 0) {
			res = res.filter(function(d) {
				return d.databaseid.match(relike);
			});
		}
	}
	if (cb) res = cb(res);
	return res;
};

/**
	Create table in localStorage database
	@param databaseid {string} AlaSQL database id
	@param tableid {string} Table id
	@param ifnotexists {boolean} If not exists flag
	@param cb {function} Callback
*/

LS.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var res = 1;
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var tb = LS.get(lsdbid + '.' + tableid);
	// Check if such record exists
	if (tb && !ifnotexists) {
		throw new Error(
			'Table "' + tableid + '" alsready exists in localStorage database "' + lsdbid + '"'
		);
	}
	var lsdb = LS.get(lsdbid);
	var table = alasql.databases[databaseid].tables[tableid];

	// TODO: Check if required
	lsdb.tables[tableid] = true;

	LS.set(lsdbid, lsdb);
	LS.storeTable(databaseid, tableid);

	if (cb) res = cb(res);
	return res;
};

/**
   Empty table and reset identities
   @param databaseid {string} AlaSQL database id (not external localStorage)
   @param tableid {string} Table name
   @param ifexists {boolean} If exists flag
   @param cb {function} Callback
   @return 1 on success
*/
LS.truncateTable = function(databaseid, tableid, ifexists, cb) {
	var res = 1;
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb;
	if (alasql.options.autocommit) {
		lsdb = LS.get(lsdbid);
	} else {
		lsdb = alasql.databases[databaseid];
	}

	if (!ifexists && !lsdb.tables[tableid]) {
		throw new Error(
			'Cannot truncate table "' + tableid + '" in localStorage, because it does not exist'
		);
	}

	//load table
	var tbl = LS.restoreTable(databaseid, tableid);

	//clear data from table
	tbl.data = [];
	//TODO reset all identities
	//but identities are not working on LOCALSTORAGE
	//See test 607 for details

	//store table
	LS.storeTable(databaseid, tableid);

	if (cb) res = cb(res);
	return res;
};

/**
	Create table in localStorage database
	@param databaseid {string} AlaSQL database id
	@param tableid {string} Table id
	@param ifexists {boolean} If exists flag
	@param cb {function} Callback
*/

LS.dropTable = function(databaseid, tableid, ifexists, cb) {
	var res = 1;
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb;

	if (alasql.options.autocommit) {
		lsdb = LS.get(lsdbid);
	} else {
		lsdb = alasql.databases[databaseid];
	}
	if (!ifexists && !lsdb.tables[tableid]) {
		throw new Error(
			'Cannot drop table "' + tableid + '" in localStorage, because it does not exist'
		);
	}
	delete lsdb.tables[tableid];
	LS.set(lsdbid, lsdb);
	//	localStorage.removeItem(lsdbid+'.'+tableid);
	LS.removeTable(databaseid, tableid);
	if (cb) res = cb(res);
	return res;
};

/**
	Read all data from table
*/

LS.fromTable = function(databaseid, tableid, cb, idx, query) {

	var lsdbid = alasql.databases[databaseid].lsdbid;
	//	var res = LS.get(lsdbid+'.'+tableid);

	var res = LS.restoreTable(databaseid, tableid).data;

	if (cb) res = cb(res, idx, query);
	return res;
};

/**
	Insert data into the table
	@param databaseid {string} Database id
	@param tableid {string} Table id
	@param value {array} Array of values
	@param columns {array} Columns (not used)
	@param cb {function} Callback
*/

LS.intoTable = function(databaseid, tableid, value, columns, cb) {

	var lsdbid = alasql.databases[databaseid].lsdbid;
	var res = value.length;
	//	var tb = LS.get(lsdbid+'.'+tableid);
	var tb = LS.restoreTable(databaseid, tableid);
	for (var columnid in tb.identities) {
		var ident = tb.identities[columnid];

		for (var index in value) {
			value[index][columnid] = ident.value;
			ident.value += ident.step;
		}
	}
	if (!tb.data) tb.data = [];
	tb.data = tb.data.concat(value);
	//	LS.set(lsdbid+'.'+tableid, tb);
	LS.storeTable(databaseid, tableid);

	if (cb) res = cb(res);

	return res;
};

/**
	Laad data from table
*/
LS.loadTableData = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	LS.restoreTable(databaseid, tableid);
	//	db.tables[tableid].data = LS.get(lsdbid+'.'+tableid);
};

/**
	Save data to the table
*/

LS.saveTableData = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	LS.storeTable(lsdbid, tableid);
	//	LS.set(lsdbid+'.'+tableid,db.tables[tableid].data);
	db.tables[tableid].data = undefined;
};

/**
	Commit
*/

LS.commit = function(databaseid, cb) {

	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb = {databaseid: lsdbid, tables: {}};
	if (db.tables) {
		for (var tbid in db.tables) {
			// TODO: Question - do we need this line
			lsdb.tables[tbid] = true;
			LS.storeTable(databaseid, tbid);
			//			LS.set(lsdbid+'.'+tbid, db.tables[tbid].data);
		}
	}
	LS.set(lsdbid, lsdb);
	return cb ? cb(1) : 1;
};

/**
	Alias BEGIN = COMMIT
*/
LS.begin = LS.commit;

/**
	ROLLBACK
*/

LS.rollback = function(databaseid, cb) {
	// This does not work and should be fixed
	// Plus test 151 and 231

	return;

	var db = alasql.databases[databaseid];
	db.dbversion++;

	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb = LS.get(lsdbid);
	//	if(!alasql.options.autocommit) {

	delete alasql.databases[databaseid];
	alasql.databases[databaseid] = new alasql.Database(databaseid);
	extend(alasql.databases[databaseid], lsdb);
	alasql.databases[databaseid].databaseid = databaseid;
	alasql.databases[databaseid].engineid = 'LOCALSTORAGE';

	if (lsdb.tables) {
		for (var tbid in lsdb.tables) {
			//				var tb = new alasql.Table({columns: db.tables[tbid].columns});
			//				extend(tb,lsdb.tables[tbid]);
			//				lsdb.tables[tbid] = true;

			//				if(!alasql.options.autocommit) {

			//					lsdb.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
			LS.restoreTable(databaseid, tbid);
			//				}
			//				lsdb.tables[tbid].indexColumns();

			// index columns
			// convert types
		}
	}
	//	}

};

//
// 91websql.js
// WebSQL database support
// (c) 2014, Andrey Gershun
//

var SQLITE = (alasql.engines.SQLITE = function() {});

SQLITE.createDatabase = function(wdbid, args, ifnotexists, dbid, cb) {
	throw new Error('Connot create SQLITE database in memory. Attach it.');
};

SQLITE.dropDatabase = function(databaseid) {
	throw new Error('This is impossible to drop SQLite database. Detach it.');
};

SQLITE.attachDatabase = function(sqldbid, dbid, args, params, cb) {
	var res = 1;
	if (alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "' + dbid + '" because it already exists');
	}

	if ((args[0] && args[0] instanceof yy.StringValue) || args[0] instanceof yy.ParamValue) {
		if (args[0] instanceof yy.StringValue) {
			var value = args[0].value;
		} else if (args[0] instanceof yy.ParamValue) {
			var value = params[args[0].param];
		}
		alasql.utils.loadBinaryFile(
			value,
			true,
			function(data) {
				var db = new alasql.Database(dbid || sqldbid);
				db.engineid = 'SQLITE';
				db.sqldbid = sqldbid;
				var sqldb = (db.sqldb = new SQL.Database(data));
				db.tables = [];
				var tables = sqldb.exec("SELECT * FROM sqlite_master WHERE type='table'")[0].values;

				tables.forEach(function(tbl) {
					db.tables[tbl[1]] = {};
					var columns = (db.tables[tbl[1]].columns = []);
					var ast = alasql.parse(tbl[4]);

					var coldefs = ast.statements[0].columns;
					if (coldefs && coldefs.length > 0) {
						coldefs.forEach(function(cd) {
							columns.push(cd);
						});
					}
				});

				cb(1);
			},
			function(err) {
				throw new Error('Cannot open SQLite database file "' + args[0].value + '"');
			}
		);
		return res;
	} else {
		throw new Error('Cannot attach SQLite database without a file');
	}

	return res;
};

SQLITE.fromTable = function(databaseid, tableid, cb, idx, query) {
	var data = alasql.databases[databaseid].sqldb.exec('SELECT * FROM ' + tableid);
	var columns = (query.sources[idx].columns = []);
	if (data[0].columns.length > 0) {
		data[0].columns.forEach(function(columnid) {
			columns.push({columnid: columnid});
		});
	}

	var res = [];
	if (data[0].values.length > 0) {
		data[0].values.forEach(function(d) {
			var r = {};
			columns.forEach(function(col, idx) {
				r[col.columnid] = d[idx];
			});
			res.push(r);
		});
	}
	if (cb) cb(res, idx, query);
};

SQLITE.intoTable = function(databaseid, tableid, value, columns, cb) {
	var sqldb = alasql.databases[databaseid].sqldb;
	for (var i = 0, ilen = value.length; i < ilen; i++) {
		var s = 'INSERT INTO ' + tableid + ' (';
		var d = value[i];
		var keys = Object.keys(d);
		s += keys.join(',');
		s += ') VALUES (';
		s += keys
			.map(function(k) {
				v = d[k];
				if (typeof v == 'string') v = "'" + v + "'";
				return v;
			})
			.join(',');
		s += ')';
		sqldb.exec(s);
	}
	var res = ilen;
	if (cb) cb(res);
	return res;
};

//
// 91localstorage.js
// localStorage and DOM-Storage engine
// Date: 09.12.2014
// (c) Andrey Gershun
//

var FS = (alasql.engines.FILESTORAGE = alasql.engines.FILE = function() {});

FS.createDatabase = function(fsdbid, args, ifnotexists, dbid, cb) {

	var res = 1;
	var filename = args[0].value;

	alasql.utils.fileExists(filename, function(fex) {

		if (fex) {
			if (ifnotexists) {
				res = 0;
				if (cb) res = cb(res);
				return res;
			} else {
				throw new Error('Cannot create new database file, because it already exists');
			}
		} else {
			var data = {tables: {}};
			alasql.utils.saveFile(filename, JSON.stringify(data), function(data) {
				if (cb) res = cb(res);
			});
		}
	});
	return res;
};

FS.dropDatabase = function(fsdbid, ifexists, cb) {
	var res;
	var filename = fsdbid.value;

	alasql.utils.fileExists(filename, function(fex) {
		if (fex) {
			res = 1;
			alasql.utils.deleteFile(filename, function() {
				res = 1;
				if (cb) res = cb(res);
			});
		} else {
			if (!ifexists) {
				throw new Error('Cannot drop database file, because it does not exist');
			}
			res = 0;
			if (cb) res = cb(res);
		}
	});
	return res;
};

FS.attachDatabase = function(fsdbid, dbid, args, params, cb) {

	var res = 1;
	if (alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "' + dbid + '" because it already exists');
	}
	var db = new alasql.Database(dbid || fsdbid);
	db.engineid = 'FILESTORAGE';
	//	db.fsdbid = fsdbid;
	db.filename = args[0].value;
	loadFile(db.filename, !!cb, function(s) {
		try {
			db.data = JSON.parse(s);
		} catch (err) {
			throw new Error('Data in FileStorage database are corrupted');
		}
		db.tables = db.data.tables;
		// IF AUTOCOMMIT IS OFF then copy data to memory
		if (!alasql.options.autocommit) {
			if (db.tables) {
				for (var tbid in db.tables) {
					db.tables[tbid].data = db.data[tbid];
				}
			}
		}
		if (cb) res = cb(res);
	});
	return res;
};

FS.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var db = alasql.databases[databaseid];
	var tb = db.data[tableid];
	var res = 1;

	if (tb && !ifnotexists) {
		throw new Error('Table "' + tableid + '" alsready exists in the database "' + fsdbid + '"');
	}
	var table = alasql.databases[databaseid].tables[tableid];
	db.data.tables[tableid] = {columns: table.columns};
	db.data[tableid] = [];

	FS.updateFile(databaseid);

	if (cb) cb(res);
	return res;
};

FS.updateFile = function(databaseid) {

	var db = alasql.databases[databaseid];
	if (db.issaving) {
		db.postsave = true;
		return;
	}
	db.issaving = true;
	db.postsave = false;
	alasql.utils.saveFile(db.filename, JSON.stringify(db.data), function() {
		db.issaving = false;

		if (db.postsave) {
			setTimeout(function() {
				FS.updateFile(databaseid);
			}, 50); // TODO Test with different timeout parameters
		}
	});
};

FS.dropTable = function(databaseid, tableid, ifexists, cb) {
	var res = 1;
	var db = alasql.databases[databaseid];
	if (!ifexists && !db.tables[tableid]) {
		throw new Error(
			'Cannot drop table "' + tableid + '" in fileStorage, because it does not exist'
		);
	}
	delete db.tables[tableid];
	delete db.data.tables[tableid];
	delete db.data[tableid];
	FS.updateFile(databaseid);
	if (cb) cb(res);
	return res;
};

FS.fromTable = function(databaseid, tableid, cb, idx, query) {

	var db = alasql.databases[databaseid];
	var res = db.data[tableid];
	if (cb) res = cb(res, idx, query);
	return res;
};

FS.intoTable = function(databaseid, tableid, value, columns, cb) {
	var db = alasql.databases[databaseid];
	var res = value.length;
	var tb = db.data[tableid];
	if (!tb) tb = [];
	db.data[tableid] = tb.concat(value);
	FS.updateFile(databaseid);
	if (cb) cb(res);
	return res;
};

FS.loadTableData = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	db.tables[tableid].data = db.data[tableid];
};

FS.saveTableData = function(databaseid, tableid) {
	var db = alasql.databases[databaseid];
	db.data[tableid] = db.tables[tableid].data;
	db.tables[tableid].data = null;
	FS.updateFile(databaseid);
};

FS.commit = function(databaseid, cb) {

	var db = alasql.databases[databaseid];
	var fsdb = {tables: {}};
	if (db.tables) {
		for (var tbid in db.tables) {
			db.data.tables[tbid] = {columns: db.tables[tbid].columns};
			db.data[tbid] = db.tables[tbid].data;
		}
	}
	FS.updateFile(databaseid);
	return cb ? cb(1) : 1;
};

FS.begin = FS.commit;

FS.rollback = function(databaseid, cb) {
	var res = 1;
	var db = alasql.databases[databaseid];
	db.dbversion++;

	//	var lsdbid = alasql.databases[databaseid].lsdbid;
	//	lsdb = LS.get(lsdbid);
	wait();
	function wait() {
		setTimeout(function() {
			if (db.issaving) {
				return wait();
			} else {
				alasql.loadFile(db.filename, !!cb, function(data) {
					db.data = data;
					db.tables = {};
					for (var tbid in db.data.tables) {
						var tb = new alasql.Table({columns: db.data.tables[tbid].columns});
						extend(tb, db.data.tables[tbid]);
						db.tables[tbid] = tb;
						if (!alasql.options.autocommit) {
							db.tables[tbid].data = db.data[tbid];
						}
						db.tables[tbid].indexColumns();

						// index columns
						// convert types
					}

					delete alasql.databases[databaseid];
					alasql.databases[databaseid] = new alasql.Database(databaseid);
					extend(alasql.databases[databaseid], db);
					alasql.databases[databaseid].engineid = 'FILESTORAGE';
					alasql.databases[databaseid].filename = db.filename;

					if (cb) res = cb(res);
					// Todo: check why no return
				});
			}
		}, 100);
	}

	//	 if(!alasql.options.autocommit) {

};

if(utils.isBrowser && !utils.isWebWorker) {

alasql = alasql || false;

if (!alasql) {
	throw new Error('alasql was not found');
}

alasql.worker = function() {
	throw new Error('Can find webworker in this enviroment');
};

if (typeof Worker !== 'undefined') {
	alasql.worker = function(path, paths, cb) {
		//	var path;
		if (path === true) {
			path = undefined;
		}

		if (typeof path === 'undefined') {
			var sc = document.getElementsByTagName('script');
			for (var i = 0; i < sc.length; i++) {
				if (sc[i].src.substr(-16).toLowerCase() === 'alasql-worker.js') {
					path = sc[i].src.substr(0, sc[i].src.length - 16) + 'alasql.js';
					break;
				} else if (sc[i].src.substr(-20).toLowerCase() === 'alasql-worker.min.js') {
					path = sc[i].src.substr(0, sc[i].src.length - 20) + 'alasql.min.js';
					break;
				} else if (sc[i].src.substr(-9).toLowerCase() === 'alasql.js') {
					path = sc[i].src;
					break;
				} else if (sc[i].src.substr(-13).toLowerCase() === 'alasql.min.js') {
					path = sc[i].src.substr(0, sc[i].src.length - 13) + 'alasql.min.js';
					break;
				}
			}
		}

		if (typeof path === 'undefined') {
			throw new Error('Path to alasql.js is not specified');
		} else if (path !== false) {
			var js = "importScripts('";
			js += path;
			js +=
				"');self.onmessage = function(event) {" +
				'alasql(event.data.sql,event.data.params, function(data){' +
				'postMessage({id:event.data.id, data:data});});}';

			var blob = new Blob([js], {type: 'text/plain'});
			alasql.webworker = new Worker(URL.createObjectURL(blob));

			alasql.webworker.onmessage = function(event) {
				var id = event.data.id;

				alasql.buffer[id](event.data.data);
				delete alasql.buffer[id];
			};

			alasql.webworker.onerror = function(e) {
				throw e;
			};

			if (arguments.length > 1) {
				var sql =
					'REQUIRE ' +
					paths
						.map(function(p) {
							return '"' + p + '"';
						})
						.join(',');
				alasql(sql, [], cb);
			}
		} else if (path === false) {
			delete alasql.webworker;
			return;
		}
	};
}

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs =
	saveAs ||
	(function(view) {
		'use strict';
		// IE <10 is explicitly unsupported
		if (
			typeof view === 'undefined' ||
			(typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent))
		) {
			return;
		}
		var doc = view.document,
			// only get URL when necessary in case Blob.js hasn't overridden it yet
			get_URL = function() {
				return view.URL || view.webkitURL || view;
			},
			save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),
			can_use_save_link = 'download' in save_link,
			click = function(node) {
				var event = new MouseEvent('click');
				node.dispatchEvent(event);
			},
			is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
			is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
			throw_outside = function(ex) {
				(view.setImmediate || view.setTimeout)(function() {
					throw ex;
				}, 0);
			},
			force_saveable_type = 'application/octet-stream',
			// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
			arbitrary_revoke_timeout = 1000 * 40, // in ms
			revoke = function(file) {
				var revoker = function() {
					if (typeof file === 'string') {
						// file is an object URL
						get_URL().revokeObjectURL(file);
					} else {
						// file is a File
						file.remove();
					}
				};
				setTimeout(revoker, arbitrary_revoke_timeout);
			},
			dispatch = function(filesaver, event_types, event) {
				event_types = [].concat(event_types);
				var i = event_types.length;
				while (i--) {
					var listener = filesaver['on' + event_types[i]];
					if (typeof listener === 'function') {
						try {
							listener.call(filesaver, event || filesaver);
						} catch (ex) {
							throw_outside(ex);
						}
					}
				}
			},
			auto_bom = function(blob) {
				// prepend BOM for UTF-8 XML and text/* types (including HTML)
				// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
				if (
					/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
						blob.type
					)
				) {
					return new Blob([String.fromCharCode(0xfeff), blob], {type: blob.type});
				}
				return blob;
			},
			FileSaver = function(blob, name, no_auto_bom) {
				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				// First try a.download, then web filesystem, then object URLs
				var filesaver = this,
					type = blob.type,
					force = type === force_saveable_type,
					object_url,
					dispatch_all = function() {
						dispatch(filesaver, 'writestart progress write writeend'.split(' '));
					},
					// on any filesys errors revert to saving with object URLs
					fs_error = function() {
						if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
							// Safari doesn't allow downloading of blob urls
							var reader = new FileReader();
							reader.onloadend = function() {
								var url = is_chrome_ios
									? reader.result
									: reader.result.replace(
											/^data:[^;]*;/,
											'data:attachment/file;'
									  );
								var popup = view.open(url, '_blank');
								if (!popup) view.location.href = url;
								url = undefined; // release reference before dispatching
								filesaver.readyState = filesaver.DONE;
								dispatch_all();
							};
							reader.readAsDataURL(blob);
							filesaver.readyState = filesaver.INIT;
							return;
						}
						// don't create more object URLs than needed
						if (!object_url) {
							object_url = get_URL().createObjectURL(blob);
						}
						if (force) {
							view.location.href = object_url;
						} else {
							var opened = view.open(object_url, '_blank');
							if (!opened) {
								// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
								view.location.href = object_url;
							}
						}
						filesaver.readyState = filesaver.DONE;
						dispatch_all();
						revoke(object_url);
					};
				filesaver.readyState = filesaver.INIT;

				if (can_use_save_link) {
					object_url = get_URL().createObjectURL(blob);
					setTimeout(function() {
						save_link.href = object_url;
						save_link.download = name;
						click(save_link);
						dispatch_all();
						revoke(object_url);
						filesaver.readyState = filesaver.DONE;
					});
					return;
				}

				fs_error();
			},
			FS_proto = FileSaver.prototype,
			saveAs = function(blob, name, no_auto_bom) {
				return new FileSaver(blob, name || blob.name || 'download', no_auto_bom);
			};
		// IE 10+ (native saveAs)
		if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
			return function(blob, name, no_auto_bom) {
				name = name || blob.name || 'download';

				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				return navigator.msSaveOrOpenBlob(blob, name);
			};
		}

		FS_proto.abort = function() {};
		FS_proto.readyState = FS_proto.INIT = 0;
		FS_proto.WRITING = 1;
		FS_proto.DONE = 2;

		FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

		return saveAs;
	})(
		(typeof self !== 'undefined' && self) ||
			(typeof window !== 'undefined' && window) ||
			this.content
	);
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== 'undefined' && module.exports) {
	module.exports.saveAs = saveAs;
} else if (typeof define !== 'undefined' && define !== null && define.amd !== null) {
	define('FileSaver.js', function() {
		return saveAs;
	});
}

/* eslint-disable */ 

/*
//
// Last part of Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// This is a final part of Alasql

/*only-for-browser/*
if(utils.isCordova || utils.isMeteorServer || utils.isNode ){
  console.warn('It looks like you are using the browser version of AlaSQL. Please use the alasql.fs.js file instead.')
}
//*/

// FileSaveAs
alasql.utils.saveAs = saveAs;

};

// Create default database
new Database("alasql");

// Set default database
alasql.use("alasql");

return alasql;
}));

